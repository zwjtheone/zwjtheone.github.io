<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>React实践</title>
    <link href="/2023/03/23/2023-03-23-React%E5%AE%9E%E8%B7%B5/"/>
    <url>/2023/03/23/2023-03-23-React%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><ul><li><p>在redux中，全局state必须是immutable的，这点毋庸置疑是我们使用immutable来优化redux的核心</p></li><li><p>组件props是通过redux的connect从state中获得的，并且引入immutableJS的另一个目的是减少组件shouldComponentUpdate中不必要渲染，shouldComponentUpdate中比对的是props，如果props是原生JS就失去了优化的意义</p></li><li><p>组件内部state如果需要提交到store的，必须是immutable，否则不强制</p></li><li><p>view提交到action中的数据必须是immutable</p></li><li><p>Action提交到reducer中的数据必须是immutable</p></li><li><p>reducer中最终处理state必须是以immutable的形式处理并返回</p></li><li><p>与服务端ajax交互中返回的callback统一封装，第一时间转换成immutable数据</p></li><li><p>当使用 Immutable.JS 的 update，merge 或 set 方法将一个 JavaScript 对象添加到一个 Immutable.JS 的 Map 或者 List 中时，要确保被添加的对象事先使用了 fromJS() 转为一个 Immutable 的对象。</p></li><li><p>toJS() 是一个昂贵(性能)的函数，并且与使用 Immutable.JS 的目的相违背。避免使用它。</p></li><li><p>绝对不要在 mapStateToProps 中使用 toJS()</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Puppeteer实践</title>
    <link href="/2022/08/12/2022-08-12-Puppeteer%E5%AE%9E%E8%B7%B5/"/>
    <url>/2022/08/12/2022-08-12-Puppeteer%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="Puppeteer"><a href="#Puppeteer" class="headerlink" title="Puppeteer"></a>Puppeteer</h1><h1 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx">(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>();<br>    <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();<br>    <span class="hljs-comment">//设置可视区域大小</span><br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">setViewport</span>(&#123;<span class="hljs-attr">width</span>: <span class="hljs-number">1920</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">800</span>&#125;);<br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(<span class="hljs-string">&#x27;https://youdata.163.com&#x27;</span>);<br>    <span class="hljs-comment">//对整个页面截图</span><br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">screenshot</span>(&#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;./files/capture.png&#x27;</span>,  <span class="hljs-comment">//图片保存路径</span><br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;png&#x27;</span>,<br>        <span class="hljs-attr">fullPage</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">//边滚动边截图</span><br>        <span class="hljs-comment">// clip: &#123;x: 0, y: 0, width: 1920, height: 800&#125;</span><br>    &#125;);<br>    <span class="hljs-comment">//对页面某个元素截图</span><br>    <span class="hljs-keyword">let</span> [element] = <span class="hljs-keyword">await</span> page.$x(<span class="hljs-string">&#x27;/html/body/section[4]/div/div[2]&#x27;</span>);<br>    <span class="hljs-keyword">await</span> element.<span class="hljs-title function_">screenshot</span>(&#123;<br>        <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;./files/element.png&#x27;</span><br>    &#125;);<br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">close</span>();<br>    <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">close</span>();<br>&#125;)();<br></code></pre></td></tr></table></figure><h1 id="模拟用户登录"><a href="#模拟用户登录" class="headerlink" title="模拟用户登录"></a>模拟用户登录</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx">(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>(&#123;<br>        <span class="hljs-attr">slowMo</span>: <span class="hljs-number">100</span>,    <span class="hljs-comment">//放慢速度</span><br>        <span class="hljs-attr">headless</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">defaultViewport</span>: &#123;<span class="hljs-attr">width</span>: <span class="hljs-number">1440</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">780</span>&#125;,<br>        <span class="hljs-attr">ignoreHTTPSErrors</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//忽略 https 报错</span><br>        <span class="hljs-attr">args</span>: [<span class="hljs-string">&#x27;--start-fullscreen&#x27;</span>] <span class="hljs-comment">//全屏打开页面</span><br>    &#125;);<br>    <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();<br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(<span class="hljs-string">&#x27;https://demo.youdata.com&#x27;</span>);<br>    <span class="hljs-comment">//输入账号密码</span><br>    <span class="hljs-keyword">const</span> uniqueIdElement = <span class="hljs-keyword">await</span> page.$(<span class="hljs-string">&#x27;#uniqueId&#x27;</span>);<br>    <span class="hljs-keyword">await</span> uniqueIdElement.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;admin@admin.com&#x27;</span>, &#123;<span class="hljs-attr">delay</span>: <span class="hljs-number">20</span>&#125;);<br>    <span class="hljs-keyword">const</span> passwordElement = <span class="hljs-keyword">await</span> page.$(<span class="hljs-string">&#x27;#password&#x27;</span>, &#123;<span class="hljs-attr">delay</span>: <span class="hljs-number">20</span>&#125;);<br>    <span class="hljs-keyword">await</span> passwordElement.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;123456&#x27;</span>);<br>    <span class="hljs-comment">//点击确定按钮进行登录</span><br>    <span class="hljs-keyword">let</span> okButtonElement = <span class="hljs-keyword">await</span> page.$(<span class="hljs-string">&#x27;#btn-ok&#x27;</span>);<br>    <span class="hljs-comment">//等待页面跳转完成，一般点击某个按钮需要跳转时，都需要等待 page.waitForNavigation() 执行完毕才表示跳转成功</span><br>    <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>        okButtonElement.<span class="hljs-title function_">click</span>(),<br>        page.<span class="hljs-title function_">waitForNavigation</span>()  <br>    ]);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;admin 登录成功&#x27;</span>);<br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">close</span>();<br>    <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">close</span>();<br>&#125;)();<br></code></pre></td></tr></table></figure><p>那么 ElementHandle 都提供了哪些操作元素的函数呢？</p><p>elementHandle.click()：点击某个元素elementHandle.tap()：模拟手指触摸点击elementHandle.focus()：聚焦到某个元素elementHandle.hover()：鼠标 hover 到某个元素上elementHandle.type(‘hello’)：在输入框输入文本</p><h1 id="请求拦截"><a href="#请求拦截" class="headerlink" title="请求拦截"></a>请求拦截</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs jsx">(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>();<br>    <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();<br>    <span class="hljs-keyword">const</span> blockTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;image&#x27;</span>, <span class="hljs-string">&#x27;media&#x27;</span>, <span class="hljs-string">&#x27;font&#x27;</span>]);<br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">setRequestInterception</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">//开启请求拦截</span><br>    page.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function"><span class="hljs-params">request</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> type = request.<span class="hljs-title function_">resourceType</span>();<br>        <span class="hljs-keyword">const</span> shouldBlock = blockTypes.<span class="hljs-title function_">has</span>(type);<br>        <span class="hljs-keyword">if</span>(shouldBlock)&#123;<br>            <span class="hljs-comment">//直接阻止请求</span><br>            <span class="hljs-keyword">return</span> request.<span class="hljs-title function_">abort</span>();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//对请求重写</span><br>            <span class="hljs-keyword">return</span> request.<span class="hljs-title function_">continue</span>(&#123;<br>                <span class="hljs-comment">//可以对 url，method，postData，headers 进行覆盖</span><br>                <span class="hljs-attr">headers</span>: <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, request.<span class="hljs-title function_">headers</span>(), &#123;<br>                    <span class="hljs-string">&#x27;puppeteer-test&#x27;</span>: <span class="hljs-string">&#x27;true&#x27;</span><br>                &#125;)<br>            &#125;);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(<span class="hljs-string">&#x27;https://demo.youdata.com&#x27;</span>);<br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">close</span>();<br>    <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">close</span>();<br>&#125;)();<br><span class="hljs-comment">//那 page 页面上都提供了哪些事件呢？</span><br><br>page.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;close&#x27;</span>) <span class="hljs-comment">//页面关闭</span><br>page.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;console&#x27;</span>) <span class="hljs-comment">//console API 被调用</span><br>page.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>) <span class="hljs-comment">//页面出错</span><br>page.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;load&#x27;</span>) <span class="hljs-comment">//页面加载完</span><br>page.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>) <span class="hljs-comment">//收到请求</span><br>page.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;requestfailed&#x27;</span>) <span class="hljs-comment">//请求失败</span><br>page.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;requestfinished&#x27;</span>) <span class="hljs-comment">//请求成功</span><br>page.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;response&#x27;</span>) <span class="hljs-comment">//收到响应</span><br>page.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;workercreated&#x27;</span>) <span class="hljs-comment">//创建 webWorker</span><br>page.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;workerdestroyed&#x27;</span>) <span class="hljs-comment">//销毁 webWorker</span><br></code></pre></td></tr></table></figure><h1 id="获取-WebSocket-响应"><a href="#获取-WebSocket-响应" class="headerlink" title="获取 WebSocket 响应"></a>获取 WebSocket 响应</h1><p>Puppeteer 目前没有提供原生的用于处理 WebSocket 的 API 接口，但是我们可以通过更底层的 Chrome DevTool Protocol (CDP) 协议获得</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx">(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>();<br>    <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();<br>    <span class="hljs-comment">//创建 CDP 会话</span><br>    <span class="hljs-keyword">let</span> cdpSession = <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">target</span>().<span class="hljs-title function_">createCDPSession</span>();<br>    <span class="hljs-comment">//开启网络调试,监听 Chrome DevTools Protocol 中 Network 相关事件</span><br>    <span class="hljs-keyword">await</span> cdpSession.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Network.enable&#x27;</span>);<br>    <span class="hljs-comment">//监听 webSocketFrameReceived 事件，获取对应的数据</span><br>    cdpSession.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;Network.webSocketFrameReceived&#x27;</span>, <span class="hljs-function"><span class="hljs-params">frame</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">let</span> payloadData = frame.<span class="hljs-property">response</span>.<span class="hljs-property">payloadData</span>;<br>        <span class="hljs-keyword">if</span>(payloadData.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;push:query&#x27;</span>))&#123;<br>            <span class="hljs-comment">//解析payloadData，拿到服务端推送的数据</span><br>            <span class="hljs-keyword">let</span> res = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(payloadData.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\&#123;.*\&#125;/</span>)[<span class="hljs-number">0</span>]);<br>            <span class="hljs-keyword">if</span>(res.<span class="hljs-property">code</span> !== <span class="hljs-number">200</span>)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`调用websocket接口出错:code=<span class="hljs-subst">$&#123;res.code&#125;</span>,message=<span class="hljs-subst">$&#123;res.message&#125;</span>`</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;获取到websocket接口数据：&#x27;</span>, res.<span class="hljs-property">result</span>);<br>            &#125;<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(<span class="hljs-string">&#x27;https://netease.youdata.163.com/dash/142161/reportExport?pid=700209493&#x27;</span>);<br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">waitForFunction</span>(<span class="hljs-string">&#x27;window.renderdone&#x27;</span>, &#123;<span class="hljs-attr">polling</span>: <span class="hljs-number">20</span>&#125;);<br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">close</span>();<br>    <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">close</span>();<br>&#125;)();<br></code></pre></td></tr></table></figure><h1 id="植入-javascript-代码"><a href="#植入-javascript-代码" class="headerlink" title="植入 javascript 代码"></a>植入 javascript 代码</h1><p>Puppeteer 最强大的功能是，你可以在浏览器里执行任何你想要运行的 javascript 代码，下面是我在爬 188 邮箱的收件箱用户列表时，发现每次打开收件箱再关掉都会多处一个 iframe 来，随着打开收件箱的增多，iframe 增多到浏览器卡到无法运行，所以我在爬虫代码里加了删除无用 iframe 的脚本：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs jsx">(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>();<br>    <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();<br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(<span class="hljs-string">&#x27;https://webmail.vip.188.com&#x27;</span>);<br>    <span class="hljs-comment">//注册一个 Node.js 函数，在浏览器里运行</span><br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">exposeFunction</span>(<span class="hljs-string">&#x27;md5&#x27;</span>, <span class="hljs-function"><span class="hljs-params">text</span> =&gt;</span><br>        crypto.<span class="hljs-title function_">createHash</span>(<span class="hljs-string">&#x27;md5&#x27;</span>).<span class="hljs-title function_">update</span>(text).<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;hex&#x27;</span>)<br>    );<br>    <span class="hljs-comment">//通过 page.evaluate 在浏览器里执行删除无用的 iframe 代码</span><br>    <span class="hljs-keyword">await</span> page.evaluate(<span class="hljs-keyword">async</span> () =&gt;  &#123;<br>        <span class="hljs-keyword">let</span> iframes = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;iframe&#x27;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">3</span>; i &lt;  iframes.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-keyword">let</span> iframe = iframes[i];<br>            <span class="hljs-keyword">if</span>(iframe.<span class="hljs-property">name</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;frameBody&quot;</span>))&#123;<br>                iframe.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;about:blank&#x27;</span>;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    iframe.<span class="hljs-property">contentWindow</span>.<span class="hljs-property">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>                    iframe.<span class="hljs-property">contentWindow</span>.<span class="hljs-property">document</span>.<span class="hljs-title function_">clear</span>();<br>                &#125;<span class="hljs-keyword">catch</span>(e)&#123;&#125;<br>                <span class="hljs-comment">//把iframe从页面移除</span><br>                iframe.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(iframe);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//在页面中调用 Node.js 环境中的函数</span><br>        <span class="hljs-keyword">const</span> myHash = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">md5</span>(<span class="hljs-string">&#x27;PUPPETEER&#x27;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`md5 of <span class="hljs-subst">$&#123;myString&#125;</span> is <span class="hljs-subst">$&#123;myHash&#125;</span>`</span>);<br>    &#125;);<br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">close</span>();<br>    <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">close</span>();<br>&#125;)();<br></code></pre></td></tr></table></figure><p>page.evaluate(pageFunction[, …args])：在浏览器环境中执行函数</p><p>page.evaluateHandle(pageFunction[, …args])：在浏览器环境中执行函数，返回 JsHandle 对象</p><p>page.$$eval(selector, pageFunction[, …args])：把 selector 对应的所有元素传入到函数并在浏览器环境执行</p><p>page.$eval(selector, pageFunction[, …args])：把 selector 对应的第一个元素传入到函数在浏览器环境执行</p><p>page.evaluateOnNewDocument(pageFunction[, …args])：创建一个新的 Document 时在浏览器环境中执行，会在页面所有脚本执行之前执行</p><p>page.exposeFunction(name, puppeteerFunction)：在 window 对象上注册一个函数，这个函数在 Node 环境中执行，有机会在浏览器环境中调用 Node.js 相关函数库</p><h1 id="抓取-iframe-中的元素"><a href="#抓取-iframe-中的元素" class="headerlink" title="抓取 iframe 中的元素"></a>抓取 iframe 中的元素</h1><p>一个 Frame 包含了一个执行上下文（Execution Context），我们不能跨 Frame 执行函数，一个页面中可以有多个 Frame，主要是通过 iframe 标签嵌入的生成的。其中在页面上的大部分函数其实是 page.mainFrame().xx 的一个简写，Frame 是树状结构，我们可以通过 frame.childFrames() 遍历到所有的 Frame，如果想在其它 Frame 中执行函数必须获取到对应的 Frame 才能进行相应的处理</p><p>以下是在登录 188 邮箱时，其登录窗口其实是嵌入的一个 iframe，以下代码时我们在获取 iframe 并进行登录</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx">(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>(&#123;<span class="hljs-attr">headless</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">slowMo</span>: <span class="hljs-number">50</span>&#125;);<br>    <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();<br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(<span class="hljs-string">&#x27;https://www.188.com&#x27;</span>);<br>    <span class="hljs-comment">//点击使用密码登录</span><br>    <span class="hljs-keyword">let</span> passwordLogin = <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">waitForXPath</span>(<span class="hljs-string">&#x27;//*[@id=&quot;qcode&quot;]/div/div[2]/a&#x27;</span>);<br>    <span class="hljs-keyword">await</span> passwordLogin.<span class="hljs-title function_">click</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> frame <span class="hljs-keyword">of</span> page.<span class="hljs-title function_">mainFrame</span>().<span class="hljs-title function_">childFrames</span>())&#123;<br>        <span class="hljs-comment">//根据 url 找到登录页面对应的 iframe</span><br>        <span class="hljs-keyword">if</span> (frame.<span class="hljs-title function_">url</span>().<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;passport.188.com&#x27;</span>))&#123;<br>            <span class="hljs-keyword">await</span> frame.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;.dlemail&#x27;</span>, <span class="hljs-string">&#x27;admin@admin.com&#x27;</span>);<br>            <span class="hljs-keyword">await</span> frame.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;.dlpwd&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>);<br>            <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>                frame.<span class="hljs-title function_">click</span>(<span class="hljs-string">&#x27;#dologin&#x27;</span>),<br>                page.<span class="hljs-title function_">waitForNavigation</span>()<br>            ]);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">close</span>();<br>    <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">close</span>();<br>&#125;)();<br></code></pre></td></tr></table></figure><h1 id="文件的上传和下载"><a href="#文件的上传和下载" class="headerlink" title="文件的上传和下载"></a>文件的上传和下载</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx">(<span class="hljs-keyword">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> browser = <span class="hljs-keyword">await</span> puppeteer.<span class="hljs-title function_">launch</span>();<br>    <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();<br>    <span class="hljs-comment">//通过 CDP 会话设置下载路径</span><br>    <span class="hljs-keyword">const</span> cdp = <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">target</span>().<span class="hljs-title function_">createCDPSession</span>();<br>    <span class="hljs-keyword">await</span> cdp.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Page.setDownloadBehavior&#x27;</span>, &#123;<br>        <span class="hljs-attr">behavior</span>: <span class="hljs-string">&#x27;allow&#x27;</span>, <span class="hljs-comment">//允许所有下载请求</span><br>        <span class="hljs-attr">downloadPath</span>: <span class="hljs-string">&#x27;path/to/download&#x27;</span>  <span class="hljs-comment">//设置下载路径</span><br>    &#125;);<br>    <span class="hljs-comment">//点击按钮触发下载</span><br>    <span class="hljs-keyword">await</span> (<span class="hljs-keyword">await</span> page.<span class="hljs-title function_">waitForSelector</span>(<span class="hljs-string">&#x27;#someButton&#x27;</span>)).<span class="hljs-title function_">click</span>();<br>    <span class="hljs-comment">//等待文件出现，轮训判断文件是否出现</span><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">waitForFile</span>(<span class="hljs-string">&#x27;path/to/download/filename&#x27;</span>);<br><br>    <span class="hljs-comment">//上传时对应的 inputElement 必须是&lt;input&gt;元素</span><br>    <span class="hljs-keyword">let</span> inputElement = <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">waitForXPath</span>(<span class="hljs-string">&#x27;//input[@type=&quot;file&quot;]&#x27;</span>);<br>    <span class="hljs-keyword">await</span> inputElement.<span class="hljs-title function_">uploadFile</span>(<span class="hljs-string">&#x27;/path/to/file&#x27;</span>);<br>    browser.<span class="hljs-title function_">close</span>();<br>&#125;)();<br></code></pre></td></tr></table></figure><h1 id="模拟选择文件"><a href="#模拟选择文件" class="headerlink" title="模拟选择文件"></a>模拟选择文件</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [fileChooser] = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>        page.<span class="hljs-title function_">waitForFileChooser</span>(),<br>        page.<span class="hljs-title function_">click</span>(<span class="hljs-string">&#x27;#mydropzone&#x27;</span>), <span class="hljs-comment">// some button that triggers file selection</span><br>    ]);<br>    <span class="hljs-keyword">await</span> fileChooser.<span class="hljs-title function_">accept</span>([<span class="hljs-string">&#x27;D:\\down\\tmp.zip&#x27;</span>]);<br></code></pre></td></tr></table></figure><h1 id="跳转新-tab-页处理"><a href="#跳转新-tab-页处理" class="headerlink" title="跳转新 tab 页处理"></a>跳转新 tab 页处理</h1><p>在点击一个按钮跳转到新的 Tab 页时会新开一个页面，这个时候我们如何获取改页面对应的 Page 实例呢？可以通过监听 Browser 上的 targetcreated 事件来实现，表示有新的页面创建：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();<br><span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(url);<br><span class="hljs-keyword">let</span> btn = <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">waitForSelector</span>(<span class="hljs-string">&#x27;#btn&#x27;</span>);<br><span class="hljs-comment">//在点击按钮之前，事先定义一个 Promise，用于返回新 tab 的 Page 对象</span><br><span class="hljs-keyword">const</span> newPagePromise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <br>  browser.<span class="hljs-title function_">once</span>(<span class="hljs-string">&#x27;targetcreated&#x27;</span>, <br>    <span class="hljs-function"><span class="hljs-params">target</span> =&gt;</span> <span class="hljs-title function_">res</span>(target.<span class="hljs-title function_">page</span>())<br>  )<br>);<br><span class="hljs-keyword">await</span> btn.<span class="hljs-title function_">click</span>();<br><span class="hljs-comment">//点击按钮后，等待新tab对象</span><br><span class="hljs-keyword">let</span> newPage = <span class="hljs-keyword">await</span> newPagePromise;<br></code></pre></td></tr></table></figure><h1 id="模拟不同的设备"><a href="#模拟不同的设备" class="headerlink" title="模拟不同的设备"></a>模拟不同的设备</h1><p>Puppeteer 提供了模拟不同设备的功能，其中 puppeteer.devices 对象上定义很多设备的配置信息，这些配置信息主要包含 viewport 和 userAgent，然后通过函数 page.emulate 实现不同设备的模拟</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> puppeteer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;puppeteer&#x27;</span>);<br><span class="hljs-keyword">const</span> iPhone = puppeteer.<span class="hljs-property">devices</span>[<span class="hljs-string">&#x27;iPhone 6&#x27;</span>];<br>puppeteer.<span class="hljs-title function_">launch</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">async</span> browser =&gt; &#123;<br>  <span class="hljs-keyword">const</span> page = <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">newPage</span>();<br>  <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">emulate</span>(iPhone);<br>  <span class="hljs-keyword">await</span> page.<span class="hljs-title function_">goto</span>(<span class="hljs-string">&#x27;https://www.google.com&#x27;</span>);<br>  <span class="hljs-keyword">await</span> browser.<span class="hljs-title function_">close</span>();<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>NodeJS</tag>
      
      <tag>Puppeteer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-07-26-windows系统shift加右键管理员打开CMD</title>
    <link href="/2022/07/26/2022-07-26-windows%E7%B3%BB%E7%BB%9Fshift%E5%8A%A0%E5%8F%B3%E9%94%AE%E7%AE%A1%E7%90%86%E5%91%98%E6%89%93%E5%BC%80CMD/"/>
    <url>/2022/07/26/2022-07-26-windows%E7%B3%BB%E7%BB%9Fshift%E5%8A%A0%E5%8F%B3%E9%94%AE%E7%AE%A1%E7%90%86%E5%91%98%E6%89%93%E5%BC%80CMD/</url>
    
    <content type="html"><![CDATA[<figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">Windows Registry Editor Version <span class="hljs-number">5.00</span><br> <br>[HKEY_CLASSES_ROOT\Directory\shell\cmd]<br>@=<span class="hljs-string">&quot;在此处打开命令提示符&quot;</span><br><span class="hljs-string">&quot;Icon&quot;</span>=<span class="hljs-string">&quot;cmd.exe&quot;</span><br> <br>[HKEY_CLASSES_ROOT\Directory\Background\shell\cmd]<br>@=<span class="hljs-string">&quot;在此处打开命令窗口&quot;</span><br><span class="hljs-string">&quot;Icon&quot;</span>=<span class="hljs-string">&quot;cmd.exe&quot;</span><br><br> <br>[HKEY_CLASSES_ROOT\Drive\shell\cmd]<br>@=<span class="hljs-string">&quot;在此处打开命令窗口&quot;</span><br><span class="hljs-string">&quot;Icon&quot;</span>=<span class="hljs-string">&quot;cmd.exe&quot;</span><br><br> <br>[HKEY_CLASSES_ROOT\LibraryFolder\background\shell\cmd]<br>@=<span class="hljs-string">&quot;在此处打开命令窗口&quot;</span><br><span class="hljs-string">&quot;Icon&quot;</span>=<span class="hljs-string">&quot;cmd.exe&quot;</span><br> <br> <br> [HKEY_CLASSES_ROOT\Directory\Background\shell\runas]<br>@=<span class="hljs-string">&quot;在此处打开命令提示符（管理员）&quot;</span><br><span class="hljs-string">&quot;Icon&quot;</span>=<span class="hljs-string">&quot;cmd.exe&quot;</span><br><span class="hljs-string">&quot;Extended&quot;</span>=<span class="hljs-string">&quot;&quot;</span><br><br>[HKEY_CLASSES_ROOT\Directory\Background\shell\runas\command]<br><span class="hljs-string">&quot;ShowBasedOnVelocityId&quot;</span>=<span class="hljs-name">dword</span>:<span class="hljs-number">00639</span>bc8<br>@=<span class="hljs-string">&quot;cmd.exe /s /k pushd \&quot;%V\&quot;&quot;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CMD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bebel笔记</title>
    <link href="/2022/06/06/2022-06-06-Babel%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/06/06/2022-06-06-Babel%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Babel笔记"><a href="#Babel笔记" class="headerlink" title="Babel笔记"></a>Babel笔记</h1><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>编译的定义就是从一种编程语言转成另一种编程语言。主要指的是高级语言到低级语言。</p><blockquote><p>高级语言：有很多用于描述逻辑的语言特性，比如分支、循环、函数、面向对象等，接近人的思维，可以让开发者快速的通过它来表达各种逻辑。比如 c++、javascript。</p></blockquote><blockquote><p>低级语言：与硬件和执行细节有关，会操作寄存器、内存，具体做内存与寄存器之间的复制，需要开发者理解熟悉计算机的工作原理，熟悉具体的执行细节。比如汇编语言、机器语言。</p></blockquote><p>一般编译器 Compiler 是指高级语言到低级语言的转换工具，对于高级语言到高级语言的转换工具，被叫做转换编译器，简称转译器 (Transpiler)。</p><p>babel 就是一个 Javascript Transpiler。</p><h1 id="三步"><a href="#三步" class="headerlink" title="三步"></a>三步</h1><p>babel 是 source to source 的转换，整体编译流程分为三步：</p><ul><li>parse：通过 parser 把源码转成抽象语法树（AST）</li><li>transform：遍历 AST，调用各种 transform 插件对 AST 进行增删改</li><li>generate：把转换后的 AST 打印成目标代码，并生成 sourcemap</li></ul><p>![Untitled](&#x2F;img&#x2F;Untitled 34.png)</p><h1 id="常见的AST节点"><a href="#常见的AST节点" class="headerlink" title="常见的AST节点"></a>常见的AST节点</h1><p><a href="https://astexplorer.net/">https://astexplorer.net/</a></p><p>Literal 字面量</p><p>Identifier 标识符 变量名、属性名、参数名等各种声明和引用的名字</p><p>Statement 语句</p><p>Declaration 声明语句</p><p>Expression 表达式</p><p>Class ClassBody</p><h1 id="Babel-API"><a href="#Babel-API" class="headerlink" title="Babel API"></a>Babel API</h1><ul><li><p><code>@babel/parser</code> 对源码进行 parse，可以通过 plugins、sourceType 等来指定 parse 语法</p></li><li><p><code>@babel/traverse</code> 通过 visitor 函数对遍历到的 ast 进行处理，分为 enter 和 exit 两个阶段，具体操作 AST 使用 path 的 api，还可以通过 state 来在遍历过程中传递一些数据</p><p>常用的就前面两个参数，parent 指定要遍历的 AST 节点，opts 指定 visitor 函数。babel 会在遍历 parent 对应的 AST 时调用相应的 visitor 函数。</p><p>visitor 对象的 value 是对象或者函数：</p><ul><li>如果 value 为函数，那么就相当于是 enter 时调用的函数。</li><li>如果 value 为对象，则可以明确指定 enter 或者 exit 时的处理函数。</li></ul><p>函数会接收两个参数 path 和 state。</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">visitor</span>: &#123;<br>    <span class="hljs-title class_">Identifier</span> (path, state) &#123;&#125;,<br>    <span class="hljs-title class_">StringLiteral</span>: &#123;<br>        enter (path, state) &#123;&#125;,<br>        exit (path, state) &#123;&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以为单个节点的类型，也可以是多个节点类型通过 <code>|</code> 连接，还可以通过别名指定一系列节点类型。</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 进入 FunctionDeclaration 节点时调用</span><br><span class="hljs-title function_">traverse</span>(ast, &#123;<br>  <span class="hljs-title class_">FunctionDeclaration</span>: &#123;<br>      <span class="hljs-title function_">enter</span>(<span class="hljs-params">path, state</span>) &#123;&#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// 默认是进入节点时调用，和上面等价</span><br><span class="hljs-title function_">traverse</span>(ast, &#123;<br>  <span class="hljs-title class_">FunctionDeclaration</span>(path, state) &#123;&#125;<br>&#125;)<br><br><span class="hljs-comment">// 进入 FunctionDeclaration 和 VariableDeclaration 节点时调用</span><br><span class="hljs-title function_">traverse</span>(ast, &#123;<br>  <span class="hljs-string">&#x27;FunctionDeclaration|VariableDeclaration&#x27;</span>(path, state) &#123;&#125;<br>&#125;)<br><br><span class="hljs-comment">// 通过别名指定离开各种 Declaration 节点时调用</span><br><span class="hljs-title function_">traverse</span>(ast, &#123;<br>  <span class="hljs-title class_">Declaration</span>: &#123;<br>      <span class="hljs-title function_">exit</span>(<span class="hljs-params">path, state</span>) &#123;&#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p><code>@babel/types</code> 用于创建、判断 AST 节点，提供了 xxx、isXxx、assertXxx 的 api</p></li><li><p><code>@babel/template</code> 用于批量创建节点</p></li><li><p><code>@babel/code-frame</code> 可以创建友好的报错信息</p></li><li><p><code>@babel/generator</code> 打印 AST 成目标代码字符串，支持 comments、minified、sourceMaps 等选项。</p></li><li><p><code>@babel/core</code> 基于上面的包来完成 babel 的编译流程，可以从源码字符串、源码文件、AST 开始。</p></li></ul><h1 id="traverse包的visitor-amp-path"><a href="#traverse包的visitor-amp-path" class="headerlink" title="traverse包的visitor&amp;path"></a>traverse包的visitor&amp;path</h1><p>访问者模式</p><blockquote><p>当被操作的对象结构比较稳定，而操作对象的逻辑经常变化的时候，通过分离逻辑和对象结构，使得他们能独立扩展</p></blockquote><h2 id="path"><a href="#path" class="headerlink" title="path"></a>path</h2><p>操作 AST 时要拿到父节点的信息，并且也需要对 AST 增删改的方法，这些都在 path 对象里。</p><ul><li>path.node 当前 AST 节点</li><li>path.parent 父 AST 节点</li><li>path.parentPath 父 AST 节点的 path</li><li>path.scope 作用域，见下文详解</li><li>path.hub 可以通过 path.hub.file 拿到最外层 File 对象， path.hub.getScope 拿到最外层作用域，path.hub.getCode 拿到源码字符串</li><li>path.container 当前 AST 节点所在的父节点属性的属性值</li><li>path.key 当前 AST 节点所在父节点属性的属性名或所在数组的下标</li><li>path.listkey 当前 AST 节点所在父节点属性的属性值为数组时 listkey 为该属性名，否则为 undefined</li><li>inList() 判断节点是否在数组中，如果 container 为数组，也就是有 listkey 的时候，返回 true</li><li>get(key) 获取某个属性的 path</li><li>set(key, node) 设置某个属性的值</li><li>getSibling(key) 获取某个下标的兄弟节点</li><li>getNextSibling() 获取下一个兄弟节点</li><li>getPrevSibling() 获取上一个兄弟节点</li><li>getAllPrevSiblings() 获取之前的所有兄弟节点</li><li>getAllNextSiblings() 获取之后的所有兄弟节点</li><li>find(callback) 从当前节点到根节点来查找节点（包括当前节点），调用 callback（传入 path）来决定是否终止查找</li><li>findParent(callback) 从当前节点到根节点来查找节点（不包括当前节点），调用 callback（传入 path）来决定是否终止查找</li><li>isXxx(opts) 判断当前节点是否是某个类型，可以传入属性和属性值进一步判断，比如path.isIdentifier({name: ‘a’})</li><li>assertXxx(opts) 同 isXxx，但是不返回布尔值，而是抛出异常</li><li>insertBefore(nodes) 在之前插入节点，可以是单个节点或者节点数组</li><li>insertAfter(nodes) 在之后插入节点，可以是单个节点或者节点数组</li><li>replaceWith(replacement) 用某个节点替换当前节点</li><li>replaceWithMultiple(nodes) 用多个节点替换当前节点</li><li>replaceWithSourceString(replacement) 解析源码成 AST，然后替换当前节点</li><li>remove() 删除当前节点</li><li>traverse(visitor, state) 遍历当前节点的子节点，传入 visitor 和 state（state 是不同节点间传递数据的方式）</li><li>skip() 跳过当前节点的子节点的遍历</li><li>stop() 结束所有遍历</li></ul><h2 id="作用域-path-scope"><a href="#作用域-path-scope" class="headerlink" title="作用域 path.scope"></a>作用域 path.scope</h2><ul><li>scope.bindings 当前作用域内声明的所有变量</li><li>scope.block 生成作用域的 block，详见下文</li><li>scope.path 生成作用域的节点对应的 path</li><li>scope.references 所有 binding 的引用对应的 path，详见下文</li><li>scope.dump() 打印作用域链的所有 binding 到控制台</li><li>scope.parentBlock() 父级作用域的 block</li><li>getAllBindings() 从当前作用域到根作用域的所有 binding 的合并</li><li>getBinding(name) 查找某个 binding，从当前作用域一直查找到根作用域</li><li>getOwnBinding(name) 从当前作用域查找 binding</li><li>parentHasBinding(name, noGlobals) 查找某个 binding，从父作用域查到根作用域，不包括当前作用域。可以通过 noGlobals 参数指定是否算上全局变量（比如console，不需要声明就可用），默认是 false</li><li>removeBinding(name) 删除某个 binding</li><li>hasBinding(name, noGlobals) 从当前作用域查找 binding，可以指定是否算上全局变量，默认是 false</li><li>moveBindingTo(name, scope) 把当前作用域中的某个 binding 移动到其他作用域</li><li>generateUid(name) 生成作用域内唯一的名字，根据 name 添加下划线，比如 name 为 a，会尝试生成 _a，如果被占用就会生成 __a，直到生成没有被使用的名字。</li></ul><h2 id="scope-bindings、scope-references（重点）"><a href="#scope-bindings、scope-references（重点）" class="headerlink" title="scope.bindings、scope.references（重点）"></a>scope.bindings、scope.references（重点）</h2><p>作用域中保存的是声明的变量和对应的值，每一个声明叫做一个binding（绑定）。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">bindings</span>: &#123;<br>    <span class="hljs-attr">a</span>: &#123;<br>        <span class="hljs-attr">constant</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">constantViolations</span>: [],<br>        <span class="hljs-attr">identifier</span>: &#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;Identifier&#x27;</span>, ...&#125;<br>        <span class="hljs-attr">kind</span>:<span class="hljs-string">&#x27;const&#x27;</span>,<br>        <span class="hljs-attr">path</span>: &#123;node,...&#125;<br>        <span class="hljs-attr">referenced</span>: <span class="hljs-literal">false</span><br>        <span class="hljs-attr">referencePaths</span>: [],<br>        <span class="hljs-attr">references</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">scope</span>: ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AST别名"><a href="#AST别名" class="headerlink" title="AST别名"></a>AST别名</h2><p><a href="https://github.com/babel/babel/blob/main/packages/babel-types/src/ast-types/generated/index.ts#L2489-L2535">https://github.com/babel/babel/blob/main/packages/babel-types/src/ast-types/generated/index.ts#L2489-L2535</a></p><h1 id="Generate"><a href="#Generate" class="headerlink" title="Generate"></a>Generate</h1><p>generate 是把 AST 打印成字符串，是一个从根节点递归打印的过程，对不同的 AST 节点做不同的处理，在这个过程中把抽象语法树中省略掉的一些分隔符重新加回来。</p><h2 id="sourcemap"><a href="#sourcemap" class="headerlink" title="sourcemap"></a>sourcemap</h2><p>babel 对源码进行了修改，生成的目标代码可能改动很大，如果直接调试目标代码，想手动定位回源码比较难。所以需要一种自动关联源码的方式，就是 sourcemap。</p><p>调试代码时定位到源码</p><p>线上报错定位到源码</p><h3 id="生成-sourcemap"><a href="#生成-sourcemap" class="headerlink" title="生成 sourcemap"></a>生成 sourcemap</h3><ol><li>创建一个 SourceMapGenerator 对象</li><li>通过 addMapping 方法添加一个映射</li><li>通过 toString 转为 sourcemap 字符串</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SourceMapGenerator</span>(&#123;<br>  <span class="hljs-attr">file</span>: <span class="hljs-string">&quot;source-mapped.js&quot;</span><br>&#125;);<br><br>map.<span class="hljs-title function_">addMapping</span>(&#123;<br>  <span class="hljs-attr">generated</span>: &#123;<br>    <span class="hljs-attr">line</span>: <span class="hljs-number">10</span>,<br>    <span class="hljs-attr">column</span>: <span class="hljs-number">35</span><br>  &#125;,<br>  <span class="hljs-attr">source</span>: <span class="hljs-string">&quot;foo.js&quot;</span>,<br>  <span class="hljs-attr">original</span>: &#123;<br>    <span class="hljs-attr">line</span>: <span class="hljs-number">33</span>,<br>    <span class="hljs-attr">column</span>: <span class="hljs-number">2</span><br>  &#125;,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;christopher&quot;</span><br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(map.<span class="hljs-title function_">toString</span>());<br></code></pre></td></tr></table></figure><h1 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h1><p>插件做的事情就是通过 api 拿到 types、template 等，通过 state.opts 拿到参数，然后通过 path 来修改 AST。可以通过 state 放一些遍历过程中共享的数据，通过 file 放一些整个插件都能访问到的一些数据，除了这两种之外，还可以通过 this 来传递本对象共享的数据。</p><p>babel plugin 有两种格式：</p><h3 id="返回对象的函数"><a href="#返回对象的函数" class="headerlink" title="返回对象的函数"></a>返回对象的函数</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//options 就是外面传入的参数</span><br><span class="hljs-comment">//dirname 是目录名（不常用）</span><br><span class="hljs-comment">//api 里包含了各种 babel 的 api，比如 types、template 等，这些包就不用在插件里单独单独引入了，直接取来用就行。</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">api, options, dirname</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">inherits</span>: parentPlugin,<br>    <span class="hljs-title function_">manipulateOptions</span>(<span class="hljs-params">options, parserOptions</span>) &#123;<br>        options.<span class="hljs-property">xxx</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;,<br>    <span class="hljs-title function_">pre</span>(<span class="hljs-params">file</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>    &#125;,<br>    <span class="hljs-attr">visitor</span>: &#123;<br>      <span class="hljs-title class_">StringLiteral</span>(path, state) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">set</span>(path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span>, <span class="hljs-number">1</span>);<br>      &#125;<br>    &#125;,<br>    <span class="hljs-title function_">post</span>(<span class="hljs-params">file</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>);<br>    &#125;<br>  &#125;;<br>&#125;<br><span class="hljs-comment">//inherits 指定继承某个插件，和当前插件的 options 合并，通过 Object.assign 的方式。</span><br><span class="hljs-comment">//visitor 指定 traverse 时调用的函数。</span><br><span class="hljs-comment">//pre 和 post 分别在遍历前后调用，可以做一些插件调用前后的逻辑，比如可以往 file（表示文件的对象，在插件里面通过 state.file 拿到）中放一些东西，在遍历的过程中取出来。</span><br><span class="hljs-comment">//manipulateOptions 用于修改 options，是在插件里面修改配置的方式，比如 syntaxt plugin一般都会修改 parser options：</span><br></code></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>插件的第二种格式就是直接写一个对象，不用函数包裹，这种方式用于不需要处理参数的情况。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> plugin =  &#123;<br>    <span class="hljs-title function_">pre</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>    &#125;,<br>    <span class="hljs-attr">visitor</span>: &#123;<br>      <span class="hljs-title class_">StringLiteral</span>(path, state) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>.<span class="hljs-title function_">set</span>(path.<span class="hljs-property">node</span>.<span class="hljs-property">value</span>, <span class="hljs-number">1</span>);<br>      &#125;<br>    &#125;,<br>    <span class="hljs-title function_">post</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="preset"><a href="#preset" class="headerlink" title="preset"></a>preset</h3><p>babel 会按照如下顺序处理插件和 preset：</p><ol><li>先应用 plugin，再应用 preset</li><li>plugin 从前到后，preset 从后到前</li></ol><p>名字</p><p>babel 对插件名字的格式有一定的要求，比如最好包含 babel-plugin，如果不包含的话也会自动补充。</p><p>babel plugin 名字的补全有这些规则：</p><ul><li>如果是 .&#x2F; 开头的相对路径，不添加 babel plugin，比如 .&#x2F;dir&#x2F;plugin.js</li><li>如果是绝对路径，不添加 babel plugin，比如 &#x2F;dir&#x2F;plugin.js</li><li>如果是单独的名字 aa，会添加为 babel-plugin-aa，所以插件名字可以简写为 aa</li><li>如果是单独的名字 aa，但以 module 开头，则不添加 babel plugin，比如 module:aa</li><li>如果 @scope 开头，不包含 plugin，则会添加 babel-plugin，比如 @scope&#x2F;mod 会变为 @scope&#x2F;babel-plugin-mod</li><li>babel 自己的 @babel 开头的包，会自动添加 plugin，比如 @babel&#x2F;aa 会变成 @babel&#x2F;plugin-aa</li></ul><p>（preset也是一样）</p><p>规则比较多，总结一下就是 babel 希望插件名字中能包含 babel plugin，这样写 plugin 的名字的时候就可以简化，然后 babel 自动去补充。所以我们写的 babel 插件最好是 babel-plugin-xx 和 @scope&#x2F;babel-plugin-xx 这两种，就可以简单写为 xx 和 @scope&#x2F;xx。</p><h1 id="Babel-helpers"><a href="#Babel-helpers" class="headerlink" title="Babel helpers"></a>Babel helpers</h1><p><strong>babel helpers 是用于 babel plugin 逻辑复用的一些工具函数，分为用于注入 runtime 代码的 helper 和用于简化 AST 操作 的 helper两种。第一种都在 @babel&#x2F;helpers 包里，直接 this.addHelper(name) 就可以引入， 而第二种需要手动引入包和调用 api</strong></p><h1 id="babel8"><a href="#babel8" class="headerlink" title="babel8"></a>babel8</h1><p>babel 中插件的应用顺序是：先 plugin 再 preset，plugin 从左到右，preset 从右到左，这样 plugin-transform-runtime 是在 preset-env 前面的。等 @babel&#x2F;plugin-transform-runtime 转完了之后，再交给 preset-env 这时候已经做了无用的转换了。而 @babel&#x2F;plugin-transform-runtime 并不支持 targets 的配置，就会做一些多余的转换和 polyfill。</p><p>这个问题在即将到来的 babel8 中得到了解决。</p><ul><li>entry-global: 这个和之前的 useBuiltIns: entry 对标，就是全局引入 polyfill。</li><li>usage-entry: 这个和 useBuiltIns: usage 对标，就是具体模块引入用到的 polyfill。</li><li>usage-pure：这个就是之前需要 transform-runtime 插件做的事情，使用不污染全局变量的 pure 的方式引入具体模块用到的 polyfill.</li></ul><p><a href="https://www.notion.so/a634db01136b4f6fbeed661d2665995c">实战：自动埋点</a></p><p><a href="https://www.notion.so/4c8a0e59f9da480c902cf73c19fe2e41">实战：自动国际化</a></p><p><a href="https://www.notion.so/API-db78d69f198945809d27d59e39e8a154">实战：自动生产API文档</a></p><p><a href="https://www.notion.so/linter-be39538305c845bd9558de513634542e">实战：linter</a></p><p><a href="https://www.notion.so/type-checker-ec8410c3a1d74ffa976afb4c133f3773">实战：type checker</a></p><p><a href="https://www.notion.so/afc8dea4eb504483a0fad31331e25bdf">实战：压缩混淆</a></p><p><a href="https://www.notion.so/js-1148521abb6b43ceb1e2fc77949fe8a3">实战：js解释器</a></p><p><a href="https://www.notion.so/0c9cbf4fa5d941a9a02559f6b67c40c9">实战：模块遍历器</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Babel</tag>
      
      <tag>Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>箭头函数与普通函数区别？能不能作为构造函数</title>
    <link href="/2022/06/06/2022-06-06-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E5%8C%BA%E5%88%AB%EF%BC%9F%E8%83%BD%E4%B8%8D%E8%83%BD%E4%BD%9C%E4%B8%BA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <url>/2022/06/06/2022-06-06-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E5%8C%BA%E5%88%AB%EF%BC%9F%E8%83%BD%E4%B8%8D%E8%83%BD%E4%BD%9C%E4%B8%BA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<ol><li>语法更加简洁、清晰</li><li>箭头函数不会创建自己的this</li><li>箭头函数继承而来的this指向永远不变</li><li>.call()&#x2F;.apply()&#x2F;.bind()无法改变箭头函数中this的指向</li><li>箭头函数不能作为构造函数使用</li><li>箭头函数没有自己的arguments</li><li>箭头函数没有原型prototype</li><li>箭头函数不能用作Generator函数，不能使用yeild关键字</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tasks, Microtasks, Queues and Schedules JS运行机制</title>
    <link href="/2022/06/06/2022-06-06-Tasks,%20Microtasks,%20Queues%20and%20Schedules%20JS%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/06/06/2022-06-06-Tasks,%20Microtasks,%20Queues%20and%20Schedules%20JS%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Tasks-Microtasks-Queues-and-Schedules-JS运行机制"><a href="#Tasks-Microtasks-Queues-and-Schedules-JS运行机制" class="headerlink" title="Tasks, Microtasks, Queues and Schedules:JS运行机制"></a>Tasks, Microtasks, Queues and Schedules:JS运行机制</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script start&#x27;</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setTimeout&#x27;</span>);<br><br>&#125;, <span class="hljs-number">0</span>);<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise1&#x27;</span>);<br><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise2&#x27;</span>);<br><br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script end&#x27;</span>);<br></code></pre></td></tr></table></figure><p><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/">Tasks, microtasks, queues and schedules</a></p><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title class_">EventEmitter</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;events&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EE</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">EventEmitter</span> &#123;&#125;<br><br><span class="hljs-keyword">const</span> yy = <span class="hljs-keyword">new</span> <span class="hljs-title function_">EE</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;测试开始&#x27;</span>)<br><br>yy.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;event&#x27;</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是EventEmitter触发的事件回调&#x27;</span>))<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;0 毫秒后到期的定时器回调1&#x27;</span>)<br><br>  process.<span class="hljs-title function_">nextTick</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是0毫秒定时器1加塞的一个微任务&#x27;</span>))<br><br>&#125;, <span class="hljs-number">0</span>)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;0 毫秒后到期的定时器回调2&#x27;</span>)<br><br>  process.<span class="hljs-title function_">nextTick</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是0毫秒定时器2加塞的一个微任务&#x27;</span>))<br><br>&#125;, <span class="hljs-number">0</span>)<br><br><span class="hljs-title function_">setImmediate</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;immediate 立即回调&#x27;</span>))<br><br>process.<span class="hljs-title function_">nextTick</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;process.nextTick 的第一次回调&#x27;</span>))<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是promise&#x27;</span>)<br><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><br>  yy.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;event&#x27;</span>)<br><br>  process.<span class="hljs-title function_">nextTick</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;process.nextTick 的第二次回调&#x27;</span>))<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise 第一次回调&#x27;</span>)<br><br>&#125;)<br><br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise 第二次回调&#x27;</span>))<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;测试结束?&#x27;</span>)<br><br><span class="hljs-comment">/* 打印结果如下：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  测试开始</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  我是promise</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  测试结束?</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  process.nextTick 的第一次回调</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  0 毫秒后到期的定时器回调1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  我是0毫秒定时器1加塞的一个微任务</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  0 毫秒后到期的定时器回调2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  我是0毫秒定时器2加塞的一个微任务</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  immediate 立即回调</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>js把异步任务队列分为两种：宏任务(macro task)和微任务(micro task)，二者的区别是执行时机的不同。</p><ul><li><strong>先执行微任务的队列，再检查宏任务的队列</strong></li><li><strong>在当前的微任务没有执行完成时，是不会执行下一个宏任务的。</strong></li><li><strong>每次执行完一个宏任务之后，要检查微任务队列是否又有任务需要执行了(这个体现在上面的练习题中的超时后加塞的微任务队列)</strong></li></ul><p>那么知道了执行的机制之后，剩下的一个问题就是任务类型的划分，整理如下一表，结合上面的问题，相信你心中有了答案了~</p><p><em>Tips</em></p><ol><li>async函数在await之前的代码都是同步执行的，可以理解为await之前的代码属于new Promise时传入的代码，await之后的所有代码都是在Promise.then中的回调</li><li><strong>node11版本之前的打印和这里的不大一样，原因可以看这里的<a href="https://github.com/nodejs/node/issues/22257">MacroTask and MicroTask execution order</a></strong></li></ol><table><thead><tr><th align="left">事件</th><th align="left">宏任务&#x2F;微任务</th><th align="center">浏览器</th><th align="center">nodejs</th></tr></thead><tbody><tr><td align="left">I&#x2F;O</td><td align="left">宏任务</td><td align="center">✅</td><td align="center">✅</td></tr><tr><td align="left">setTimeout</td><td align="left">宏任务</td><td align="center">✅</td><td align="center">✅</td></tr><tr><td align="left">setInterval</td><td align="left">宏任务</td><td align="center">✅</td><td align="center">✅</td></tr><tr><td align="left">setImmediate</td><td align="left">宏任务</td><td align="center">❌</td><td align="center">✅</td></tr><tr><td align="left">requestAnimationFrame</td><td align="left">宏任务</td><td align="center">✅</td><td align="center">❌</td></tr><tr><td align="left">process.nextTick</td><td align="left">微任务</td><td align="center">✅</td><td align="center">✅</td></tr><tr><td align="left">MutationObserver</td><td align="left">微任务</td><td align="center">✅</td><td align="center">❌</td></tr><tr><td align="left">Promise.then catch finally</td><td align="left">微任务</td><td align="center">✅</td><td align="center">✅</td></tr><tr><td align="left">EventEmitter</td><td align="left">微任务</td><td align="center">❌</td><td align="center">✅</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react hook倒计时写法</title>
    <link href="/2022/06/06/2022-06-06-react%20hook%E5%80%92%E8%AE%A1%E6%97%B6%E5%86%99%E6%B3%95/"/>
    <url>/2022/06/06/2022-06-06-react%20hook%E5%80%92%E8%AE%A1%E6%97%B6%E5%86%99%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useState,useRef,useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-comment">// 错误的写法</span><br><span class="hljs-comment">// const CountTimer = () =&gt; &#123;</span><br><span class="hljs-comment">//     let [count, setCount] = useState(0)</span><br><span class="hljs-comment">//     let CountTimer</span><br><span class="hljs-comment">//     useEffect(() =&gt; &#123;</span><br><span class="hljs-comment">//         setInterval(() =&gt; &#123;</span><br><span class="hljs-comment">//             setCount(count+1)   </span><br><span class="hljs-comment">//         &#125;)</span><br><span class="hljs-comment">//         return () =&gt; window.clearInterval(CountTimer)</span><br><span class="hljs-comment">//     &#125;, [count])</span><br><span class="hljs-comment">//     return (</span><br><span class="hljs-comment">//         &lt;React.Fragment&gt;</span><br><span class="hljs-comment">//             &lt;div&gt; &#123;count&#125; &lt;/div&gt;</span><br><span class="hljs-comment">//         &lt;/React.Fragment&gt;</span><br><span class="hljs-comment">//     )</span><br><span class="hljs-comment">// &#125;</span><br><br><br><br><span class="hljs-comment">//正确的写法</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">CountTimer</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">let</span> intervalCb = <span class="hljs-title function_">useRef</span>(<span class="hljs-literal">null</span>)<br>    <span class="hljs-keyword">let</span> <span class="hljs-title class_">CountTimer</span><br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        intervalCb.<span class="hljs-property">current</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-title function_">setCount</span>(count+<span class="hljs-number">1</span>)   <br>        &#125;<br>    &#125;, [count])<br><br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">itvFn</span>(<span class="hljs-params"></span>) &#123;<br>            intervalCb.<span class="hljs-title function_">current</span>()<br>        &#125;<br>        <span class="hljs-title class_">CountTimer</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setInterval</span>(itvFn, <span class="hljs-number">1000</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(<span class="hljs-title class_">CountTimer</span>)<br>    &#125;, [])<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleStop</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearInterval</span>(<span class="hljs-title class_">CountTimer</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">React.Fragment</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;handleStop()&#125;&#125;&gt;停止计时<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">React.Fragment</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue2最佳实践</title>
    <link href="/2022/06/06/2022-06-06-vue%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <url>/2022/06/06/2022-06-06-vue%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="深入浅出vue-js"><a href="#深入浅出vue-js" class="headerlink" title="深入浅出vue.js"></a>深入浅出vue.js</h1><ol><li>为列表渲染设置属性key</li><li>在v-if&#x2F;v-if-else-v-else中使用key</li><li>路由切换组件不变<ol><li>路由导航守卫beforeRouteUpdate</li><li>观察$route对象的变化</li><li>为router-view组件添加属性key</li></ol></li><li>为所有路由统一添加query<ol><li>使用全局守卫beforeEach</li><li>使用函数劫持</li></ol></li><li>区分vuex与props的使用边界</li><li>避免v-if和v-for一起使用</li><li>为组件样式设置作用域</li><li>避免在scoped中使用元素选择器</li><li>避免使用this.$parent改变prop</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rxjs分享</title>
    <link href="/2022/06/06/2022-06-06-rxjs%E5%88%86%E4%BA%AB/"/>
    <url>/2022/06/06/2022-06-06-rxjs%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="rxjs分享"><a href="#rxjs分享" class="headerlink" title="rxjs分享"></a>rxjs分享</h1><h1 id="函数式编程："><a href="#函数式编程：" class="headerlink" title="函数式编程："></a>函数式编程：</h1><h3 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h3><p>和声明式相对应的编程方式叫做命令式编程（Imperative Programming），</p><p>命令式编程也是最常见的一种编程方式。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">addOne</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">const</span> results = []<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-property">length</span>; i++)&#123;<br>    results.<span class="hljs-title function_">push</span>(arr[i] + <span class="hljs-number">1</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> results<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="纯函数（pure-Function）"><a href="#纯函数（pure-Function）" class="headerlink" title="纯函数（pure Function）"></a>纯函数（pure Function）</h3><p>❑ 函数的执行过程完全由输入参数决定，不会受除参数之外的任何数据影响。</p><p>❑ 函数不会修改任何外部状态，比如修改全局变量或传入的参数对象。</p><h3 id="不纯函数（Impure-Function）"><a href="#不纯函数（Impure-Function）" class="headerlink" title="不纯函数（Impure Function）"></a>不纯函数（Impure Function）</h3><p>❑ 改变全局变量的值。</p><p>❑ 改变输入参数引用的对象，就像上面不是纯函数的arrayPush实现。</p><p>❑ 读取用户输入，比如调用了alert或者confirm函数。</p><p>❑ 抛出一个异常。</p><p>❑ 网络输入&#x2F;输出操作，比如通过AJAX调用一个服务器的API。</p><p>❑ 操作浏览器的DOM。</p><h3 id="数据不可变"><a href="#数据不可变" class="headerlink" title="数据不可变"></a>数据不可变</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//bad</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">arrayPush</span> (arr, newValue) &#123;<br>  arr.<span class="hljs-title function_">push</span>(newValue);<br>  <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-comment">//good</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">arrayPush</span> (arr, newValue) &#123;<br>  <span class="hljs-keyword">return</span> [...arr, newValue];<br>&#125;<br><span class="hljs-comment">//-----</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">double</span>(<span class="hljs-params">arr</span>) &#123;<br>  <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item * <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>rx是一种思想</p><hr><blockquote><p>Think of RxJS as Lodash for events.</p></blockquote><p>❑ 数据流抽象了很多现实问题。</p><p>❑ 擅长处理异步操作。</p><p>❑ 把复杂问题分解成简单问题的组合。</p><ul><li><strong>Observable:</strong> represents the idea of an invokable collection of future values or events.</li><li><strong>Observer:</strong> is a collection of callbacks that knows how to listen to values delivered by the Observable.</li><li><strong>Subscription:</strong> represents the execution of an Observable, is primarily useful for cancelling the execution.</li><li><strong>Operators:</strong> are pure functions that enable a functional programming style of dealing with collections with operations like <code>map</code>, <code>filter</code>, <code>concat</code>, <code>reduce</code>, etc.</li><li><strong>Subject:</strong> is the equivalent to an EventEmitter, and the only way of multicasting a value or event to multiple Observers.</li><li><strong>Schedulers:</strong> are centralized dispatchers to control concurrency, allowing us to coordinate when computation happens on e.g. <code>setTimeout</code> or <code>requestAnimationFrame</code> or others.</li></ul><p>引入rxjs主要是处理异步问题</p><p>之前方式是</p><p>回调</p><p>事件</p><p>Promise</p><p>Generator</p><p>![rxjs%E5%88%86%E4%BA%AB%20a28ecda1f359473b8972a4b50f16cb33&#x2F;Untitled.png](&#x2F;img&#x2F;Untitled 33.png)</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>❑ 如何产生事件，这是发布者的责任，在RxJS中是Observable对象的工作。</p><p>❑ 如何响应事件，这是观察者的责任，在RxJS中由subscribe的参数来决定。</p><p>❑ 什么样的发布者关联什么样的观察者，也就是何时调用subscribe。</p><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>通常所说的是“拉”式的迭代器实现，而RxJS实现的是“推”式的迭代器实现。</p><p>Observable &#x3D; Publisher+Iterator</p><p>Observable产生的事件，只有Observer通过subscribe订阅之后才会收到，在unsubscribe之后就不会再收到。</p><h3 id="操作符类型"><a href="#操作符类型" class="headerlink" title="操作符类型"></a>操作符类型</h3><p>❑ 创建类（creation）</p><p>❑ 转化类（transformation）</p><p>❑ 过滤类（filtering）</p><p>❑ 合并类（combination）</p><p>❑ 多播类（multicasting）</p><p>❑ 错误处理类（error Handling）</p><p>❑ 辅助工具类（utility）</p><p>❑ 条件分支类（conditional &amp; boolean）</p><p>❑ 数学和合计类（mathmatical &amp; aggregate）</p><p>RxJS提供了各种API来创建数据流：</p><ul><li>单值：of, empty, never</li><li>多值：from</li><li>定时：interval, timer</li><li>从事件创建：fromEvent</li><li>从Promise创建：fromPromise</li><li>自定义创建：create</li></ul><p>创建出来的数据流是一种可观察的序列，可以被订阅，也可以被用来做一些转换操作，比如：</p><ul><li>改变数据形态：map, mapTo, pluck</li><li>过滤一些值：filter, skip, first, last, take</li><li>时间轴上的操作：delay, timeout, throttle, debounce, audit, bufferTime</li><li>累加：reduce, scan</li><li>异常处理：throw, catch, retry, finally</li><li>条件执行：takeUntil, delayWhen, retryWhen, subscribeOn, ObserveOn</li><li>转接：switch</li></ul><p>也可以对若干个数据流进行组合：</p><ul><li>concat，保持原来的序列顺序连接两个数据流</li><li>merge，合并序列</li><li>race，预设条件为其中一个数据流完成</li><li>forkJoin，预设条件为所有数据流都完成</li><li>zip，取各来源数据流最后一个值合并为对象</li><li>combineLatest，取各来源数据流最后一个值合并为数组</li></ul><p>subject慎用，因为是热订阅，难以查询到堆栈调用。所以要使用dispatch模式。</p><p>写的代码逻辑不能有断层</p><p>observable是可观察对象，都可以用pipe管道来操作</p><p>理解管道的概念</p><p>不能强行用observable，要合理使用，不能强行炫技。要理解清楚为什么要用再用。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Observable</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span><br><br><span class="hljs-keyword">const</span> $input = &lt;<span class="hljs-title class_">HTMLInputElement</span>&gt;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.todo-val&#x27;</span>)<br><br><span class="hljs-keyword">const</span> input$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-property">fromEvent</span>&lt;<span class="hljs-title class_">KeyboardEvent</span>&gt;($input, <span class="hljs-string">&#x27;keydown&#x27;</span>)<br>  .<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> r.<span class="hljs-property">keyCode</span> === <span class="hljs-number">13</span>)<br>  .<span class="hljs-title function_">do</span>(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r))<br><br>input$$.<span class="hljs-title function_">subscribe</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>RxJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue监听，val、oldVal值相同问题</title>
    <link href="/2022/06/06/2022-06-06-vue%E7%9B%91%E5%90%AC%EF%BC%8Cval%E3%80%81oldVal%E5%80%BC%E7%9B%B8%E5%90%8C%E9%97%AE%E9%A2%98/"/>
    <url>/2022/06/06/2022-06-06-vue%E7%9B%91%E5%90%AC%EF%BC%8Cval%E3%80%81oldVal%E5%80%BC%E7%9B%B8%E5%90%8C%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>监听的是同源</p><p><a href="https://cn.vuejs.org/v2/api/#vm-watch">https://cn.vuejs.org/v2/api/#vm-watch</a></p><p>注意：在变异 (不是替换) 对象或数组时，旧值将与新值相同，因为它们的引用指向同一个对象&#x2F;数组。Vue 不会保留变异之前值的副本。</p><p>观察 Vue 实例变化的一个表达式或计算属性函数。回调函数得到的参数为新值和旧值。表达式只接受监督的键路径。对于更复杂的表达式，用一个函数取代</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br>data:&#123;<br>    haoroomsObj:&#123;<br>        haoroomstestinner:&#123;<br>            <span class="hljs-selector-tag">a</span>: <span class="hljs-string">&#x27;我是haorooms资源库&#x27;</span>,<br>            b: <span class="hljs-string">&#x27;我是haorooms博客&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;,<br>watch: &#123;<br>  haoroomsObj: &#123;<br>    handler: (val, olVal) =&gt; &#123;<br>      console<span class="hljs-selector-class">.log</span>(&#x27;我变化了&#x27;, val, olVal)<br>    &#125;,<br>    deep: true<br>  &#125;<br>&#125;,<br><span class="hljs-comment">//函数包装后监听</span><br>data:&#123;<br>    haoroomsObj:&#123;<br>        haoroomstestinner:&#123;<br>            <span class="hljs-selector-tag">a</span>: <span class="hljs-string">&#x27;我是haorooms资源库&#x27;</span>,<br>            b: <span class="hljs-string">&#x27;我是haorooms博客&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;,<br>computed: &#123;<br>  <span class="hljs-built_in">newHaorooms</span>() &#123;<br>    return this<span class="hljs-selector-class">.haoroomsObj</span><br>  &#125;<br>watch: &#123;<br>  newHaorooms: &#123;<br>    handler: (val, olVal) =&gt; &#123;<br>      console<span class="hljs-selector-class">.log</span>(&#x27;我变化了&#x27;, val, olVal)<br>    &#125;,<br>    deep: true<br>  &#125;<br>&#125;,<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最佳自适应代码</title>
    <link href="/2022/06/06/2022-06-06-%E6%9C%80%E4%BD%B3%E8%87%AA%E9%80%82%E5%BA%94%E4%BB%A3%E7%A0%81/"/>
    <url>/2022/06/06/2022-06-06-%E6%9C%80%E4%BD%B3%E8%87%AA%E9%80%82%E5%BA%94%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="最佳自适应代码"><a href="#最佳自适应代码" class="headerlink" title="最佳自适应代码"></a>最佳自适应代码</h1><p>经过大型项目实践，下面这段CSS是最好的基于rem和vm和calc实践代码：</p><p>一</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx">!<span class="hljs-keyword">function</span> (<span class="hljs-params">e, t</span>) &#123;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">d</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> w = t.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientWidth</span> / <span class="hljs-number">3.75</span>;<br>    <span class="hljs-keyword">if</span> (w &gt; <span class="hljs-number">150</span>) &#123;<br>        w = <span class="hljs-number">150</span><br>    &#125;<br>    t.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;html&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">style</span>[<span class="hljs-string">&#x27;font-size&#x27;</span>] = w + <span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;<br><br><span class="hljs-title function_">d</span>();<br>e.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;resize&quot;</span>, d);<br>&#125;(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">document</span>);<br></code></pre></td></tr></table></figure><p>二</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span> &#123;<br><br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br><br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">375px</span>) &#123;<br><br>    <span class="hljs-selector-tag">html</span> &#123;<br><br>        <span class="hljs-comment">/* iPhone6的375px尺寸作为16px基准，414px正好18px大小, 600 20px */</span><br><br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">100%</span> + <span class="hljs-number">2</span> * (<span class="hljs-number">100vw</span> - <span class="hljs-number">375px</span>) / <span class="hljs-number">39</span>);<br><br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">16px</span> + <span class="hljs-number">2</span> * (<span class="hljs-number">100vw</span> - <span class="hljs-number">375px</span>) / <span class="hljs-number">39</span>);<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">414px</span>) &#123;<br><br>    <span class="hljs-selector-tag">html</span> &#123;<br><br>        <span class="hljs-comment">/* 414px-1000px每100像素宽字体增加1px(18px-22px) */</span><br><br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">112.5%</span> + <span class="hljs-number">4</span> * (<span class="hljs-number">100vw</span> - <span class="hljs-number">414px</span>) / <span class="hljs-number">586</span>);<br><br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">18px</span> + <span class="hljs-number">4</span> * (<span class="hljs-number">100vw</span> - <span class="hljs-number">414px</span>) / <span class="hljs-number">586</span>);<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">600px</span>) &#123;<br><br>    <span class="hljs-selector-tag">html</span> &#123;<br><br>        <span class="hljs-comment">/* 600px-1000px每100像素宽字体增加1px(20px-24px) */</span><br><br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">125%</span> + <span class="hljs-number">4</span> * (<span class="hljs-number">100vw</span> - <span class="hljs-number">600px</span>) / <span class="hljs-number">400</span>);<br><br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">20px</span> + <span class="hljs-number">4</span> * (<span class="hljs-number">100vw</span> - <span class="hljs-number">600px</span>) / <span class="hljs-number">400</span>);<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">1000px</span>) &#123;<br><br>    <span class="hljs-selector-tag">html</span> &#123;<br><br>        <span class="hljs-comment">/* 1000px往后是每100像素0.5px增加 */</span><br><br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">137.5%</span> + <span class="hljs-number">6</span> * (<span class="hljs-number">100vw</span> - <span class="hljs-number">1000px</span>) / <span class="hljs-number">1000</span>);<br><br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">22px</span> + <span class="hljs-number">6</span> * (<span class="hljs-number">100vw</span> - <span class="hljs-number">1000px</span>) / <span class="hljs-number">1000</span>);<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>三、按vw、vh，scss计算来适配</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@use</span> <span class="hljs-string">&#x27;sass:math&#x27;</span>;<br><br><span class="hljs-keyword">@function</span> size(<span class="hljs-variable">$size</span>: <span class="hljs-number">100</span>) &#123;<br>  <span class="hljs-keyword">@return</span> math.div(<span class="hljs-variable">$size</span>, <span class="hljs-number">375</span>) * <span class="hljs-number">100vw</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>scss</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mongodb常用操作</title>
    <link href="/2022/06/05/2022-06-05-mongodb%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/06/05/2022-06-05-mongodb%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 备份数据库</span><br>mongodump --uri mongodb+srv://jaxson:密码@cluster0.jzont.mongodb.net/ --archive=<span class="hljs-string">&quot;mongodump-test-db&quot;</span> --db=myFirstDatabase<br><br>mongodump --host=159.75.255.88 --port=27017 --username=jaxson --archive=<span class="hljs-string">&quot;mongodump-test-db&quot;</span> --db=myFirstDatabase<br><span class="hljs-comment"># 恢复数据库</span><br>mongorestore --host=159.75.255.88 --port=27017 --username=jaxson --archive=<span class="hljs-string">&quot;mongodump-test-db&quot;</span> --nsFrom=<span class="hljs-string">&#x27;myFirstDatabase.*&#x27;</span> --nsTo=<span class="hljs-string">&#x27;myFirstDatabase.*&#x27;</span><br><span class="hljs-comment">#展示所有数据库</span><br>show dbs <br><span class="hljs-comment">#创建用户</span><br>db.createUser(&#123;user:<span class="hljs-string">&quot;jaxson&quot;</span>,<span class="hljs-built_in">pwd</span>:<span class="hljs-string">&quot;&quot;</span>,roles:[<span class="hljs-string">&quot;readWrite&quot;</span>]&#125;)<br><span class="hljs-comment">#查找所有用户</span><br>db.system.users.find().pretty()<br><span class="hljs-comment">#删除用户</span><br>db.dropUser(<span class="hljs-string">&#x27;test&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS安装Traivs步骤</title>
    <link href="/2022/05/30/2022-05-30-centos%E5%AE%89%E8%A3%85traivs/"/>
    <url>/2022/05/30/2022-05-30-centos%E5%AE%89%E8%A3%85traivs/</url>
    
    <content type="html"><![CDATA[<p><a href="https://cloud.tencent.com/developer/article/1626159">https://cloud.tencent.com/developer/article/1626159</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo dnf install ruby<br>ruby --version<br>gem sources -l<br>yum install ruby-devel <br>sudo dnf install redhat-rpm-config<br>gem install travis<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>Traivs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《深入浅出RxJS》笔记</title>
    <link href="/2020/06/27/2020-06-27-%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BARxJS%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/06/27/2020-06-27-%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BARxJS%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="深入浅出RxJS"><a href="#深入浅出RxJS" class="headerlink" title="深入浅出RxJS"></a>深入浅出RxJS</h1><p><a href="https://github.com/mocheng/dissecting-rxjs">mocheng&#x2F;dissecting-rxjs</a></p><h1 id="一、函数式编程"><a href="#一、函数式编程" class="headerlink" title="一、函数式编程"></a>一、函数式编程</h1><h3 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h3><p>和声明式相对应的编程方式叫做命令式编程（Imperative Programming），命令式编程也是最常见的一种编程方式。</p><h3 id="纯函数（pure-Function）"><a href="#纯函数（pure-Function）" class="headerlink" title="纯函数（pure Function）"></a>纯函数（pure Function）</h3><p>❑ 函数的执行过程完全由输入参数决定，不会受除参数之外的任何数据影响。</p><p>❑ 函数不会修改任何外部状态，比如修改全局变量或传入的参数对象。</p><h3 id="不纯函数（Impure-Function）"><a href="#不纯函数（Impure-Function）" class="headerlink" title="不纯函数（Impure Function）"></a>不纯函数（Impure Function）</h3><p>❑ 改变全局变量的值。</p><p>❑ 改变输入参数引用的对象，就像上面不是纯函数的arrayPush实现。</p><p>❑ 读取用户输入，比如调用了alert或者confirm函数。</p><p>❑ 抛出一个异常。</p><p>❑ 网络输入&#x2F;输出操作，比如通过AJAX调用一个服务器的API。</p><p>❑ 操作浏览器的DOM。</p><h3 id="数据不可变"><a href="#数据不可变" class="headerlink" title="数据不可变"></a>数据不可变</h3><h1 id="二、响应式编程"><a href="#二、响应式编程" class="headerlink" title="二、响应式编程"></a>二、响应式编程</h1><p>❑ 数据流抽象了很多现实问题。</p><p>❑ 擅长处理异步操作。</p><p>❑ 把复杂问题分解成简单问题的组合。</p><p>RxJS擅长处理异步操作，因为它对数据采用“推”的处理方式，当一个数据产生的时候，被推送给对应的处理函数，这个处理函数不用关心数据是同步产生的还是异步产生的，这样就把开发者从命令式异步处理的枷锁中解放了出来。</p><h1 id="三、Observable和Observer"><a href="#三、Observable和Observer" class="headerlink" title="三、Observable和Observer"></a>三、Observable和Observer</h1><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>❑ 如何产生事件，这是发布者的责任，在RxJS中是Observable对象的工作。</p><p>❑ 如何响应事件，这是观察者的责任，在RxJS中由subscribe的参数来决定。</p><p>❑ 什么样的发布者关联什么样的观察者，也就是何时调用subscribe。</p><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>通常所说的是“拉”式的迭代器实现，而RxJS实现的是“推”式的迭代器实现。</p><p>Observable &#x3D; Publisher+Iterator</p><p>Observable产生的事件，只有Observer通过subscribe订阅之后才会收到，在unsubscribe之后就不会再收到。</p><h1 id="四、Hot-Observable和Cold-Observable"><a href="#四、Hot-Observable和Cold-Observable" class="headerlink" title="四、Hot Observable和Cold Observable"></a>四、Hot Observable和Cold Observable</h1><p>❑ 选择A：错过就错过了，只需要接受从订阅那一刻开始Observable产生的数据就行。 <em><strong>Hot Observable</strong></em></p><p>❑ 选择B：不能错过，需要获取Observable之前产生的数据。 <strong>Cold Observabl</strong>e</p><h1 id="五、操作符-operator"><a href="#五、操作符-operator" class="headerlink" title="五、操作符-operator"></a>五、操作符-operator</h1><p>❑ filter和map都是Observable对象的成员函数。</p><p>❑ filter和map的返回结果依然是Observable对象。</p><p>❑ filter和map不会改变原本的Observable对象。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>❑ 创建类（creation）❑ 转化类（transformation）❑ 过滤类（filtering）❑ 合并类（combination）❑ 多播类（multicasting）❑ 错误处理类（error Handling）❑ 辅助工具类（utility）❑ 条件分支类（conditional &amp; boolean）❑ 数学和合计类（mathmatical &amp; aggregate）</p><p>无论是静态操作符还是实例操作符，它们都会返回一个Observable对象。在链式调用中，静态操作符（<strong>of</strong>）只能出现在首位，实例操作符则(<strong>map</strong>)可以出现在任何位置，因为链式调用中各级之间靠Observable对象来关联，一个静态函数在链式调用的中间位置是不可能有容身之处的。</p><p>一个操作符应该是静态的形式还是实例的形式，完全由其功能决定。例如：merge支持两种形式</p><h3 id="操作符函数的实现"><a href="#操作符函数的实现" class="headerlink" title="操作符函数的实现"></a>操作符函数的实现</h3><p>每个操作符都是一个函数，不管实现什么功能，都必须考虑下面这些功能要点：</p><p>❑ 返回一个全新的Observable对象。</p><p>❑ 对上游和下游的订阅及退订处理。</p><p>❑ 处理异常情况。</p><p>❑ 及时释放资源。</p><h3 id="lettable和pipeable"><a href="#lettable和pipeable" class="headerlink" title="lettable和pipeable"></a>lettable和pipeable</h3><p>❑ 静态类型操作符没有pipeable操作符的对应形式。</p><p>❑ 拥有多个上游Observable对象的操作符没有pipeable操作符的对应形式。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;<span class="hljs-keyword">of</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/observable/of&#x27;</span>;<br>    <span class="hljs-keyword">import</span> &#123;map&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/operators&#x27;</span>;<br><br>    <span class="hljs-keyword">const</span> source$ = <span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">const</span> result$ = source$.<span class="hljs-title function_">pipe</span>(<br>      <span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x ＊ x)<br>    );<br><br>    source$.<span class="hljs-title function_">subscribe</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>);<br></code></pre></td></tr></table></figure><p>任何Observable对象都支持pipe</p><p>pipe不只是具备let的功能，还有“管道”功能，可以把多个lettable操作符串接起来，形成数据管道。</p><p>lettable操作符和pipeable操作符是同一种东西在不同阶段的称呼而已。</p><p>❑ do改为tap❑ catch改为catchError❑ switch改为switchAll❑ finally改为finalize</p><h1 id="六、创建数据流"><a href="#六、创建数据流" class="headerlink" title="六、创建数据流"></a>六、创建数据流</h1><blockquote><p>在RxJS的世界中，一切都以数据流为中心，在代码中，数据流以Observable类的实例对象形式存在，创建Observable对象就是数据流处理的开始。</p></blockquote><p><img src="/img/Untitled.png" alt="Untitled.png"></p><p>❑ 产生哪些数据。</p><p>❑ 数据之间的先后顺序如何。</p><h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Observable</span>.<span class="hljs-property">create</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">subscribe</span>) &#123;<br><span class="hljs-comment">// Observable构造函数，避免直接使用这种方式</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observable</span>(subscribe);<br>    &#125;;<br></code></pre></td></tr></table></figure><h3 id="fromEventPattern"><a href="#fromEventPattern" class="headerlink" title="fromEventPattern"></a>fromEventPattern</h3><p>感觉你叫适用websocket场景</p><p>fromEventPattern提供的就是一种模式，不管数据源是怎样的行为，最后的产出都是一个Observable对象，对一个Observable对象交互的两个重要操作就是subscribe和unsubscribe，所以，fromEventPattern设计为这样，当Observable对象被subscribe时第一个函数参数被调用，被unsubscribe时第二个函数参数被调用。在上面的例子中，两个函数参数分别为addHandler和removeHandler。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Observable</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/Observable&#x27;</span>;<br>    <span class="hljs-keyword">import</span> <span class="hljs-title class_">EventEmitter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;events&#x27;</span>;<br>    <span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/observable/fromEventPattern&#x27;</span>;<br><br>    <span class="hljs-keyword">const</span> emitter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventEmitter</span>();<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">addHandler</span> = (<span class="hljs-params">handler</span>) =&gt; &#123;<br>      emitter.<span class="hljs-title function_">addListener</span>(<span class="hljs-string">&#x27;msg&#x27;</span>, handler);<br>    &#125;;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">removeHandler</span> = (<span class="hljs-params">handler</span>) =&gt; &#123;<br>      emitter.<span class="hljs-title function_">removeListener</span>(<span class="hljs-string">&#x27;msg&#x27;</span>, handler);<br>    &#125;<br>    <span class="hljs-keyword">const</span> source$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">fromEventPattern</span>(addHandler, removeHandler);<br><br>    <span class="hljs-keyword">const</span> subscription = source$.<span class="hljs-title function_">subscribe</span>(<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>,<br>      <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;catch&#x27;</span>, error),<br>      <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;complete&#x27;</span>)<br>    );<br><br>    emitter.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;msg&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>);<br>    emitter.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;msg&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>);<br><br>    subscription.<span class="hljs-title function_">unsubscribe</span>();<br>    emitter.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;msg&#x27;</span>, <span class="hljs-string">&#x27;end&#x27;</span>);<br><span class="hljs-comment">//输出</span><br><span class="hljs-comment">//hello</span><br>    <span class="hljs-comment">//world</span><br></code></pre></td></tr></table></figure><h1 id="七、合并数据流"><a href="#七、合并数据流" class="headerlink" title="七、合并数据流"></a>七、合并数据流</h1><p><img src="/img/Untitled%201.png" alt="Untitled%201.png"></p><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><ul><li>concat适用于同步事件</li></ul><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><ul><li>应该避免用merge去合并同步数据流，merge应该用于合并产生异步数据的Observable对象，一个常用场景就是合并DOM事件。</li><li>merge第二个参数concurrent，同步限流</li><li>我们用fromEvent分别获得给定DOM元素的click和touchend事件数据流，然后用merge合并，这之后，无论是click事件发生还是touchend事件发生，都会流到merge产生的Observable对象中，这样就可以统一用一个事件处理函数eventHandler来处理。</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> click$ = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">fromEvent</span>(element, <span class="hljs-string">&#x27;click&#x27;</span>);<br>    <span class="hljs-keyword">const</span> touchend$ = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">fromEvent</span>(element, <span class="hljs-string">&#x27;touchend&#x27;</span>);<br>    <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">merge</span>(click$, touchend$).<span class="hljs-title function_">subscribe</span>(eventHandler);<br></code></pre></td></tr></table></figure><h3 id="zip拉链式组合（一一对应）"><a href="#zip拉链式组合（一一对应）" class="headerlink" title="zip拉链式组合（一一对应）"></a>zip拉链式组合（一一对应）</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 输出</span><br>[ <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span> ]<br>    [ <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span> ]<br>    [ <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;c&#x27;</span> ]<br>    complete<br></code></pre></td></tr></table></figure><ul><li>数据积压问题</li></ul><h3 id="combineLatest：合并最后一个数据"><a href="#combineLatest：合并最后一个数据" class="headerlink" title="combineLatest：合并最后一个数据"></a>combineLatest：合并最后一个数据</h3><p><img src="/img/Untitled%202.png" alt="Untitled%202.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> source1$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>);<br>    <span class="hljs-keyword">const</span> source2$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">const</span> source3$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">of</span>(<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>);<br>    <span class="hljs-keyword">const</span> result$ = source1$.<span class="hljs-title function_">combineLatest</span>(source2$, source3$);<br><br>[ <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;x&#x27;</span> ]<br>    [ <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;y&#x27;</span> ]<br>    complete<br></code></pre></td></tr></table></figure><p>没错！实际上只有最后一个参数source3$的所有数据进入了combineLatest的下游，排在前面的source1$和source2$都只有最后一个数据有幸进入下游，最终下游Observable对象的数据个数也是由source3$决定。归根结底，是因为source1$和source2$被订阅得早，它们吐出最后一个数据之前combineLatest都凑不齐所有参与Observable对象的“最新数据”。</p><ul><li><p>定制下游数据</p><p>  combineLatest的最后一个参数可以是一个函数，这里我们称之为project, project的作用是让combineLatest把所有上游的“最新数据”扔给下游之前做一下组合处理，这样就可以不用传递一个数组下去，可以传递任何由“最新数据”产生的对象。project可以包含多个参数，每一个参数对应的是上游Observable的最新数据，project返回的结果就是combineLatest塞给下游的结果。</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> source1$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">timer</span>(<span class="hljs-number">500</span>, <span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">const</span> source2$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">timer</span>(<span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">project</span> = (<span class="hljs-params">a, b</span>) =&gt; <span class="hljs-string">`<span class="hljs-subst">$&#123;a&#125;</span> and <span class="hljs-subst">$&#123;b&#125;</span>`</span>;<br>    <span class="hljs-keyword">const</span> result$ = source1$.<span class="hljs-title function_">combineLatest</span>(source2$, project);<br><br><span class="hljs-comment">//0 and 0</span><br>    <span class="hljs-comment">//1 and 0</span><br>    <span class="hljs-comment">//1 and 1</span><br>    <span class="hljs-comment">//2 and 1</span><br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">const</span> source1$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">timer</span>(<span class="hljs-number">500</span>, <span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">const</span> source2$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">timer</span>(<span class="hljs-number">1000</span>, <span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">project</span> = (<span class="hljs-params">a, b</span>) =&gt; <span class="hljs-string">`<span class="hljs-subst">$&#123;a&#125;</span> and <span class="hljs-subst">$&#123;b&#125;</span>`</span>;<br>    <span class="hljs-keyword">const</span> result$ = source1$.<span class="hljs-title function_">combineLatest</span>(source2$)<br>      .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">arr</span> =&gt;</span> <span class="hljs-title function_">project</span>(...arr));<br></code></pre></td></tr></table></figure></li></ul><p>zip和combineLatest一样默认输出的数据是数组形式，因此，zip也和combineLatest一样，可以利用最后一个函数参数来订制输出数据的形式。</p><ul><li><p>多重依赖问题，一个小缺陷</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; timer, <span class="hljs-title class_">Observable</span>, combineLatest &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; map &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/operators&#x27;</span>;<br>  <br><span class="hljs-keyword">const</span> original$ = <span class="hljs-title function_">timer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1000</span>);<br><span class="hljs-keyword">const</span> source1$ = original$.<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x+<span class="hljs-string">&#x27;a&#x27;</span>));<br><span class="hljs-keyword">const</span> source2$ = original$.<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x+<span class="hljs-string">&#x27;b&#x27;</span>));<br><span class="hljs-keyword">const</span> result$ = <span class="hljs-title function_">combineLatest</span>(source1$, source2$);<br><br>result$.<span class="hljs-title function_">subscribe</span>(<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;complete&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p>  <img src="/img/Untitled%203.png" alt="Untitled%203.png"></p><p>  <img src="/img/Untitled%204.png" alt="Untitled%204.png"></p><p>  <img src="/img/Untitled%205.png" alt="Untitled%205.png"></p><p>  combineLatest的glitch现象</p></li></ul><h3 id="withLatestFrom"><a href="#withLatestFrom" class="headerlink" title="withLatestFrom"></a>withLatestFrom</h3><p>withLatestFrom的功能类似于combineLatest，但是给下游推送数据只能由一个上游Observable对象驱动。</p><p>withLatestFrom只有实例操作符的形式，而且所有输入Observable的地位并不相同，调用withLatestFrom的那个Observable对象起到主导数据产生节奏的作用，作为参数的Observable对象只能贡献数据，不能控制产生数据的时机。</p><ul><li><p>实例代码</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Observable</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/Observable&#x27;</span>;<br>    <span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/observable/timer&#x27;</span>;<br>    <span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/operator/withLatestFrom&#x27;</span>;<br>    <span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/operator/map&#x27;</span>;<br><br>    <span class="hljs-keyword">const</span> source1$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">timer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">2000</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> <span class="hljs-number">100</span> ＊ x);<br>    <span class="hljs-keyword">const</span> source2$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">timer</span>(<span class="hljs-number">500</span>, <span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">const</span> result$ = source1$.<span class="hljs-title function_">withLatestFrom</span>(source2$, <span class="hljs-function">(<span class="hljs-params">a, b</span>)=&gt;</span> a+b);<br><br>    result$.<span class="hljs-title function_">subscribe</span>(<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>,<br>      <span class="hljs-literal">null</span>,<br>      <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;complete&#x27;</span>)<br>    );<br></code></pre></td></tr></table></figure><p>  产生下游数据流result$中数据的步骤如下：</p><p>  1）在第0毫秒时刻，source1$吐出数据100, source2$没有吐出数据，所以没有给下游产生数据。2）在第500毫秒时刻，source2$吐出数据0，但是source2$并不直接触发给下游传递数据，所以依然没有给下游产生产生数据。</p><p>  3）在第1500毫秒时刻，source2$吐出数据1，同样不会给下游产生数据。</p><p>  4）在第2000毫秒时刻，source1$吐出数据100，这个数据会加上source2$吐出的最后一个数据1，产生传给下游的数据101。</p><p>  5）在第2500毫秒时刻，source2$吐出数据2，不会给下游产生数据。</p><p>  6）在第3500毫秒时刻，source2$吐出数据3，不会给下游产生数据。</p><p>  7）在第4000毫秒时刻，source1$吐出数据200，这个数据加上source2$吐出的最后一个数据3，产生传给下游的的数据203。</p><p>  <img src="/img/Untitled%206.png" alt="Untitled%206.png"></p></li><li><p>解决glitch</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Observable</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/Observable&#x27;</span>;<br>    <span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/observable/timer&#x27;</span>;<br>    <span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/operator/withLatestFrom&#x27;</span>;<br>    <span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/operator/map&#x27;</span>;<br><br>    <span class="hljs-keyword">const</span> original$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">timer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">const</span> source1$ = original$.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x+<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-keyword">const</span> source2$ = original$.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x+<span class="hljs-string">&#x27;b&#x27;</span>);<br>    <span class="hljs-keyword">const</span> result$ = source1$.<span class="hljs-title function_">withLatestFrom</span>(source2$);<br><br>    result$.<span class="hljs-title function_">subscribe</span>(<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>,<br>      <span class="hljs-literal">null</span>,<br>      <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;complete&#x27;</span>)<br>    );<br><span class="hljs-comment">//[ &#x27;0a&#x27;, &#x27;0b&#x27; ]</span><br>    <span class="hljs-comment">//[ &#x27;1a&#x27;, &#x27;1b&#x27; ]</span><br>    <span class="hljs-comment">//[ &#x27;2a&#x27;, &#x27;2b&#x27; ]</span><br>    <span class="hljs-comment">//[ &#x27;3a&#x27;, &#x27;3b&#x27; ]</span><br></code></pre></td></tr></table></figure></li></ul><p>一般来说，当要合并多个Observable的“最新数据”，要从combineLatest和withLatest-From中选一个操作符来操作，根据下面的原则来选择：</p><p>❑ 如果要合并完全独立的Observable对象，使用combineLatest。</p><p>❑ 如何要把一个Observable对象“映射”成新的数据流，同时要从其他Observable对象获取“最新数据”，就是用withLatestFrom。</p><p>combineLatest会为输入Observable对象的每个next动作产生一个数据，很多情况下这是最理想的一种方式，但是，如果输入Observable对象之间有依赖关系，就会发生多个输入Observable对象同时产生数据的情况，这就是glitch现象。glitch现象虽然存在，但是并不一定会造成bug，比如，在网页应用中，用combineLatest来合并用户操作事件产生的数据流，就可能发生glitch现象，但是从用户感知角度，可能完全注意不到。</p><h3 id="race胜者通吃"><a href="#race胜者通吃" class="headerlink" title="race胜者通吃"></a>race胜者通吃</h3><p><img src="/img/Untitled%207.png" alt="Untitled%207.png"></p><h3 id="startWith"><a href="#startWith" class="headerlink" title="startWith"></a>startWith</h3><p>startWith只有实例操作符的形式，其功能是让一个Observable对象在被订阅的时候，总是先吐出指定的若干个数据</p><p>startWith满足了需要连续链式调用的要求，像下面这样：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">original$.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x ＊ <span class="hljs-number">2</span>).<span class="hljs-title function_">startWith</span>(<span class="hljs-string">&#x27;start&#x27;</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x + <span class="hljs-string">&#x27;ok&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="forkJoin"><a href="#forkJoin" class="headerlink" title="forkJoin"></a>forkJoin</h3><p>forkJoin只有静态操作符的形式，可以接受多个Observable对象作为参数，forkJoin产生的Observable对象也很有特点，它只会产生一个数据，因为它会等待所有参数Observable对象的最后一个数据，也就是说，只有当所有Observable对象都完结，确定不会有新的数据产生的时候，forkJoin就会把所有输入Observable对象产生的最后一个数据合并成给下游唯一的数据。</p><p>所以说，forkJoin就是RxJS界的Promise.all, Promise.all等待所有输入的Promise对象成功之后把结果合并，forkJoin等待所有输入的Observable对象完结之后把最后一个数据合并。</p><h1 id="八、高阶Observable"><a href="#八、高阶Observable" class="headerlink" title="八、高阶Observable"></a>八、高阶Observable</h1><p>用Observable来管理多个Observable对象</p><p>数据流虽然管理的是数据，数据流自身也可以认为是一种数据，既然数据可以用Observable来管理，那么数据流本身也可以用Observable来管理，让需要被管理的Observable对象成为其他Observable对象的数据，用现成的管理Observable对象的方法来管理Observable对象，这就是高阶Observable的意义。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> ho$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1000</span>)<br>     .<span class="hljs-title function_">take</span>(<span class="hljs-number">2</span>)<br>     .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1500</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">y</span> =&gt;</span> x+<span class="hljs-string">&#x27;:&#x27;</span>+y).<span class="hljs-title function_">take</span>(<span class="hljs-number">2</span>));<br></code></pre></td></tr></table></figure><ul><li><p>❑ concatAll</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> ho$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1000</span>)<br>  .<span class="hljs-title function_">take</span>(<span class="hljs-number">2</span>)<br>  .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1500</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">y</span> =&gt;</span> x+<span class="hljs-string">&#x27;:&#x27;</span>+y).<span class="hljs-title function_">take</span>(<span class="hljs-number">2</span>));<br><span class="hljs-keyword">const</span> concated$ = ho$.<span class="hljs-title function_">concatAll</span>();<br></code></pre></td></tr></table></figure><p>  <img src="/img/Untitled%208.png" alt="Untitled%208.png"></p></li><li><p>❑ mergeAll</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> ho$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1000</span>)<br>  .<span class="hljs-title function_">take</span>(<span class="hljs-number">2</span>)<br>  .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1500</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">y</span> =&gt;</span> x+<span class="hljs-string">&#x27;:&#x27;</span>+y).<span class="hljs-title function_">take</span>(<span class="hljs-number">2</span>));<br><span class="hljs-keyword">const</span> concated$ = ho$.<span class="hljs-title function_">mergeAll</span>();<br></code></pre></td></tr></table></figure><p>  <img src="/img/Untitled%209.png" alt="Untitled%209.png"></p></li><li><p>❑ zipAll</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> ho$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1000</span>)<br>  .<span class="hljs-title function_">take</span>(<span class="hljs-number">2</span>)<br>  .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1500</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">y</span> =&gt;</span> x+<span class="hljs-string">&#x27;:&#x27;</span>+y).<span class="hljs-title function_">take</span>(<span class="hljs-number">2</span>));<br><span class="hljs-keyword">const</span> concated$ = ho$.<span class="hljs-title function_">zipAll</span>();<br><span class="hljs-comment">//[ &#x27;0:0&#x27;, &#x27;1:0&#x27; ]</span><br><span class="hljs-comment">//[ &#x27;0:1&#x27;, &#x27;1:1&#x27; ]</span><br><span class="hljs-comment">//complete</span><br></code></pre></td></tr></table></figure></li><li><p>❑ combineAll（这个是个例外，因为combineLatestAll显得有点啰嗦）</p><p>  combineAll就是处理高阶Observable的combineLatest</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> ho$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1000</span>)<br>  .<span class="hljs-title function_">take</span>(<span class="hljs-number">2</span>)<br>  .<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1500</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">y</span> =&gt;</span> x+<span class="hljs-string">&#x27;:&#x27;</span>+y).<span class="hljs-title function_">take</span>(<span class="hljs-number">2</span>));<br><br><span class="hljs-keyword">const</span> concated$ = ho$.<span class="hljs-title function_">combineAll</span>();<br><span class="hljs-comment">//[ &#x27;0:0&#x27;, &#x27;1:0&#x27; ]</span><br><span class="hljs-comment">//[ &#x27;0:1&#x27;, &#x27;1:0&#x27; ]</span><br><span class="hljs-comment">//[ &#x27;0:1&#x27;, &#x27;1:1&#x27; ]</span><br><span class="hljs-comment">//complete</span><br></code></pre></td></tr></table></figure></li><li><p>❑ switch：切换输入Observable</p><p>  <img src="/img/Untitled%2010.png" alt="Untitled%2010.png"></p></li><li><p>❑ exhaust(exhaust的含义就是“耗尽”，这个操作符的意思是，在耗尽当前内部Observable的数据之前不会切换到下一个内部Observable对象。)</p><p>  <img src="/img/Untitled%2011.png" alt="Untitled%2011.png"></p></li></ul><p>本章介绍了RxJS中合并多个Observable对象的方法。不同合并方法的区别在于用何种策略把上游多个Observable对象中数据转手给下游，例如，concat的策略是让上游Observable对象的数据依次首尾相连，merge是任何数据先来先进入下游，zip则要保证所有上游Observable对象公平，数据要一一对应。本章涉及了combineLatest的glitch问题，但是这个问题可以通过使用withLatest-From克服。产生的数据依然是Observable对象的Observable，称为高阶Observable, RxJS提供了合并高阶Observable对象中数据的操作符，实际上只是把多个Observable对象参数改成了一个高阶Observable对象</p><h1 id="九、辅助类操作符"><a href="#九、辅助类操作符" class="headerlink" title="九、辅助类操作符"></a>九、辅助类操作符</h1><p><img src="/img/Untitled%2012.png" alt="Untitled%2012.png"></p><h3 id="数学类操作符"><a href="#数学类操作符" class="headerlink" title="数学类操作符"></a>数学类操作符</h3><p>这些操作符必定会遍历上游Observable对象中吐出的所有数据才给下游传递数据，也就是说，它们只有在上游完结的时候，才给下游传递唯一数据。</p><p>❑ count</p><p>❑ max</p><p>❑ min</p><p>❑ reduce</p><h3 id="条件布尔类操作符"><a href="#条件布尔类操作符" class="headerlink" title="条件布尔类操作符"></a>条件布尔类操作符</h3><p>❑ every</p><p>❑ find</p><p>❑ findIndex</p><p>❑ defaultIfEmpty</p><h1 id="十、过滤数据流"><a href="#十、过滤数据流" class="headerlink" title="十、过滤数据流"></a>十、过滤数据流</h1><p><img src="/img/Untitled%2013.png" alt="Untitled%2013.png"></p><h2 id="回压控制"><a href="#回压控制" class="headerlink" title="回压控制"></a>回压控制</h2><p><img src="/img/Untitled%2014.png" alt="Untitled%2014.png"></p><p>回压这种现象的根源是数据管道中某个环节数据涌入的速度超过了处理速度，那么，既然处理不过来，干脆就舍弃掉一些涌入的数据，这种方式称为“有损回压控制”（Lossy BackpressureControl），通过损失掉一些数据让流入和处理的速度平衡，剩下来的问题就是决定舍弃掉哪些数据？</p><p>回压控制操作符包含以下这些：</p><ul><li><p>❑ throttle</p><p>  当source$产生第一个数据0的时候，throttle就和throttleTime一样，毫不犹豫地把这个数据0传给了下游，在此之前会用这个数据0作为参数调用durationSelector，然后订阅durationSelector返回的Observable对象，在这个Observable对象产生第一个对象之前，所有上游传过来的数据都会被丢弃，于是，source$产生的数据1就被丢弃了，因为durationSelector返回的Observable对象被订阅之后2000毫秒才会产生数据。</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">durationSelector</span> = value =&gt; &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">timer</span>(value % <span class="hljs-number">3</span> === <span class="hljs-number">0</span> ? <span class="hljs-number">2000</span> : <span class="hljs-number">1000</span>);<br>    &#125;;<br></code></pre></td></tr></table></figure><p>  <img src="/img/Untitled%2015.png" alt="Untitled%2015.png"></p></li></ul><p>❑ debounce</p><p>❑ audit</p><ul><li><p>❑ sample</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span>  notifer$  =  <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">fromEvent</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#sample&#x27;</span>),<br>      <span class="hljs-string">&#x27;click&#x27;</span>);<br>    <span class="hljs-keyword">const</span> tick$ = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">timer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x＊<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">const</span> sample$ = tick$.<span class="hljs-title function_">sample</span>(notifer$);<br>    sample$.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#text&#x27;</span>).<span class="hljs-property">innerText</span> = value<br>    &#125;);<br></code></pre></td></tr></table></figure><p>  tick$产生的数据经过sample过滤，并不会全部都被下游接收到，只有当参数notifer$产生一个数据的时候，sample就会从上次产生数据到现在的时间段里提取最后一个数据传给下游，这个数据肯定就是订阅以来逝去的毫秒数。</p></li></ul><p>还有对应上面四个操作符的带Time后缀的简化版操作符：</p><ul><li><p>❑ throttleTime</p><p>  使用throttleTime和debounceTime的一个常见场景就是用来减少不必要的DOM事件处理。例如，在购物类网站中，用户当然可以通过多次点击“添加到购物车”来购买多个同一商品，但是为了防止用户点击过快，可以限定一秒钟之内最多添加一次商品，这时候就用得上throttleTime，</p><p>  <img src="/img/Untitled%2016.png" alt="Untitled%2016.png"></p></li></ul><p>❑ debounceTime</p><p>❑ auditTime</p><ul><li><p>❑ sampleTime</p><p>  sample的含义就是“采样”，从字面上就看得出来，sample是要根据规则在一个范围内取一个数据，抛弃其他数据。</p><p>  <img src="/img/Untitled%2017.png" alt="Untitled%2017.png"></p></li></ul><p>7.2.1 throttle和debounce在实际应用中，经常需要限制某种事情发生的次数，下面是一些具体例子：❑ 鼠标移动事件的处理函数。❑ 屏幕滚动事件的处理函数。❑ 渲染网页的函数。❑ 数据管道中处理数据的函数。</p><ul><li><p>throttleTime与auditTime:</p><p>  audit翻译过来的意思是“审计”或者“查账”，从字面上看不出它的具体含义。但实际上，可以认为audit是做throttle类似的工作，不同的是在“节流时间”范围内，throttle把第一个数据传给下游，audit是把最后一个数据传给下游。</p><p>  <img src="/img/Untitled%2018.png" alt="Untitled%2018.png"></p></li></ul><h2 id="根据数据序列做回压控制"><a href="#根据数据序列做回压控制" class="headerlink" title="根据数据序列做回压控制"></a>根据数据序列做回压控制</h2><p>上游的数据序列是0、0、1、1、1、1、2、2、2、2，某些场景下，我们只需要处理0、1、2分别一次就行，当某个数据连续出现的时候，我们没必要处理，而且这种数据序列的出现和时间又没有关系，所以前面介绍的回压控制操作符都帮不上忙，这时候就需要用上名字里包含distinct的操作符了。</p><ul><li><p>❑ distinct(数据去重)</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Observable</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/Observable&#x27;</span>;<br>    <span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/observable/of&#x27;</span>;<br>    <span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/operator/distinct&#x27;</span>;<br><br>    <span class="hljs-keyword">const</span> source$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">const</span> distinct$ = source$.<span class="hljs-title function_">distinct</span>();<br><br>    distinct$.<span class="hljs-title function_">subscribe</span>(<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>,<br>      <span class="hljs-literal">null</span>,<br>      <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;complete&#x27;</span>)<br>    );<br></code></pre></td></tr></table></figure><p>  distinct还有一个潜在的问题需要注意，如果上游产生的不同数据很多，那么可能会造成内存泄露。可以想象一下distinct的实现方式，它肯定先订阅上游的Observable对象，然后自己维护一个“唯一数据集合”记录上游推送下来的所有唯一的数据，每当上游产生一个数据，distinct就查看一下这个数据是否在“唯一数据集合”中，如果存在，那就直接舍弃掉；如果不存在，就把这个数据添加到“唯一数据集合”中，然后把这个数据传给下游。这样一种实现方式下，如果上游不同的数据有多少，那么distinct需要维护的“唯一数据集合”也就有多大，如果上游Observable对象不同的数据很多而且总不完结，那么distinct就要持续维持庞大的数据集合，这就会造成不必要的数据压力。为了克服这个缺点，distinct还提供第二个可选的参数flush，第二个参数可以是一个Observable对象，每当这个Observable对象产生数据时，distinct就清空“唯一数据集合”，一切重来，这样就避免了内存泄露。</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> source$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">100</span>).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x % <span class="hljs-number">1000</span>);<br><span class="hljs-keyword">const</span> distinct$ = source$.<span class="hljs-title function_">distinct</span>(<span class="hljs-literal">null</span>, <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">500</span>));<br></code></pre></td></tr></table></figure><p>  source$中会产生1000个唯一的数据，distinct的第二个参数每500毫秒就会产生一个数据，这个数据是什么值不重要，重要的是它会清空distinct以前积压的所有唯一数据。使用了distinct的第二个参数，distinct表现出来的行为就会和以前不一样，传递给下游的数据并不是在整个上游所有数据中唯一的，而只是在一段时间范围内是唯一的，是否使用这个参数要根据实际应用需求来判断。</p></li><li><p>❑ distinctUntilChanged</p><p>  也是淘汰掉重复的数据，但distinct-UntilChanged拿到一个数据不是和一个“唯一数据集合”比较，而是直接和上一个数据比较，也就是说，这个操作符要保存上游产生的上一个数据就足够，当然，也就没有了distinct潜在的内</p></li><li><p>❑ distinctUntilKeyChanged</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> source$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">of</span>(<br>  &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;RxJS&#x27;</span>, <span class="hljs-attr">version</span>: <span class="hljs-string">&#x27;v4&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;React&#x27;</span>, <span class="hljs-attr">version</span>: <span class="hljs-string">&#x27;v15&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;React&#x27;</span>, <span class="hljs-attr">version</span>: <span class="hljs-string">&#x27;v16&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;RxJS&#x27;</span>, <span class="hljs-attr">version</span>: <span class="hljs-string">&#x27;v5&#x27;</span>&#125;<br>);<br><span class="hljs-keyword">const</span> distinct$ = source$.<span class="hljs-title function_">distinctUntilKeyChanged</span>(<span class="hljs-string">&#x27;name&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ul><h2 id="其他过滤方式"><a href="#其他过滤方式" class="headerlink" title="其他过滤方式"></a>其他过滤方式</h2><p>❑ ignoreElement</p><p>ignoreElments就是要忽略所有的元素，这里的元素是指上游产生的数据，忽略所有上游数据，只关心complete和error事件。下面是使用ignoreElements的示例代码：</p><p>❑ elementAt</p><p>elementAt把上游数据当数组，只获取指定下标的那一个数据，就这个简单功能，使用first配合函数参数也一样能够实现。不过elementAt还有一个附加功能体现了自己的存在价值，它的第二个参数可以指定没有对应下标数据时的默认值。</p><p>❑ single</p><p>elementAt把上游数据当数组，只获取指定下标的那一个数据，就这个简单功能，使用first配合函数参数也一样能够实现。不过elementAt还有一个附加功能体现了自己的存在价值，它的第二个参数可以指定没有对应下标数据时的默认值。</p><p>本章介绍RxJS中过滤数据的方法，在数据管道中，对数据很重要的一部分操作就是把不相关的数据清理掉，这就是过滤类操作符的工作。在数据管道中，当数据产生的速度过快，超过下游处理能力时，就会产生回压现象。数据过滤是进行回压控制的最简单方法，通过抛弃一些数据来缓解压力。但是具体抛弃哪些数据，需要根据不同应用场景来决定使用什么样的过滤类操作符。</p><h1 id="十一、转化数据流"><a href="#十一、转化数据流" class="headerlink" title="十一、转化数据流"></a>十一、转化数据流</h1><p>transformation 操作符</p><p><img src="/img/Untitled%2019.png" alt="Untitled%2019.png"></p><p>对数据的转化可以分为两种：</p><p>❑ 对每个数据做转化。上游的数据和下游的数据依然是一对一的关系，只不过传给下游的数据已经是另一个数据，比如上游传下来的是数据A，传给下游的是数据f（A），其中f是一个函数，以A为输入返回一个新的数据，下节介绍的“映射数据”就是这一种方法。</p><p>❑ 不转化单个数据，而是把数据重新组合。比如上游传下来的是A、B、C三个数据，传给下游的是一个数组数据[A, B, C]，并没有改变上游数据本身，只是把它们都塞到了一个数组对象中传给下游。本章后面介绍的无损回压控制操作符就是这种转化方式。</p><h3 id="映射数据-有损，舍弃掉一些数据"><a href="#映射数据-有损，舍弃掉一些数据" class="headerlink" title="映射数据(有损，舍弃掉一些数据)"></a>映射数据(有损，舍弃掉一些数据)</h3><ul><li><p>map</p><p>  mapFunc这个函数是map的第一个参数，充当project的功能，同时，map还有第二个参数context对象，如果用上这个参数，那么mapFunc在每次执行的时候，this就是map的这个参数context，所以，在mapFunc中this.separator的值就是冒号（:）。</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Observable</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/Observable&#x27;</span>;<br>    <span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/observable/of&#x27;</span>;<br>    <span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/operator/map&#x27;</span>;<br><br>    <span class="hljs-keyword">const</span> source$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">const</span> mapFunc = <span class="hljs-keyword">function</span>(<span class="hljs-params">value, index</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;value&#125;</span> <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.separator&#125;</span> <span class="hljs-subst">$&#123;index&#125;</span>`</span>;<br>    &#125;;<br>    <span class="hljs-keyword">const</span> context = &#123;<span class="hljs-attr">separator</span>: <span class="hljs-string">&#x27;:&#x27;</span>&#125;;<br>    <span class="hljs-keyword">const</span> result$ = source$.<span class="hljs-title function_">map</span>(mapFunc, context);<br>    result$.<span class="hljs-title function_">subscribe</span>(<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>,<br>      <span class="hljs-literal">null</span>,<br>      <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;complete&#x27;</span>)<br>    );<br></code></pre></td></tr></table></figure><p>  这是map的一个小的功能细节，但是，并不建议使用，因为按照函数式编程的原则，应该尽量让函数成为纯函数，如果一个函数的执行依赖于this，那么就难以预料这个函数的执行结果，并不是什么好事。所以，虽然我们知道map有这个功能，但要尽量避免使用它。</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> source$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">const</span> context = &#123;<span class="hljs-attr">separator</span>: <span class="hljs-string">&#x27;:&#x27;</span>&#125;;<br>    <span class="hljs-keyword">const</span> mapFunc = (<span class="hljs-keyword">function</span> (<span class="hljs-params">separator</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">value, index</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;value&#125;</span> <span class="hljs-subst">$&#123;separator&#125;</span> <span class="hljs-subst">$&#123;index&#125;</span>`</span>;<br>      &#125;;<br>    &#125;)(context.<span class="hljs-property">separator</span>)<br>    <span class="hljs-keyword">const</span> result$ = source$.<span class="hljs-title function_">map</span>(mapFunc);<br></code></pre></td></tr></table></figure></li><li><p>mapTo</p></li><li><p>pluck</p></li></ul><h3 id="缓存窗口：无损回压控制"><a href="#缓存窗口：无损回压控制" class="headerlink" title="缓存窗口：无损回压控制"></a>缓存窗口：无损回压控制</h3><p>将上游数据放在数组中传给下游的操作符都包含buffer这个词:</p><p>❑ bufferTime</p><p>❑ bufferCount</p><p>❑ bufferWhen</p><p>❑ bufferToggle</p><p>❑ buffer</p><p>此外，将上游数据放在Observable中传给下游的操作符都包含window这个词，包括：</p><p>❑ windowTime</p><p>❑ windowCount</p><p>❑ windowWhen</p><p>❑ windowToggle</p><p>❑ window</p><p><strong>windowTime和bufferTime</strong></p><p><img src="/img/Untitled%2020.png" alt="Untitled%2020.png"></p><p><strong>windowCount和bufferCount</strong></p><p><img src="/img/Untitled%2021.png" alt="Untitled%2021.png"></p><p><strong>windowWhen和bufferWhen</strong></p><p>closingSelector之所以没有参数，是因为调用closingSelector的时机和上游数据的产生没有任何关系，windowWhen并不是在上游产生数据的时候调用closingSelector，而是在被订阅的那个时刻或者缓冲区间结束时就调用closingSelector。因为closingSelector没有参数，所以，这种灵活性其实并不容易真正实现。如果让closingSelector是纯函数，因为没有参数，就只能通过访问外部变量来获得变化因素，这显然违背函数式编程的原则；或者，保持closingSelector为纯函数，但是返回一个数据源在外部的Observable对象，下面是一个例子：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">closingSelector</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">fromEvent</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#click&quot;</span>, <span class="hljs-string">&quot;click&quot;</span>));<br>&#125;;<br></code></pre></td></tr></table></figure><p>其中的closingSelector依然是一个纯函数，但是返回的Observable对象中的数据却是可以变化，以此实现了灵活的控制，但是这种灵活本身并不好应用，所以，windowWhen和bufferWhen属于挺鸡肋的两个操作符，</p><p><strong>windowToggle和bufferToggle</strong></p><p>windowToggle和bufferToggle需要两个参数，第一个参数opening$是一个Observable对象，每当opening$产生一个数据，代表一个缓冲窗口的开始，同时，第二个参数closingSelector也会被调用，用来获得缓冲窗口结束的通知。windowToggle和bufferToggle的closingSelector函数参数是有参数的，参数就是openings$产生的数据，如此一来，由opening$控制每个缓冲窗口的开始时间，由closingSelector来控制每个缓冲窗口的结束时间，就可以完全控制产生高阶Observable对象的节奏。</p><p>如果closingSelector产生的Observable对象产生数据的延时超过了opening$产生数据的延迟，windowToggle产生的内部Observable之间有可能产生数据重叠。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> source$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">timer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<br><span class="hljs-keyword">const</span> openings$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">timer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">400</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">closingSelector</span> = value =&gt; &#123;<br>  <span class="hljs-keyword">return</span> value % <span class="hljs-number">2</span> === <span class="hljs-number">0</span> ? <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">timer</span>(<span class="hljs-number">200</span>) : <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">timer</span>(<span class="hljs-number">100</span>);<br>&#125;;<br><span class="hljs-keyword">const</span> result$ = source$.<span class="hljs-title function_">windowToggle</span>(openings$, closingSelector);<br></code></pre></td></tr></table></figure><p><img src="/img/Untitled%2022.png" alt="Untitled%2022.png"></p><p><strong>window和buffer</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> source$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">timer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<br><span class="hljs-keyword">const</span> notifer$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">timer</span>(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>);<br><span class="hljs-keyword">const</span> result$ = source$.<span class="hljs-title function_">window</span>(notifer$);<br></code></pre></td></tr></table></figure><p><img src="/img/Untitled%2023.png" alt="Untitled%2023.png"></p><h2 id="高阶的map"><a href="#高阶的map" class="headerlink" title="高阶的map"></a>高阶的map</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">project</span> = (<span class="hljs-params">value, index</span>) =&gt; &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">100</span>).<span class="hljs-title function_">take</span>(<span class="hljs-number">5</span>);<br>        &#125;<br><span class="hljs-keyword">const</span> source$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">200</span>);<br>        <span class="hljs-keyword">const</span> result$ = source$.<span class="hljs-title function_">map</span>(project);<br></code></pre></td></tr></table></figure><p><img src="/img/Untitled%2024.png" alt="Untitled%2024.png"></p><p>所有高阶map的操作符都有一个函数参数project，但是和普通map不同，普通map只是把一个数据映射为另一个数据，而高阶map的函数参数project把一个数据映射为一个Observable对象。</p><p>高阶map，所做的事情就是比普通的map更进一步，不只是把project返回的结果丢给下游就完事，而是把每个内部Observable中的数据做组合，通俗一点说就是“砸平”</p><p>RxJS提供的高阶map操作符有如下几个：</p><ul><li><p>❑ concatMap</p><p>  <img src="/img/Untitled%2025.png" alt="Untitled%2025.png"></p><ul><li><p>最好场景是实现DOM拖拽</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> box = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#box&#x27;</span>);<br><span class="hljs-keyword">const</span> mouseDown$ = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">fromEvent</span>(box, <span class="hljs-string">&#x27;mousedown&#x27;</span>);<br><span class="hljs-keyword">const</span> mouseUp$ = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">fromEvent</span>(box, <span class="hljs-string">&#x27;mouseup&#x27;</span>);<br><span class="hljs-keyword">const</span> mouseOut$ = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">fromEvent</span>(box, <span class="hljs-string">&#x27;mouseout&#x27;</span>);<br><span class="hljs-keyword">const</span> mouseMove$ = <span class="hljs-title class_">Rx</span>.<span class="hljs-property">Observable</span>.<span class="hljs-title function_">fromEvent</span>(box, <span class="hljs-string">&#x27;mousemove&#x27;</span>);<br><br><span class="hljs-keyword">const</span> drag$ = mouseDown$.<span class="hljs-title function_">concatMap</span>(<span class="hljs-function">(<span class="hljs-params">startEvent</span>)=&gt;</span> &#123;<br><span class="hljs-keyword">const</span> initialLeft = box.<span class="hljs-property">offsetLeft</span>;<br><span class="hljs-keyword">const</span> initialTop = box.<span class="hljs-property">offsetTop</span>;<br><span class="hljs-keyword">const</span> stop$ = mouseUp$.<span class="hljs-title function_">merge</span>(mouseOut$);<br><br><span class="hljs-keyword">return</span> mouseMove$.<span class="hljs-title function_">takeUntil</span>(stop$)).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">moveEvent</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">x</span>: moveEvent.<span class="hljs-property">x</span> - startEvent.<span class="hljs-property">x</span> + initialLeft,<br>    <span class="hljs-attr">y</span>: moveEvent.<span class="hljs-property">y</span> - startEvent.<span class="hljs-property">y</span> + initialTop,<br>  &#125;;<br>&#125;);<br>&#125;);<br>drag$.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>  box.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = event.<span class="hljs-property">x</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>  box.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = event.<span class="hljs-property">y</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li><p>❑ mergeMap</p><p>  <img src="/img/Untitled%2026.png" alt="Untitled%2026.png"></p><ul><li><p>适用AJAX场景</p><p>  mergeMap能够解决异步操作的问题，最典型的应用场景就是对于AJAX请求的处理。在一个网页应用中，一个很典型的场景，每点击某个元素就需要发送一个AJAX请求给服务器端，同时还要根据返回结果更新网页中的状态，AJAX的处理当然是一个异步过程，使用传统的方法来解决这样的异步过程代码会十分繁杂。</p></li></ul></li><li><p>❑ switchMap</p><p>  switchMap依然在上游产生数据的时候去调用函数参数project，但它和concatMap和mergeMap都不一样的是，后产生的内部Observable对象优先级总是更高，只要有新的内部Observable对象产生，就立刻退订之前的内部Observable对象，改为从最新的内部Observable对象拿数据。就像switch的含义一样，switchMap做的是一个“切换”，只要有更新的内部Observable对象，就切换到最新的内部Observable对象</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> source$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">take</span>(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">const</span> result$ = source$.<span class="hljs-title function_">switchMap</span>(project);<br></code></pre></td></tr></table></figure><p>  <img src="/img/Untitled%2027.png" alt="Untitled%2027.png"></p></li><li><p>❑ exhaustMap</p><p>  exhaustMap对数据的处理策略和switchMap正好相反，先产生的内部Observable优先级总是更高，后产生的内部Observable对象被利用的唯一机会，就是之前的内部Observable对象已经完结。</p></li></ul><p>concatMap &#x3D; map + concatAll<br>mergeMap &#x3D; map + mergeAll<br>switchMap &#x3D; map + switch<br>exhaustMap &#x3D; map + exhaust</p><h2 id="高阶的MapTo"><a href="#高阶的MapTo" class="headerlink" title="高阶的MapTo"></a>高阶的MapTo</h2><p>❑ concatMapTo</p><p>❑ mergeMapTo</p><p>❑ switchMapTo</p><ul><li><p>❑ expand</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Observable</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/Observable&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/observable/interval&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/observable/of&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/operator/delay&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/operator/expand&#x27;</span>;<br><br><span class="hljs-keyword">const</span> source$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">const</span> result$ = source$.<span class="hljs-title function_">expand</span>(<br>  <span class="hljs-function">(<span class="hljs-params">value, index</span>) =&gt;</span> <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">of</span>(value * <span class="hljs-number">2</span>).<span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>)<br>);<br><br>result$.<span class="hljs-title function_">subscribe</span>(<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>,<br>  <span class="hljs-literal">null</span>,<br>  <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;complete&#x27;</span>)<br>);<br><span class="hljs-comment">//---</span><br><span class="hljs-keyword">import</span> &#123; fromEvent, <span class="hljs-keyword">of</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; expand, mapTo, delay, take &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/operators&#x27;</span>;<br><br><span class="hljs-keyword">const</span> clicks = <span class="hljs-title function_">fromEvent</span>(<span class="hljs-variable language_">document</span>, <span class="hljs-string">&#x27;click&#x27;</span>);<br><span class="hljs-keyword">const</span> powersOfTwo = clicks.<span class="hljs-title function_">pipe</span>(<br>  <span class="hljs-title function_">mapTo</span>(<span class="hljs-number">1</span>),<br>  <span class="hljs-title function_">expand</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> <span class="hljs-title function_">of</span>(<span class="hljs-number">2</span> * x).<span class="hljs-title function_">pipe</span>(<span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>))),<br>  <span class="hljs-title function_">take</span>(<span class="hljs-number">10</span>),<br>);<br>powersOfTwo.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x));<br></code></pre></td></tr></table></figure></li></ul><h2 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h2><p>回压控制类的操作符也提供数据分组的功能，比如window这个操作符，也是把上游的数据放到不同的内部Observable对象中，但是window传给一个数据流的总是连续的数据。实际情况中，需要分组的数据可能是交叉出现的，比如对于随机的整数序列，需要把奇数放在一个分组，把偶数放在另一个分组，这样window就是肯定做不到的。</p><p>为了支持数据分组，RxJS提供如下的操作符：</p><ul><li><p>❑ groupBy</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> intervalStream$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">const</span> groupByStream$ = intervalStream$.<span class="hljs-title function_">groupBy</span>(<br>  <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x % <span class="hljs-number">2</span><br>);<br></code></pre></td></tr></table></figure><p>  <img src="/img/Untitled%2028.png" alt="Untitled%2028.png"></p></li><li><p>❑ partition</p><p>  对于很多具体问题，使用groupBy显得是牛刀杀鸡，比如上游数据是整数序列，需要把奇数和偶数分组处理，如果用groupBy的话，产生的高阶Observable中也无法确定第一个Observable是代表奇数还是第二个Observable是代表奇数，因为这完全取决于上游是先出现奇数还是偶数，而且，实际上我们只需要产生两个Observable对象，但是却不得不去处理一个高阶Observable对象。RxJS提供的partition就能简化这样问题的处理，对于需要把一个Observable对象分为两个Observable对象的操作，partition比groupBy更直观更易用。</p><p>  partition是RxJS提供的操作符中唯一的不返回Observable对象的操作符，它返回的是一个数组，包含两个元素，第一个元素是容纳满足判定条件的Observable对象，第二个元素自然是不满足判定条件的Observable对象。</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Observable</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/Observable&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/observable/timer&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/operator/partition&#x27;</span>;<br><br><span class="hljs-keyword">const</span> source$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">timer</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<br><span class="hljs-keyword">const</span> [even$, odd$] = source$.<span class="hljs-title function_">partition</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>);<br><br>even$.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;even:&#x27;</span>, value));<br>odd$.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;odd:&#x27;</span>, value));<br></code></pre></td></tr></table></figure></li></ul><h2 id="累计数据"><a href="#累计数据" class="headerlink" title="累计数据"></a>累计数据</h2><ul><li><p>❑ scan</p><p>  scan可能是RxJS中对构建交互式应用程序最重要的一个操作符，因为它能够维持应用的当前状态，一方面可以根据数据流持续更新这些状态，另一方面可以持续把更新的状态传给另一个数据<br>  流用来做必要处理。</p><p>  scan实际上实现了一个看不见的累计值变量，每一个上游数据都会更新这个累计值，这个累计值就可以用来保存应用中的状态，有了scan，我们就不需要一个全局变量来维持应用状态，因为状态隐藏在每一次调用scan之中，一个应用中如果使用了多个scan，这些内部状态也绝对不会互相干扰。</p><p>  在使用RxJS的应用中，如果需要维持应用的状态，scan是首选。</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Observable</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/Observable&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/observable/interval&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;rxjs/add/operator/scan&#x27;</span>;<br><br><span class="hljs-keyword">const</span> source$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">100</span>);<br><span class="hljs-keyword">const</span> result$ = source$.<span class="hljs-title function_">scan</span>(<span class="hljs-function">(<span class="hljs-params">accumulation, value</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> accumulation + value;<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>❑ mergeScan</p><ul><li>规约函数返回的Observable对象如果返回多个数据如何处理？</li><li>规约函数的accumulation参数会是什么值？</li></ul><p>  因为规约函数返回的Observable对象可能在上游再次推送数据下来的时候还没有完结，而mergeScan以类似merge的方式组合所有的Observable对象，导致各个Observable对象的数据可能会交叉传递给下游。这种交叉情况发生的时候，到底哪个Observable对象的数据是“最后一次传递给下游的数据”很难确定，所以下一次调用规约函数的accumulation参数也很难确定。因此，最好不要让mergeScan的规约函数返回包含多个数据的Observable对象，不然很容易失控。</p><p>  <strong>适用场景：</strong></p><p>  如果涉及多个AJAX请求之间的依赖关系，比如第一个AJAX请求的结果决定第二个AJAX请求的参数，那么mergeScan可能帮得上忙，在这个场景下，mergeScan的规约函数会返回Observable对象，但是这个Observable对象也最好只包含一个数据。</p><p>  能够想象得到的最适合mergeScan的应用场景就是无限向下扩展功能，类似于微博和Twitter的界面，当用户滚动到网页底部，网页会发送一个AJAX请求获取更多的内容，从而让网页中的内容向下扩展，下面是示例代码：</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> result$ = throttledScrollToEnd$.<span class="hljs-title function_">mergeScan</span>(<span class="hljs-function">(<span class="hljs-params">allTweets, value</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">getTweets</span>(allTweets[allTweets.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>]).<span class="hljs-title function_">map</span>(<br>      <span class="hljs-function"><span class="hljs-params">newTweets</span> =&gt;</span> allTweets.<span class="hljs-title function_">concat</span>(newTweets)<br>  );<br>&#125;, []);<br></code></pre></td></tr></table></figure><p>  其中，throttleScrollToEnd$是一个使用回压控制处理过的滚动到网页底部的事件数据流，每当用户界面滚动到底部，mergeScan就产生作用。每一次规约，都会通过getTweets函数发送一个AJAX请求，为了获得向下扩展的内容，需要知道当前获得的最后一条tweet，所以要把allTweets最后一个元素作为参数传递给getTweets, getTweets也应该返回一个Observable对象元素，内容是从服务器端获得的新内容newTweets，通过map，把allTweets和newTweets合并，就是mergeScan规约的结果。总之，实际应用中如果使用mergeScan，最好让规约函数返回的Observable对象不要太复杂，即最好只包含一个数据，如果只是要维持应用状态，绝大部分情况使用scan就足够。</p></li></ul><blockquote><p>最简单的数据转化只是把上游的某个数据转化为对应的一个下游数据，但是数据转化不限于单个数据的转化，还包括把上游的多个数据合并为一个数据传给下游。这种合并转化操作不同于合并类操作符的操作，因为合并类操作符只是搬运上游数据，并不会改变数据自身。转化类操作符也可以用来控制回压，这是一种无损的回压控制方法，本质上是把如何过滤掉无关信息的决策权交给了下游。本章还介绍了转化类操作符对高阶Observable的支持，本质上，可以认为是map和某个合并类操作符的组合，比如concatMap就是map和concatAll的组合。</p></blockquote><h1 id="十二、异常错误处理"><a href="#十二、异常错误处理" class="headerlink" title="十二、异常错误处理"></a>十二、异常错误处理</h1><p><img src="/img/Untitled%2029.png" alt="Untitled%2029.png"></p><h3 id="try-x2F-catch只支持同步运算"><a href="#try-x2F-catch只支持同步运算" class="headerlink" title="try&#x2F;catch只支持同步运算"></a>try&#x2F;catch只支持同步运算</h3><p>try&#x2F;catch方式只适用于同步代码指令，对于异步操作，try&#x2F;catch就完全无用武之地了</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> invalidJsonString = <span class="hljs-string">&#x27;Not Found&#x27;</span>;<br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(invalidJsonString);<br>  &#125;, <span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;catch error&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="回调函数的局限"><a href="#回调函数的局限" class="headerlink" title="回调函数的局限"></a>回调函数的局限</h3><p>回调地狱</p><h3 id="Promise的异常处理"><a href="#Promise的异常处理" class="headerlink" title="Promise的异常处理"></a>Promise的异常处理</h3><p>Promise的异常处理依然存在不足之处。最主要的缺点就是，Promise不能够重试。</p><p>对错误异常的处理可以分为两类：</p><p>❑ 恢复（recover）</p><p>就是本来虽然产生了错误异常，但是依然让运算继续下去。最常见的场景就是在获取某个数据的过程中发生了错误，这时候自然没有获得正确数据，但是用一个默认值当做返回的结果，让运算继续。</p><p>❑ 重试（retry）</p><p>就是当发生错误异常的时候，认为这个错误只是临时的，重新尝试之前发生错误的操作，寄希望于重试之后能够获得正常的结果。</p><p>RxJS中有如下四个操作符来支持异常操作：</p><p>❑ catch</p><p>❑ retry</p><p>retry这个操作符还不满足延时重试的要求，所以，还需要另外一个操作符，那就是retryWhen。</p><ul><li><p>❑ retryWhen</p><p>  retryWhen接受一个函数作为参数，这个参数称为notifer，用于控制“重试”的节奏和次数，这比retry单纯只能控制重试次数要前进一步。notifer返回一个Observable对象，当上游扔下来错误的时候，retryWhen就会调用notifer，然后根据notifer返回的Observable对象来决定何时重试，这个返回的Observable就是一个“节奏控制器”，“节奏控制器”每吐出一个数据，就会进行一次重试。</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> source$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br><span class="hljs-keyword">const</span> error$ = source$.<span class="hljs-title function_">map</span>(throwOnUnluckyNumber);<br><span class="hljs-keyword">const</span> retryWhen$ = error$.<span class="hljs-title function_">retryWhen</span>(err$ =&gt; <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">interval</span>(<span class="hljs-number">1000</span>));<br></code></pre></td></tr></table></figure><ul><li>延时重试</li></ul>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> source$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br><span class="hljs-keyword">const</span> error$ = source$.<span class="hljs-title function_">map</span>(throwOnUnluckyNumber);<br><span class="hljs-keyword">const</span> retry$ = error$.<span class="hljs-title function_">retryWhen</span>(err$ =&gt; err$.<span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>));<br></code></pre></td></tr></table></figure><ul><li>用retryWhen实现retry</li></ul>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Observable</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">retryCount</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">maxCount</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">retryWhen</span>(err$ =&gt; &#123;<br>  <span class="hljs-keyword">return</span> err$.<span class="hljs-title function_">scan</span>(<span class="hljs-function">(<span class="hljs-params">errorCount, err</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (errorCount &gt;= maxCount) &#123;<br>      <span class="hljs-keyword">throw</span> err;<br>    &#125;<br>    <span class="hljs-keyword">return</span> errorCount + <span class="hljs-number">1</span>;<br>    &#125;, <span class="hljs-number">0</span>)<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>延时并有上限的重试</li></ul>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Observable</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">retryWithDelay</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">maxCount, delayMilliseconds</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">retryWhen</span>(err$ =&gt; &#123;<br>    <span class="hljs-keyword">return</span> err$.<span class="hljs-title function_">scan</span>(<span class="hljs-function">(<span class="hljs-params">errorCount, err</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (errorCount &gt;= maxCount) &#123;<br>        <span class="hljs-keyword">throw</span> err;<br>      &#125;<br>      <span class="hljs-keyword">return</span> errorCount + <span class="hljs-number">1</span>;<br>    &#125;, <span class="hljs-number">0</span>).<span class="hljs-title function_">delay</span>(delayMilliseconds);<br>  &#125;);<br>&#125;;<br><br><span class="hljs-keyword">const</span> source$ = <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>);<br><span class="hljs-keyword">const</span> error$ = source$.<span class="hljs-title function_">map</span>(throwOnUnluckyNumber);<br><span class="hljs-keyword">const</span> retry$ = error$.<span class="hljs-title function_">retryWithDelay</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><ul><li>递增延时重试</li></ul><p>  比如，访问某个服务器API，第一次失败，可以等100毫秒之后再尝试，结果又失败了，这时候一个比较经验性的做法不是再等100毫秒之后重试，过去的100毫秒服务器没有恢复，那估计再等100毫秒恢复的概率也不高，而且访问太频繁对服务器造成压力也不大好，所以，可以选择200毫秒之后重试，如果再失败，就进一步增加重试延迟，400毫秒之后重试，然后800毫秒后重试，以每次失败选择2n×100毫秒的延时，n为失败次数。</p>  <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Observable</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">retryWithExpotentialDelay</span>  =  <span class="hljs-keyword">function</span>  (<span class="hljs-params">maxRetry,</span><br><span class="hljs-params">  initialDelay</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">retryWhen</span>(<br>    err$ =&gt; &#123;<br>      <span class="hljs-keyword">return</span> err$.<span class="hljs-title function_">scan</span>(<span class="hljs-function">(<span class="hljs-params">errorCount, err</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (errorCount &gt;= maxRetry) &#123;<br>          <span class="hljs-keyword">throw</span> err;<br>        &#125;<br>        <span class="hljs-keyword">return</span> errorCount + <span class="hljs-number">1</span>;<br>      &#125;, <span class="hljs-number">0</span>)<br>      .<span class="hljs-title function_">delayWhen</span>(<span class="hljs-function"><span class="hljs-params">errorCount</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> delayTime = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">2</span>, errorCount -<span class="hljs-number">1</span>) ＊ initialDelay;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">timer</span>(delayTime);<br>      &#125;);<br>    &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>  在retryWithExpotentialDelay中，我们使用了delayWhen这个操作符，就和retryWhen利用Observable然后能力比retry强大很多一样，delayWhen利用Observable所以能力也比delay强大很多。delayWhen从上游scan得到的数据是重试的次数，根据重试次数计算出延时时间，这样就让重试延时不局限于一个固定时间。</p></li></ul><p>❑ finally</p><p>finally和do操作符很像，它们传入的函数无法影响数据流，所以要做点事只能通过其他副作用，比如释放数据流之外的资源，输出一个日志信息之类。finally和do也有很大的不同，finally的参数只在上游数据完结或者出错的时候才执行，一个数据流中finally只会发挥一次作用；而do是对上游吐出的每个数据均执行。finally和do这二者配合使用可以覆盖数据流上可能发生的所有事件。</p><h2 id="重试的本质"><a href="#重试的本质" class="headerlink" title="重试的本质"></a>重试的本质</h2><p>因为无论是retryWhen还是retry，所谓的“重试”，其实就是重新订阅（subscribe）一遍上游Observable对象的过程，在订阅上游的同时，会退订上一次的订阅，所以，如此一来，上面代码中上游只有0才有机会被吐出，之后的数据都因为退订而没有出头之日了。理解“重试”其实就是退订加上订阅的操作非常重要，如果上游Observable是一个Hot数据流，可能结果并不是一次“重试”</p><p><strong>对于Hot数据流，即使使用了retry和retryWhen，也并不是“重试”，只不过是重新订阅而已。</strong></p><hr><p>在这一章中，我们了解了JavaScript自带的异常处理方式，通过try&#x2F;catch指令可以处理同步操作的异常，但是不能处理异步操作的异常。使用回调函数，并在回调函数中利用参数传递错误异常，可以解决异步操作的问题，但是却可能造成“回调函数地狱”。Promise可以解决回调函数方式的问题，但是Promise自身不能够重试。RxJS自带的操作符比较完美地解决了所有问题，使用catch、retry和retryWhen，可以方便地支持“恢复”和“重试”两类异常处理方式。retryWhen和scan、delay等操作符结合，可以非常方便定制出任意重试功能，可见RxJS功能的强大。</p><h1 id="十三、多播（multicast）"><a href="#十三、多播（multicast）" class="headerlink" title="十三、多播（multicast）"></a>十三、多播（multicast）</h1><blockquote><p>多播就是让一个数据流的内容被多个Observer订阅。</p></blockquote><p>为了实现多播，需要引入一种特殊的类型Subject，在RxJS中除了Subject这个类型，还有如下几个扩充的形态：</p><p>❑ BehaviorSubject</p><p>❑ ReplaySubject</p><p>❑ AsyncSubject</p><p>RxJS还提供一系列操作符用于支持多播：</p><p><img src="/img/Untitled%2030.png" alt="Untitled%2030.png"></p><p>播放内容的方式可以分为三种：</p><p>❑ <strong>单播（unicast）</strong></p><p>一个播放者对应一个收听者，一对一的关系</p><p>❑ <strong>广播（broadcast）</strong></p><p>一个接受者，但是有时候我们希望所有人都知道某个消息，这就是广播，</p><p><strong>缺点：</strong>广播的问题是，发布消息的根本不知道听众是什么样的人，于是筛选消息的责任就完全落在了接收方的身上，而且广播中容易造成频道冲突，就像无线电的共用频段，如果不同的几组人都在用一个频段交流，有的人说的是交通拥堵情况，有的人协调的是餐厅服务，这样很容易乱套。因为广播这种方式影响全局环境，难以控制，和RxJS的设计初衷就违背，所以，我们不考虑用RxJS实现广播。</p><p>❑ <strong>多播（multicast）</strong></p><p>还有一些八卦消息，你想要分享给一群朋友，但并不想分享给所有人，或者不想在公共场合大声嚷嚷，于是你在微信上把相关朋友拉进一个群，在群里说出这个消息，只有被选中的朋友才能收到这条消息，这就叫做“多播”</p><p><img src="/img/Untitled%2031.png" alt="Untitled%2031.png"></p><h2 id="Hot和Cold数据流差异"><a href="#Hot和Cold数据流差异" class="headerlink" title="Hot和Cold数据流差异"></a>Hot和Cold数据流差异</h2><p>不难看出，这些产生Hot Observable对象的操作符数据源都在外部，或者是来自于Promise，或者是来自于DOM，或者是来自于Event Emitter，真正的数据源和有没有Observer没有任何关系。真正的多播，必定是无论有多少Observer来subscribe，推给Observer的都是一样的数据源，满足这种条件的，就是Hot Observable，因为Hot Observable中的内容创建和订阅者无关。</p><p>Hot和Cold Observable都具有“懒”的特质，不过Cold更“懒”一些，两者的数据管道内逻辑都是只有存在订阅者存在才执行，Cold Observable更“懒”体现在，如果没有订阅者，连数据都不会真正产生，对于Hot Observable，没有订阅者的情况下，数据依然会产生，只不过不传入数据管道。</p><p>Cold Observable实现的是单播，Hot Observable实现的多播</p><p>下面几个产生的是Hot Observable：</p><p>❑ fromPromise</p><p>❑ fromEvent</p><p>❑ fromEventPattern</p><p>既然interval产生的是Cold Observable，那么接下来的问题就是：如何把Cold Observable变成Hot Observable呢？答案就是要使用RxJS中的Subject。</p><h2 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h2><p><strong>主要解决热订阅</strong></p><p>我们知道，在函数式编程的世界里，有一个要求是保持“不可变性”（Immutable），所以，要把一个Cold Observable对象转换成一个Hot Observable对象，并不是去改变这个ColdObservable对象本身，而是产生一个新的Observable对象，包装之前Cold Observable对象，这样在数据流管道中，新的Observable对象就成为了下游，想要Hot数据源的Observer要订阅的是这个作为下游的Observable对象。要实现这个转化，很明显需要一个“中间人”做串接的事情，这个中间人有两个职责：</p><p>❑ 中间人要提供subscribe方法，让其他人能够订阅自己的数据源。</p><p>❑ 中间人要能够有办法接受推送的数据，包括Cold Observable推送的数据。</p><p>上面所说的第一个职责，相当于一个Observable，第二个工作，相当于一个Observer。在RxJS中，提供了名为Subject的类型，一个Subject既有Observable的接口，也具有Observer的接口，一个Subject就具备上述的两个职责。</p><p>虽然有习惯把Observable对象的变量名带上$后缀，而且Subject其实也是一种Observable，但是业界并没有习惯把Subject对象的变量名加上$后缀。</p><p>e.g:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Subject</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;rxjs/Subject&#x27;</span>;<br><span class="hljs-keyword">const</span> subject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>();<br><br><span class="hljs-keyword">const</span> subscription1 = subject.<span class="hljs-title function_">subscribe</span>(<br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;on observer 1 data: &#x27;</span> + value),<br>  <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;on observer 1 error: &#x27;</span> + err.<span class="hljs-property">message</span>),<br>  <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;on observer 1 complete&#x27;</span>)<br>);<br><br>subject.<span class="hljs-title function_">next</span>(<span class="hljs-number">1</span>);<br><br>subject.<span class="hljs-title function_">subscribe</span>(<br>  <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;on observer 2 data: &#x27;</span> + value),<br>  <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;on observer 2 error: &#x27;</span> + err.<span class="hljs-property">message</span>),<br>  <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;on observer 2 complete&#x27;</span>)<br>);<br><br>subject.<span class="hljs-title function_">next</span>(<span class="hljs-number">2</span>);<br>subscription1.<span class="hljs-title function_">unsubscribe</span>();<br>subject.<span class="hljs-title function_">complete</span>();<br><br><span class="hljs-comment">//on observer 1 data: 1</span><br><span class="hljs-comment">//on observer 1 data: 2</span><br><span class="hljs-comment">//on observer 2 data: 2</span><br><span class="hljs-comment">//on observer 2 complete</span><br><span class="hljs-comment">//从这个例子看得出来，后加入的观察者，并不会获得加入之前Subject对象上通过next推送的数据，这个特点，让Subject可以用来实现Cold Observable到Hot Observable的转换，从而实现真正的多播。</span><br></code></pre></td></tr></table></figure><p>Subject同时也是一个Observer，作为Observer会接受和消化“生产者”推过来的数据，最简单的消化方法，就是把数据、错误和完结通知都一股脑原样推给Subject自己的Observer。</p><p><img src="/img/Untitled%2032.png" alt="Untitled%2032.png"></p><h3 id="makeHot操作符"><a href="#makeHot操作符" class="headerlink" title="makeHot操作符"></a>makeHot操作符</h3><p>但是可惜Subject并不是一个操作符，所以无法链式调用，不过，可以创造一个新的操作符来达到链式调用的效果。</p><p>新创建的操作符可以把上游的Cold Observable转化成Hot Observable，所以命名为makeHot，代码如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title class_">Observable</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">makeHot</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> cold$ = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-keyword">const</span> subject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>();<br>  cold$.<span class="hljs-title function_">subscribe</span>(subject);<br>  <span class="hljs-keyword">return</span> subject;<br>&#125;<br><span class="hljs-comment">// 可能会调用complete来影响下游，改造如下</span><br><span class="hljs-title class_">Observable</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">makeHot</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> cold$ = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-keyword">const</span> subject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>();<br>  cold$.<span class="hljs-title function_">subscribe</span>(subject);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Observable</span>.<span class="hljs-title function_">create</span>(<span class="hljs-function">(<span class="hljs-params">observer</span>) =&gt;</span> subject.<span class="hljs-title function_">subscribe</span>(observer));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Subject不能重复使用"><a href="#Subject不能重复使用" class="headerlink" title="Subject不能重复使用"></a>Subject不能重复使用</h3><p>Subject对象也是一个Observable对象，但是因为它有自己的状态，所以不像Cold Observable对象一样每次被subscribe都是一个新的开始，正因为如此，Subject对象是不能重复使用的，所谓不能重复使用，指的是一个Subject对象一旦被调用了complete或者error函数，那么，它作为Observable的生命周期也就结束了，后续还想调用这个Subject对象的next函数传递数据给下游，就如同泥牛入大海，一去不回，没有任何反应。</p><h3 id="Subject可以有多个上游"><a href="#Subject可以有多个上游" class="headerlink" title="Subject可以有多个上游"></a>Subject可以有多个上游</h3><p>如果让一个Subject订阅多个数据流，起到的作用就是把多个数据源的内容汇聚到一个Observable中</p><p>虽然Subject理论上可以合并多个数据流，但是，因为任何一个上游数据流的完结或者出错信息都可以终结Subject对象的生命，<strong>让Subject来做合并数据流的工作显得并不合适。</strong></p><h3 id="Subject的错误处理"><a href="#Subject的错误处理" class="headerlink" title="Subject的错误处理"></a>Subject的错误处理</h3><p>可以想象，Subject中为了给所有Observer推送数据，会有类似下面这样的代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> observer <span class="hljs-keyword">of</span> allObservers) &#123;<br>  observer.<span class="hljs-title function_">next</span>(data);<br>&#125;<br></code></pre></td></tr></table></figure><p>一个<code>Observers</code>出错会阻塞其他的<code>Observers</code> 。</p><p>所以subject下游每个Observers必须加入catch</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>RxJS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git再学习</title>
    <link href="/2019/11/15/2019-11-15-git%E5%86%8D%E5%AD%A6%E4%B9%A0/"/>
    <url>/2019/11/15/2019-11-15-git%E5%86%8D%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Gitflow工作流"><a href="#Gitflow工作流" class="headerlink" title="Gitflow工作流"></a>Gitflow工作流</h1><p><img src="https://raw.githubusercontent.com/xirong/my-git/master/images/git-workflows-gitflow.png"></p><h1 id="这个命令检出一个基于master名为marys-feature的分支，Git的-b选项表示如果分支还不存在则新建分支。"><a href="#这个命令检出一个基于master名为marys-feature的分支，Git的-b选项表示如果分支还不存在则新建分支。" class="headerlink" title="这个命令检出一个基于master名为marys-feature的分支，Git的-b选项表示如果分支还不存在则新建分支。"></a>这个命令检出一个基于master名为marys-feature的分支，Git的-b选项表示如果分支还不存在则新建分支。</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b marys-feature master<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status <span class="hljs-comment"># 查看本地仓库的修改状态 </span><br>git add <span class="hljs-comment"># 暂存文件 </span><br>git commit <span class="hljs-comment">#提交文件</span><br><br>git push origin master<br><span class="hljs-comment"># 需要先pull --rebase</span><br>git pull --rebase origin master<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解决冲突</span><br>git add &lt;some-file&gt; <br>git rebase --<span class="hljs-built_in">continue</span><br></code></pre></td></tr></table></figure><h1 id="如果你碰到了冲突，但发现搞不定，不要惊慌。只要执行下面这条命令，就可以回到你执行git-pull-–rebase命令前的样子："><a href="#如果你碰到了冲突，但发现搞不定，不要惊慌。只要执行下面这条命令，就可以回到你执行git-pull-–rebase命令前的样子：" class="headerlink" title="如果你碰到了冲突，但发现搞不定，不要惊慌。只要执行下面这条命令，就可以回到你执行git pull –rebase命令前的样子："></a>如果你碰到了冲突，但发现搞不定，不要惊慌。只要执行下面这条命令，就可以回到你执行git pull –rebase命令前的样子：</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase --abort<br></code></pre></td></tr></table></figure><h1 id="u选项设置本地分支去跟踪远程对应的分支。-设置好跟踪的分支后，小红就可以使用git-push命令省去指定推送分支的参数"><a href="#u选项设置本地分支去跟踪远程对应的分支。-设置好跟踪的分支后，小红就可以使用git-push命令省去指定推送分支的参数" class="headerlink" title="-u选项设置本地分支去跟踪远程对应的分支。 设置好跟踪的分支后，小红就可以使用git push命令省去指定推送分支的参数"></a>-u选项设置本地分支去跟踪远程对应的分支。 设置好跟踪的分支后，小红就可以使用git push命令省去指定推送分支的参数</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin marys-feature<br>git push<br></code></pre></td></tr></table></figure><h1 id="合并远程分支"><a href="#合并远程分支" class="headerlink" title="合并远程分支"></a>合并远程分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout master<br>git pull<br>git pull origin marys-feature<br>git push<br></code></pre></td></tr></table></figure><h1 id="小红完成功能开发"><a href="#小红完成功能开发" class="headerlink" title="小红完成功能开发"></a>小红完成功能开发</h1><p>添加了提交后，小红觉得她的功能OK了。如果团队使用Pull Requests，这时候可以发起一个用于合并到develop分支。<br>否则她可以直接合并到她本地的develop分支后push到中央仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin develop<br>git checkout develop<br>git merge some-feature<br>git push<br>git branch -d some-feature<br></code></pre></td></tr></table></figure><h1 id="小红完成发布"><a href="#小红完成发布" class="headerlink" title="小红完成发布"></a>小红完成发布</h1><p> 一旦准备好了对外发布，小红合并修改到master分支和develop分支上，删除发布分支。合并回develop分支很重要，因为在发布分支中已经提交的更新需要在后面的新功能中也要是可用的。 另外，如果小红的团队要求Code Review，这是一个发起Pull Request的理想时机。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout master<br>git merge release-0.1<br>git push<br>git checkout develop<br>git merge release-0.1<br>git push<br>git branch -d release-0.1<br></code></pre></td></tr></table></figure><p> 发布分支是作为功能开发（develop分支）和对外发布（master分支）间的缓冲。只要有合并到master分支，就应该打好Tag以方便跟踪。<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"> git tag -a 0.1 -m <span class="hljs-string">&quot;Initial public release&quot;</span> master<br>git push --tags<br></code></pre></td></tr></table></figure></p><h1 id="最终用户发现Bug"><a href="#最终用户发现Bug" class="headerlink" title="最终用户发现Bug"></a>最终用户发现Bug</h1><p> 对外版本发布后，小红小明一起开发下一版本的新功能，直到有最终用户开了一个Ticket抱怨当前版本的一个Bug。<br> 为了处理Bug，小红（或小明）从master分支上拉出了一个维护分支，提交修改以解决问题，然后直接合并回master分支：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"> git checkout -b issue-<span class="hljs-comment">#001 master</span><br><span class="hljs-comment"># Fix the bug</span><br>git checkout master<br>git merge issue-<span class="hljs-comment">#001</span><br>git push<br><br><span class="hljs-comment"># 合并解决的bug到develop分支</span><br>git checkout develop<br>git merge issue-<span class="hljs-comment">#001</span><br>git push<br>git branch -d issue-<span class="hljs-comment">#001</span><br></code></pre></td></tr></table></figure></p><h1 id="Forking工作流"><a href="#Forking工作流" class="headerlink" title="Forking工作流"></a>Forking工作流</h1><p>Forking工作流是分布式工作流，充分利用了Git在分支和克隆上的优势。可以安全可靠地管理大团队的开发者（developer），并能接受不信任贡献者（contributor）的提交。</p><p>Forking工作流的一个主要优势是，贡献的代码可以被集成，而不需要所有人都能push代码到仅有的中央仓库中。 开发者push到自己的服务端仓库，而只有项目维护者才能push到正式仓库。 这样项目维护者可以接受任何开发者的提交，但无需给他正式代码库的写权限。</p><p>效果就是一个分布式的工作流，能为大型、自发性的团队（包括了不受信的第三方）提供灵活的方式来安全的协作。 也让这个工作流成为开源项目的理想工作流。</p><h1 id="三、企业日常开发模式探索"><a href="#三、企业日常开发模式探索" class="headerlink" title="三、企业日常开发模式探索"></a>三、企业日常开发模式探索</h1><p>在看这部分前，请先回顾阅读业界认可的成功的 Git Branch Work Flow 模型 <a href="http://nvie.com/posts/a-successful-git-branching-model/">A Successful Git Branching Model</a> ，了解日常开发中的场景，有助于熟悉下面的使用过程。</p><p>在企业开发中，使用 Git 作为版本控制软件最看重的还是结合公司自己搭建的 <a href="https://about.gitlab.com/">Gitlab</a>，将 Code Review 加入打包部署持续集成的流程中，这样，代码开发完成，提交测试前，便可以对开发人员提交的代码进行 Review，发现潜在的问题，及时指导，对于新人来讲，也能更快更好的学习。</p><p>解决的需求场景如下：</p><ul><li>能支持日常迭代开发、紧急线上bug修复、多功能并行开发</li><li>大概50人左右的团队，平日迭代项目较多，且周期短（1~2周一个迭代）</li><li>能够通过tag重建整个系统</li><li>支持code review</li><li>所有上线的代码必须都是经过测试保证，且能自动同步到下一次的迭代中</li><li>能和公司的项目管理&#x2F;持续集成系统整合</li></ul><p><img src="https://raw.githubusercontent.com/xirong/my-git/master/images/branch_module.png" alt="图片"></p><p>上图就是 xirong 团队在日常开发中总结出来的适合企业开发的模式，下面进行简单的介绍，方便大家学习了解，欢迎提交 Issue 进行讨论。（本模式适合敏捷开发流程，小迭代上线，传统的瀑布开发模型并没有进行测试）</p><ol><li>迭代需求会、冲刺会后确定本次迭代的目标后，将迭代内容视为一个项目，在 Gitlab 上创建一个 Repository，初始化工程代码结构，根据上线日期，比如20150730上线，开出分支 release20150730、dev20150730 两个分支，dev 分支作为日常开发主干分支，release 分支作为提测打包、Code Review 的分支。</li><li>迭代开始，日常开发进行中，开发人员在 dev 分支上进行 Commit、Push 代码，并且解决掉日常协同开发中的冲突等问题，等到达到提测条件的时候，提测者，首先 Merge Master 分支上的最新代码 <code>git merge --no-ff  origin/master</code> ，使得 Master 分支上的变更更新到迭代开发分支dev上面，之后，在 Gitlab 上面发起 <code>pull request</code> 请求，并指定 Code Review 人，请求的分支选择本次上线的 release 分支，即 release20150730。</li><li>被指定 Code Review 的人，对发起者的代码 Review 后，决定是否可以提交测试，若有问题，评论注释代码后，提交者对代码进行进行修改，重复步骤2，直到代码 Review 者认为 Ok。之后便可以借助自己公司的打包部署，对这些代码发布到测试环境验证。</li><li>步骤2-3重复多次后，就会达到一个稳定可发布的版本，即上线版本，上线后，将 release 版本上面最后的提交（图中0.2.4上线对应处）合并到 Master 分支上面，并打 Tag0.3。至此，一次完整的迭代开发完成。</li><li>若此次上线后，不久发现生产环境有 Bug 需要修复，则从 Tag 处新开分支 release_bugfix_20150731、dev_bugfix_20150731 ，开发人员从 dev_bugfix_20150731分支上进行开发，提测code review在 release_bugfix_20150731 分支上，具体步骤参考2-3，测试环境验证通过后，发布到线上，验证OK，合并到 Master 分支，并打 Tag0.2.3，此次 Bug 修复完毕，专为解 Bug 而生的这两个分支可以退伍了，删除release_bugfix_20150731、dev_bugfix_20150731两分支即可。（所有的历史 Commit 信息均已经提交到了 Master 分支上，不用担心丢失）</li></ol><p>这样经过上面的1-5步骤，企业日常迭代开发中的代码版本控制基本上就 Ok 了，有问题欢迎 Issue 讨论。</p><p>2016-11月 更新 <strong>Git 分支开发部署模型</strong> 的一些使用原则如下:</p><p><img src="https://raw.githubusercontent.com/xirong/my-git/master/_image/2016-09-22-20-57-27.jpg"></p><ul><li>master：master永远是线上代码，最稳定的分支，存放的是随时可供在生产环境中部署的代码，当开发活动告一段落，产生了一份新的可供部署的代码时，发布成功之后，代码才会由 aone2 提交到 master，master 分支上的代码会被更新。应用上 aone2 后禁掉所有人的 master的写权限</li><li>develop：保存当前最新开发成果的分支。通常这个分支上的代码也是可进行每日夜间发布的代码，只对开发负责人开放develop权限。</li><li>feature: 功能特性分支，每个功能特性一个 feature&#x2F; 分支，开发完成自测通过后合并入 develop 分支。可以从 master 或者develop 中拉出来。</li><li>hotfix: 紧急bug分支修复分支。修复上线后，可以直接合并入master。</li></ul><p><img src="https://raw.githubusercontent.com/xirong/my-git/master/_image/2016-07-19-19-58-15.jpg"></p><p>Git-Develop 分支模式是基于 Git 代码库设计的一种需要严格控制发布质量和发布节奏的开发模式。develop 作为固定的持续集成和发布分支，并且分支上的代码必须经过 CodeReview 后才可以提交到 Develop 分支。它的基本流程如下：</p><ul><li>每一个需求&#x2F;变更都单独从Master上创建一条Branch分支；</li><li>用户在这个Branch分支上进行Codeing活动；</li><li>代码达到发布准入条件后aone上提交Codereview，Codereview通过后代码自动合并到Develop分支；</li><li>待所有计划发布的变更分支代码都合并到Develop后，系统再 rebase master 代码到Develop 分支，然后自行构建，打包，部署等动作。</li><li>应用发布成功后Aone会基于Develop分支的发布版本打一个“当前线上版本Tag”基线；</li><li>应用发布成功后Aone会自动把Develop分支的发布版本合并回master；</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yarn常用操作</title>
    <link href="/2019/11/06/2019-11-6-yarn%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2019/11/06/2019-11-6-yarn%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="yarn-install-安装依赖"><a href="#yarn-install-安装依赖" class="headerlink" title="yarn install 安装依赖"></a>yarn install 安装依赖</h1><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">yarn install / yarn  在本地 node_modules 目录安装 package.json 里列出的所有依赖<br>yarn install <span class="hljs-params">--force</span> 重新拉取所有包，即使之前已经安装的（所以以后别在删除node-modules了<span class="hljs-string">...</span>）<br>yarn install <span class="hljs-params">--modules-folder</span> &lt;path&gt; 为 node_modules 目录指定另一位置，代替默认的 <span class="hljs-string">./node_modules</span><br>yarn install <span class="hljs-params">--no-lockfile</span> 不读取或生成 yarn.lock 文件<br>yarn install <span class="hljs-params">--production</span>[=<span class="hljs-literal">true</span>|<span class="hljs-literal">false</span>] / <span class="hljs-params">--production</span> / <span class="hljs-params">--prod</span> 只安装 dependence下的包，不安装 devDependencies 的包<br><br></code></pre></td></tr></table></figure><h1 id="跟新仓库依赖"><a href="#跟新仓库依赖" class="headerlink" title="跟新仓库依赖"></a>跟新仓库依赖</h1><blockquote><p>yarn,npm-check</p></blockquote><ul><li>更新项目依赖，没有交互,yarn upgrade –latest,npm-check -y</li><li>更新项目依赖，有交互,yarn upgrade-interactive –latest,npm-check -u</li><li>更新全局依赖，没有交互,yarn global upgrade –latest,npm-check -g -y</li><li>更新全局依赖，有交互,yarn global upgrade-interactive –latest,npm-check -g -u</li></ul><h1 id="yarn-add"><a href="#yarn-add" class="headerlink" title="yarn add"></a>yarn add</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yarn <span class="hljs-built_in">add</span> package-name 会安装 latest 最新版本。<br>yarn <span class="hljs-built_in">add</span> &lt;package<span class="hljs-built_in">..</span>.&gt;  安装包到dependencies中<br>yarn <span class="hljs-built_in">add</span> &lt;package<span class="hljs-built_in">..</span>.&gt; [--dev/-D]  用 --dev 或 -D 安装包到 devDependencies<br>yarn <span class="hljs-built_in">add</span> &lt;package<span class="hljs-built_in">..</span>.&gt; [--peer/-P]  用 --peer 或者 -P 安装包到 peerDependencies<br>yarn <span class="hljs-built_in">add</span> &lt;package<span class="hljs-built_in">..</span>.&gt; [--optional/-O] 用 --optional 或者 -O 安装包到 optionalDependencies <br>yarn <span class="hljs-built_in">add</span> &lt;package<span class="hljs-built_in">..</span>.&gt; [--exact/-E] 用 --exact 或者 -E 会安装包的精确版本。默认是安装包的主要版本里的最新版本。 比如说， yarn <span class="hljs-built_in">add</span> foo@1.2.3 会接受 1.9.1 版，但是 yarn <span class="hljs-built_in">add</span> foo@1.2.3 --exact 只会接受 1.2.3 版。<br>yarn <span class="hljs-built_in">add</span> &lt;package<span class="hljs-built_in">..</span>.&gt; [--tilde/-T]  用 --tilde 或者 -T 来安装包的次要版本里的最新版。 默认是安装包的主要版本里的最新版本。 比如说，yarn <span class="hljs-built_in">add</span> foo@1.2.3 --tilde 会接受 1.2.9，但不接受 1.3.0。<br><br></code></pre></td></tr></table></figure><h1 id="yarn-config-管理配置文件"><a href="#yarn-config-管理配置文件" class="headerlink" title="yarn config 管理配置文件"></a>yarn config 管理配置文件</h1><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs q">yarn config <span class="hljs-built_in">get</span> &lt;<span class="hljs-built_in">key</span>&gt; 查看配置<span class="hljs-built_in">key</span>的值<br>yarn config list 查看当前的配置<br>yarn config <span class="hljs-keyword">delete</span> &lt;<span class="hljs-built_in">key</span>&gt; 从配置中删除配置<span class="hljs-built_in">key</span><br>yarn config <span class="hljs-built_in">set</span> &lt;<span class="hljs-built_in">key</span>&gt; &lt;<span class="hljs-built_in">value</span>&gt; [-g|--global] 设置配置项 <span class="hljs-built_in">key</span> 的值为 <span class="hljs-built_in">value</span><br><br></code></pre></td></tr></table></figure><h1 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">yarn list 查询当前工作文件夹所有的依赖<br>yarn info <span class="hljs-tag">&lt;<span class="hljs-name">package</span>&gt;</span> [<span class="hljs-tag">&lt;<span class="hljs-name">field</span>&gt;</span>]  查看包信息，可以查看特定<br>yarn remove <span class="hljs-tag">&lt;<span class="hljs-name">package...</span>&gt;</span>  从依赖里移除名包，同时更新你 package.json 和 yarn.lock 文件。<br>yarn <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"> [<span class="hljs-tag">&lt;<span class="hljs-name">args</span>&gt;</span>] 执行用户自定义的脚本</span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><br></code></pre></td></tr></table></figure><h1 id="详细日志模式-运行yarn命令时，增加参数-–verbose，这对排查错误时很有帮助"><a href="#详细日志模式-运行yarn命令时，增加参数-–verbose，这对排查错误时很有帮助" class="headerlink" title="详细日志模式 运行yarn命令时，增加参数 –verbose，这对排查错误时很有帮助"></a>详细日志模式 运行yarn命令时，增加参数 –verbose，这对排查错误时很有帮助</h1><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">yarn</span> &lt;<span class="hljs-keyword">command</span>&gt; <span class="hljs-comment">--verbose</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>yarn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>moment-quick-check</title>
    <link href="/2019/10/18/2019-10-18-moment-quick-check/"/>
    <url>/2019/10/18/2019-10-18-moment-quick-check/</url>
    
    <content type="html"><![CDATA[<h1 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">valueOf</span>()  <span class="hljs-comment">// 获取时间戳(以毫秒为单位) </span><br><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">startOf</span>(<span class="hljs-string">&#x27;day&#x27;</span>)   <span class="hljs-comment">// 获取今天0时0分0秒</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">startOf</span>(<span class="hljs-string">&#x27;isoWeek&#x27;</span>)  <span class="hljs-comment">// 获取本周周一0时0分0秒</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">startOf</span>(<span class="hljs-string">&#x27;month&#x27;</span>)  <span class="hljs-comment">// 获取本月第一天0时0分0秒</span><br><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">endOf</span>(<span class="hljs-string">&#x27;day&#x27;</span>)   <span class="hljs-comment">// 获取今天23时59分59秒</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">endOf</span>(<span class="hljs-string">&#x27;isoWeek&#x27;</span>)  <span class="hljs-comment">// 获取本周周日23时59分59秒</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">endOf</span>(<span class="hljs-string">&#x27;month&#x27;</span>)   <span class="hljs-comment">// 获取本月最后一天23时59分59秒</span><br><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">year</span>()       <span class="hljs-comment">//   获取当前年份</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">month</span>()   <span class="hljs-comment">//   获取当前月（ 0~11, 0 =&gt;1月, 11=&gt;12月）</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">date</span>()     <span class="hljs-comment">//  获取今天</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">day</span>()      <span class="hljs-comment">// 获取当前星期 (0~6, 0: 周日, 6: 周六)</span><br><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">daysInMonth</span>()  <span class="hljs-comment">// 获取本月的总天数</span><br><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">month</span>(<span class="hljs-title function_">moment</span>().<span class="hljs-title function_">month</span>() - <span class="hljs-number">1</span>).<span class="hljs-title function_">startOf</span>(<span class="hljs-string">&#x27;month&#x27;</span>).<span class="hljs-title function_">valueOf</span>()   <span class="hljs-comment">//  上个月1号的00:00:00</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">month</span>(<span class="hljs-title function_">moment</span>().<span class="hljs-title function_">month</span>() - <span class="hljs-number">1</span>).<span class="hljs-title function_">endOf</span>(<span class="hljs-string">&#x27;month&#x27;</span>).<span class="hljs-title function_">valueOf</span>()    <span class="hljs-comment">//  上个月最后一天的23:59:59</span><br><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">month</span>(<span class="hljs-title function_">moment</span>().<span class="hljs-title function_">month</span>() - <span class="hljs-number">1</span>).<span class="hljs-title function_">startOf</span>(<span class="hljs-string">&#x27;month&#x27;</span>).<span class="hljs-title function_">valueOf</span>()   <span class="hljs-comment">//  上个季度第一个月1号的00:00:00</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">month</span>(<span class="hljs-title function_">moment</span>().<span class="hljs-title function_">month</span>() - <span class="hljs-number">1</span>).<span class="hljs-title function_">endOf</span>(<span class="hljs-string">&#x27;month&#x27;</span>).<span class="hljs-title function_">valueOf</span>()    <span class="hljs-comment">//  上个季度最后一个月最后一天的23:59:59</span><br></code></pre></td></tr></table></figure><h1 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>)<br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;hh:mm:ss a&#x27;</span>)    <span class="hljs-comment">//  格式化时分秒(12小时制)</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;x&#x27;</span>)    <span class="hljs-comment">// 格式化时间戳(以毫秒为单位)</span><br></code></pre></td></tr></table></figure><h1 id="转化为JS原生Date对象"><a href="#转化为JS原生Date对象" class="headerlink" title="转化为JS原生Date对象"></a>转化为JS原生Date对象</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">toDate</span>()<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-title function_">moment</span>())<br></code></pre></td></tr></table></figure><h1 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">year</span>(<span class="hljs-number">2019</span>)       <span class="hljs-comment">//   设置年</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">month</span>(<span class="hljs-number">9</span>)   <span class="hljs-comment">//   设置月（ 0~11, 0 =&gt;1月, 11=&gt;12月）</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">date</span>(<span class="hljs-number">2</span>)     <span class="hljs-comment">//  设置日期</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">isoWeekday</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 设置日期为本周周一</span><br><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;years&#x27;</span>)    <span class="hljs-comment">//  设置下一年</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;months&#x27;</span>)   <span class="hljs-comment">// 设置下一月</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;days&#x27;</span>)    <span class="hljs-comment">//  设置下一天</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;weeks&#x27;</span>)    <span class="hljs-comment">//  设置下一周</span><br><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">subtract</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;years&#x27;</span>)    <span class="hljs-comment">//  设置上一年</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">subtract</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;months&#x27;</span>)   <span class="hljs-comment">// 设置上一月</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">subtract</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;days&#x27;</span>)    <span class="hljs-comment">//  设置上一天</span><br><span class="hljs-title function_">moment</span>().<span class="hljs-title function_">subtract</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;weeks&#x27;</span>)    <span class="hljs-comment">//  设置上一周</span><br></code></pre></td></tr></table></figure><h1 id="比较时间"><a href="#比较时间" class="headerlink" title="比较时间"></a>比较时间</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> startDate = <span class="hljs-title function_">moment</span>().<span class="hljs-title function_">subtract</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;weeks&#x27;</span>)<br><span class="hljs-keyword">let</span> endDate = <span class="hljs-title function_">moment</span>()<br>endDate.<span class="hljs-title function_">diff</span>(startDate)     <span class="hljs-comment">// 返回毫秒数</span><br> <br>endDate.<span class="hljs-title function_">diff</span>(startDate, <span class="hljs-string">&#x27;months&#x27;</span>)     <span class="hljs-comment">// 0</span><br>endDate.<span class="hljs-title function_">diff</span>(startDate, <span class="hljs-string">&#x27;weeks&#x27;</span>)      <span class="hljs-comment">// 1</span><br>endDate.<span class="hljs-title function_">diff</span>(startDate, <span class="hljs-string">&#x27;days&#x27;</span>)       <span class="hljs-comment">// 7</span><br>startDate.<span class="hljs-title function_">diff</span>(endDate, <span class="hljs-string">&#x27;days&#x27;</span>)      <span class="hljs-comment">// -7</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>moment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-router 按需加载的 3 种方式</title>
    <link href="/2019/10/07/2019-10-7-vue-according-to-the-need-to-load/"/>
    <url>/2019/10/07/2019-10-7-vue-according-to-the-need-to-load/</url>
    
    <content type="html"><![CDATA[<h1 id="下列-3-种方式均可将组件打包成单文件异步加载"><a href="#下列-3-种方式均可将组件打包成单文件异步加载" class="headerlink" title="下列 3 种方式均可将组件打包成单文件异步加载"></a>下列 3 种方式均可将组件打包成单文件异步加载</h1><ul><li>vue 异步</li><li>es 提案的 import</li><li>webpack 的 require.ensure</li><li><h2 id="vue-异步"><a href="#vue-异步" class="headerlink" title="vue 异步"></a>vue 异步</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/promisedemo&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;PromiseDemo&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> require([<span class="hljs-string">&#x27;../components/PromiseDemo&#x27;</span>], resolve)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="es-提案-import"><a href="#es-提案-import" class="headerlink" title="es 提案 import"></a>es 提案 import</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs haskell">// 下面<span class="hljs-number">2</span>行代码，没有指定webpackChunkName，每个组件打包成一个js文件。<br><span class="hljs-title">const</span> <span class="hljs-type">ImportFuncDemo1</span> = () =&gt; <span class="hljs-keyword">import</span>(&#x27;../<span class="hljs-title">components</span>/<span class="hljs-type">ImportFuncDemo1</span>&#x27;)<br><span class="hljs-title">const</span> <span class="hljs-type">ImportFuncDemo2</span> = () =&gt; <span class="hljs-keyword">import</span>(&#x27;../<span class="hljs-title">components</span>/<span class="hljs-type">ImportFuncDemo2</span>&#x27;)<br><br>// 下面<span class="hljs-number">2</span>行代码，指定了相同的webpackChunkName，会合并打包成一个js文件。<br>// const <span class="hljs-type">ImportFuncDemo</span> = () =&gt; <span class="hljs-keyword">import</span>(/* <span class="hljs-title">webpackChunkName</span>: &#x27;<span class="hljs-type">ImportFuncDemo</span>&#x27; */ &#x27;../<span class="hljs-title">components</span>/<span class="hljs-type">ImportFuncDemo</span>&#x27;)<br>// const <span class="hljs-type">ImportFuncDemo2</span> = () =&gt; <span class="hljs-keyword">import</span>(/* <span class="hljs-title">webpackChunkName</span>: &#x27;<span class="hljs-type">ImportFuncDemo</span>&#x27; */ &#x27;../<span class="hljs-title">components</span>/<span class="hljs-type">ImportFuncDemo2</span>&#x27;)<br><span class="hljs-title">export</span> <span class="hljs-keyword">default</span> new <span class="hljs-type">Router</span>(&#123;<br>    <span class="hljs-title">routes</span>: [<br>       &#123;<br>            <span class="hljs-title">path</span>: &#x27;/<span class="hljs-title">importfuncdemo1&#x27;</span>,<br>            <span class="hljs-title">name</span>: &#x27;<span class="hljs-type">ImportFuncDemo1</span>&#x27;,<br>            <span class="hljs-title">component</span>: <span class="hljs-type">ImportFuncDemo1</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-title">path</span>: &#x27;/<span class="hljs-title">importfuncdemo2&#x27;</span>,<br>            <span class="hljs-title">name</span>: &#x27;<span class="hljs-type">ImportFuncDemo2</span>&#x27;,<br>            <span class="hljs-title">component</span>: <span class="hljs-type">ImportFuncDemo2</span><br>        &#125;<br>    ]<br>&#125;)<br><br></code></pre></td></tr></table></figure><h2 id="require-ensure"><a href="#require-ensure" class="headerlink" title="require.ensure"></a>require.ensure</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">&#123;<br>    path: <span class="hljs-string">&#x27;/promisedemo&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;PromiseDemo&#x27;</span>,<br>    component: resolve =&gt; <span class="hljs-built_in">require</span>.ensure([], <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> resolve(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../components/PromiseDemo&#x27;</span>)), <span class="hljs-string">&#x27;demo&#x27;</span>)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GIT工作流方式</title>
    <link href="/2018/04/13/2018-4-14-git-worlflow/"/>
    <url>/2018/04/13/2018-4-14-git-worlflow/</url>
    
    <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000002918123">https://segmentfault.com/a/1190000002918123</a><br>前端项目主要分为业务项目以及内部项目，两种类型的项目从发布流程到开发模式差异巨大，并不能使用某种通用的工作流方案，下面根据不同的项目特点引入不同的工作流.<br>集中式工作流<br>适应项目特点：没有稳定的迭代计划，无测试的介入，维护频率较低，开发成员较少， 适应项目范围: 独立组件以及内部工具<br>工作方式：<br>远程分支： 远程分支只有origin&#x2F;master 项目初始化： 本地checkout origin&#x2F;master分支 本地开发： 使用本地master分支开发，push之前先rebase, 提交commit且review通过后直接push到origin&#x2F;master分支 发布方式： 直接使用master分支来执行npm 发布命令，发布后在指定的commit处添加tag标记，tag标记以package.json中的version一致<br>gitflow工作流<br>gitflow工作流通过为功能开发、发布准备和维护分配独立的分支，让发布迭代过程更流畅<br>适应项目特点：完善的测试上线流程, 稳定的迭代, 支持(dev&amp;qa环境)独立部署的项目 使用项目范围：所有业务项目以及公共组件库<br>稳定分支：<br>master分支 存储了正式发布的历史，作为线上环境最新代码<br>develop分支 作为功能的集成分支, 开发环境最新代码</p><p>功能分支<br>由于前端大部分项目开发人员不多，建议以本地dev作为开发分支，如果需要同时开发多个功能而互不影响，可以从origin&#x2F;dev checkout出新的功能分支，功能分支建议以feature-xx命名</p><p>发布分支<br>发布分支用于发布准备的专门分支，使得团队可以在完善当前发布版本的同时，继续开发下个版本的功能。 一旦dev分支上完成一次发布的所有功能(或者说临近上线日期)，就从dev分支上fork一个发布分支。 从这个时间点开始之后新的功能不能再加到这个分支上,这个分支只应该做Bug修复、文档生成和其它面向发布任务。 一旦对外发布的工作都完成了，发布分支合并到master分支并分配一个版本号打好Tag。另外，从新建发布分支以来的做的修改要合并回develop分支。<br>发布分支命名：release-* (建议以日期为标识符)</p><p>hotfix分支<br>hotfix分支用于快速给产品发布版本（production releases）打补丁，让团队可以处理hotfix而不影响其他发布计划，这是唯一可以直接从master分支fork出来的分支。 修复完成，修改应该马上合并回master分支和dev分支（当前的发布分支），master分支应该用新的版本号打好Tag。<br>hotfix分支命名: hotfox-*</p><p>示例<br>创建开发分支<br>第一步从master分支创建dev分支，并push到服务器上<br>git branch dev<br>git push -u origin dev</p><p>开发新功能<br>直接在dev分支上开发，如果需要同时开发多个功能，则从dev分支上创建新的feature分支<br>git checkout -b feature-xxx dev</p><p>git status<br>git add <some-file><br>git commit</p><p>完成功能开发<br>如果是直接在dev分支上开发<br>git pull –rebase<br>git push</p><p>如果是在feature分支上开发，则合并回dev分支<br>git checkout dev<br>git merge feature-xxx<br>git pull –rebase<br>git push</p><p>准备发布<br>从dev分支创建release分支并push到远处仓库<br>git checkout -b release-20170912 dev<br>git push origin release-20170912</p><p>release分支bug修复<br>直接在release分支上提交代码<br>git checkout release-20170912<br>git add some-file<br>git commit -m “xxx”<br>git pull –rebase<br>git push</p><p>完成发布<br>完成发布后，需要合并修改到master分支和develop分支上<br>git checkout master<br>git merge release-0.1<br>git push<br>git checkout develop<br>git merge release-0.1<br>git push<br>git branch -d release-0.1</p><p>合并到master分支后，需要打好tag并push<br>git tag -a 0.1 -m “Initial public release” master<br>git push –tags</p><p>线上bug修复<br>发现线上处理Bug后，需要从master分支上拉出了一个hotfix分支，提交修改以解决问题，然后直接合并回master分支以及dev分支, 最终删除hotfix分支<br>git checkout -b hotfix-xxx master</p><h1 id="Fix-the-bug"><a href="#Fix-the-bug" class="headerlink" title="Fix the bug"></a>Fix the bug</h1><p>git checkout master<br>git merge hotfix-xxx<br>git push</p><p>git checkout dev<br>git merge hotfix-xxx<br>git push<br>git branch -d hotfix-xxx</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript常用方法总结</title>
    <link href="/2017/07/17/2017-07-17-javascript-commonly-used-method/"/>
    <url>/2017/07/17/2017-07-17-javascript-commonly-used-method/</url>
    
    <content type="html"><![CDATA[<h1 id="返回字符串长度，汉字计数为2"><a href="#返回字符串长度，汉字计数为2" class="headerlink" title="返回字符串长度，汉字计数为2"></a>返回字符串长度，汉字计数为2</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">strLength</span>(<span class="hljs-params">str</span>) &#123;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; str.<span class="hljs-property">length</span>; i++) &#123;<br>  <span class="hljs-keyword">if</span> (str.<span class="hljs-title function_">charCodeAt</span>(i) &gt; <span class="hljs-number">255</span>)<br>      a += <span class="hljs-number">2</span>;<span class="hljs-comment">//按照预期计数增加2</span><br>  <span class="hljs-keyword">else</span><br>      a++;<br>&#125;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="获取url中的参数"><a href="#获取url中的参数" class="headerlink" title="获取url中的参数"></a>获取url中的参数</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">GetQueryStringRegExp</span>(<span class="hljs-params">name,url</span>) &#123;<br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;(^|\?|&amp;)&quot;</span> + name + <span class="hljs-string">&quot;=([^&amp;]*)(\s|&amp;|$)&quot;</span>, <span class="hljs-string">&quot;i&quot;</span>);<br><span class="hljs-keyword">if</span> (reg.<span class="hljs-title function_">test</span>(url)) <span class="hljs-keyword">return</span> <span class="hljs-built_in">decodeURIComponent</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$2</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/+/g</span>, <span class="hljs-string">&quot; &quot;</span>)); <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;　<br></code></pre></td></tr></table></figure><h1 id="js绑定事件适用于任何浏览器的元素绑定"><a href="#js绑定事件适用于任何浏览器的元素绑定" class="headerlink" title="js绑定事件适用于任何浏览器的元素绑定"></a>js绑定事件适用于任何浏览器的元素绑定</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">eventBind</span>(<span class="hljs-params">obj, eventType, callBack</span>) &#123;<br>  <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">addEventListener</span>) &#123;<br>      obj.<span class="hljs-title function_">addEventListener</span>(eventType, callBack, <span class="hljs-literal">false</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">attachEvent</span>) &#123;<br>      obj.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;on&#x27;</span> + eventType, callBack);<br>  &#125;<br>  <span class="hljs-keyword">else</span> &#123;<br>      obj[<span class="hljs-string">&#x27;on&#x27;</span> + eventType] = callBack;<br>  &#125;<br>&#125;;<br><span class="hljs-title function_">eventBind</span>(<span class="hljs-variable language_">document</span>, <span class="hljs-string">&#x27;click&#x27;</span>, bodyClick);<br></code></pre></td></tr></table></figure><h1 id="获得当前浏览器JS的版本"><a href="#获得当前浏览器JS的版本" class="headerlink" title="获得当前浏览器JS的版本"></a>获得当前浏览器JS的版本</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getjsversion</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> n = navigator;<br><span class="hljs-keyword">var</span> u = n.<span class="hljs-property">userAgent</span>;<br><span class="hljs-keyword">var</span> apn = n.<span class="hljs-property">appName</span>;<br><span class="hljs-keyword">var</span> v = n.<span class="hljs-property">appVersion</span>;<br><span class="hljs-keyword">var</span> ie = v.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;MSIE &#x27;</span>);<br><span class="hljs-keyword">if</span> (ie &gt; <span class="hljs-number">0</span>)&#123;<br>  apv = <span class="hljs-built_in">parseInt</span>(i = v.<span class="hljs-title function_">substring</span>(ie + <span class="hljs-number">5</span>));<br>  <span class="hljs-keyword">if</span> (apv &gt; <span class="hljs-number">3</span>) &#123;<br>      apv = <span class="hljs-built_in">parseFloat</span>(i);<br>  &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  apv = <span class="hljs-built_in">parseFloat</span>(v);<br>&#125;<br><span class="hljs-keyword">var</span> isie = (apn == <span class="hljs-string">&#x27;Microsoft Internet Explorer&#x27;</span>);<br><span class="hljs-keyword">var</span> ismac = (u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;Mac&#x27;</span>) &gt;= <span class="hljs-number">0</span>);<br><span class="hljs-keyword">var</span> javascriptVersion = <span class="hljs-string">&quot;1.0&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title class_">String</span> &amp;&amp; <span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) &#123;<br>  javascriptVersion = <span class="hljs-string">&#x27;1.1&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (javascriptVersion.<span class="hljs-property">match</span>) &#123;<br>      javascriptVersion = <span class="hljs-string">&#x27;1.2&#x27;</span>;<br>      <span class="hljs-keyword">var</span> tm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>;<br>      <span class="hljs-keyword">if</span> (tm.<span class="hljs-property">setUTCDate</span>) &#123;<br>          javascriptVersion = <span class="hljs-string">&#x27;1.3&#x27;</span>;<br>          <span class="hljs-keyword">if</span> (isie &amp;&amp; ismac &amp;&amp; apv &gt;= <span class="hljs-number">5</span>) javascriptVersion = <span class="hljs-string">&#x27;1.4&#x27;</span>;<br>          <span class="hljs-keyword">var</span> pn = <span class="hljs-number">0</span>;<br>          <span class="hljs-keyword">if</span> (pn.<span class="hljs-property">toPrecision</span>) &#123;<br>              javascriptVersion = <span class="hljs-string">&#x27;1.5&#x27;</span>;<br>              a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>;<br>              <span class="hljs-keyword">if</span> (a.<span class="hljs-property">forEach</span>) &#123;<br>                  javascriptVersion = <span class="hljs-string">&#x27;1.6&#x27;</span>;<br>                  i = <span class="hljs-number">0</span>;<br>                  o = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>;<br>                  tcf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;var e,i=0;try&#123;i=new Iterator(o)&#125;catch(e)&#123;&#125;return i&#x27;</span>);<br>                  i = <span class="hljs-title function_">tcf</span>(o);<br>                  <span class="hljs-keyword">if</span> (i &amp;&amp; i.<span class="hljs-property">next</span>) &#123;<br>                      javascriptVersion = <span class="hljs-string">&#x27;1.7&#x27;</span>;<br>                  &#125;<br>              &#125;<br>          &#125;<br>      &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">return</span> javascriptVersion;<br>&#125;　　<br></code></pre></td></tr></table></figure><h1 id="获取当前点击事件的Object对象"><a href="#获取当前点击事件的Object对象" class="headerlink" title="获取当前点击事件的Object对象"></a>获取当前点击事件的Object对象</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getEvent</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">all</span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>; <span class="hljs-comment">//如果是ie</span><br>&#125;<br>func = getEvent.<span class="hljs-property">caller</span>;<br><span class="hljs-keyword">while</span> (func != <span class="hljs-literal">null</span>) &#123;<br>   <span class="hljs-keyword">var</span> arg0 = func.<span class="hljs-property">arguments</span>[<span class="hljs-number">0</span>];<br>   <span class="hljs-keyword">if</span> (arg0) &#123;<br>       <span class="hljs-keyword">if</span> ((arg0.<span class="hljs-property">constructor</span> == <span class="hljs-title class_">Event</span> || arg0.<span class="hljs-property">constructor</span> == <span class="hljs-title class_">MouseEvent</span>)<br>|| (<span class="hljs-keyword">typeof</span> (arg0) == <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; arg0.<span class="hljs-property">preventDefault</span> &amp;&amp; arg0.<span class="hljs-property">stopPropagation</span>)) &#123;<br>           <span class="hljs-keyword">return</span> arg0;<br>       &#125;<br>   &#125;<br>   func = func.<span class="hljs-property">caller</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;;　<br><br></code></pre></td></tr></table></figure><h1 id="字符串截取方法"><a href="#字符串截取方法" class="headerlink" title="字符串截取方法"></a>字符串截取方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><br><span class="hljs-attr">getCharactersLen</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">charStr, cutCount</span>) &#123;<br>   <span class="hljs-keyword">if</span> (charStr == <span class="hljs-literal">null</span> || charStr == <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>   <span class="hljs-keyword">var</span> totalCount = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">var</span> newStr = <span class="hljs-string">&#x27;&#x27;</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; charStr.<span class="hljs-property">length</span>; i++) &#123;<br>       <span class="hljs-keyword">var</span> c = charStr.<span class="hljs-title function_">charCodeAt</span>(i);<br>       <span class="hljs-keyword">if</span> (c &lt; <span class="hljs-number">255</span> &amp;&amp; c &gt; <span class="hljs-number">0</span>) &#123;<br>           totalCount++;<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           totalCount += <span class="hljs-number">2</span>;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (totalCount &gt;= cutCount) &#123;<br>           newStr += charStr.<span class="hljs-title function_">charAt</span>(i);<br>           <span class="hljs-keyword">break</span>;<br>       &#125;<br>       <span class="hljs-keyword">else</span> &#123;<br>           newStr += charStr.<span class="hljs-title function_">charAt</span>(i);<br>       &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> newStr;<br>&#125;　　<br></code></pre></td></tr></table></figure><h1 id="JS弹出新窗口全屏"><a href="#JS弹出新窗口全屏" class="headerlink" title="JS弹出新窗口全屏"></a>JS弹出新窗口全屏</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><br><span class="hljs-keyword">var</span> tmp = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;about:blank&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;fullscreen=1&quot;</span>)<br>                       tmp.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>                       tmp.<span class="hljs-title function_">resizeTo</span>(screen.<span class="hljs-property">width</span> + <span class="hljs-number">20</span>, screen.<span class="hljs-property">height</span>);<br>                       tmp.<span class="hljs-title function_">focus</span>();<br>                       tmp.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&#x27;http://www.che168.com/pinggu/eva_&#x27;</span> + msgResult.<span class="hljs-property">message</span>[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;.html&#x27;</span>;<br><br><span class="hljs-keyword">var</span> config_ = <span class="hljs-string">&quot;left=0,top=0,width=&quot;</span> + (<span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">Width</span>) + <span class="hljs-string">&quot;,height=&quot;</span> + (<span class="hljs-variable language_">window</span>.<span class="hljs-property">screen</span>.<span class="hljs-property">Height</span>);<br>                       <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;http://www.che168.com/pinggu/eva_&#x27;</span> + msgResult.<span class="hljs-property">message</span>[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;.html&#x27;</span>, <span class="hljs-string">&quot;winHanle&quot;</span>, config_);<br><span class="hljs-comment">//模拟form提交打开新页面</span><br><span class="hljs-keyword">var</span> f = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;form&quot;</span>);<br>                       f.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;action&#x27;</span>, <span class="hljs-string">&#x27;http://www.che168.com/pinggu/eva_&#x27;</span> + msgResult.<span class="hljs-property">message</span>[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;.html&#x27;</span>);<br>                       f.<span class="hljs-property">target</span> = <span class="hljs-string">&#x27;_blank&#x27;</span>;<br>                       <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(f);<br>                       f.<span class="hljs-title function_">submit</span>();　<br></code></pre></td></tr></table></figure><h1 id="全选-x2F-全不选"><a href="#全选-x2F-全不选" class="headerlink" title="全选&#x2F;全不选"></a>全选&#x2F;全不选</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">selectAll</span>(<span class="hljs-params">objSelect</span>) &#123;<br>       <span class="hljs-keyword">if</span> (objSelect.<span class="hljs-property">checked</span> == <span class="hljs-literal">true</span>) &#123;<br>           $(<span class="hljs-string">&quot;input[name=&#x27;chkId&#x27;]&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;checked&quot;</span>, <span class="hljs-literal">true</span>);<br>           $(<span class="hljs-string">&quot;input[name=&#x27;chkAll&#x27;]&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;checked&quot;</span>, <span class="hljs-literal">true</span>);<br>       &#125;<br>       <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (objSelect.<span class="hljs-property">checked</span> == <span class="hljs-literal">false</span>) &#123;<br>           $(<span class="hljs-string">&quot;input[name=&#x27;chkId&#x27;]&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;checked&quot;</span>, <span class="hljs-literal">false</span>);<br>           $(<span class="hljs-string">&quot;input[name=&#x27;chkAll&#x27;]&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;checked&quot;</span>, <span class="hljs-literal">false</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> browser = &#123;<br><span class="hljs-attr">versions</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> u = navigator.<span class="hljs-property">userAgent</span>, app = navigator.<span class="hljs-property">appVersion</span>;<br><span class="hljs-keyword">return</span> &#123;<span class="hljs-comment">//移动终端浏览器版本信息</span><br><span class="hljs-attr">dingTalk</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;DingTalk&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">weibo</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;weibo&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">qq</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;QQ/&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">qqBrowser</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;MQQBrowser&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">weChat</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;MicroMessenger&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">trident</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Trident&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">presto</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Presto&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">webKit</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;AppleWebKit&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">gecko</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Gecko&quot;</span>) &gt; -<span class="hljs-number">1</span> &amp;&amp; u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;KHTML&quot;</span>) == -<span class="hljs-number">1</span>,<br><span class="hljs-attr">mobile</span>: !!u.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/AppleWebKit.*Mobile.*/</span>) || !!u.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/Windows Phone/</span>) || !!u.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/Android/</span>) || !!u.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/MQQBrowser/</span>),<br><span class="hljs-attr">ios</span>: !!u.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>),<br><span class="hljs-attr">android</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Android&quot;</span>) &gt; -<span class="hljs-number">1</span> || u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Linux&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">iPhone</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;iPhone&quot;</span>) &gt; -<span class="hljs-number">1</span> || u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Mac&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">iPad</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;iPad&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">webApp</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Safari&quot;</span>) == -<span class="hljs-number">1</span><br>&#125;;<br>&#125;(),<br><span class="hljs-attr">language</span>: (navigator.<span class="hljs-property">browserLanguage</span> || navigator.<span class="hljs-property">language</span>).<span class="hljs-title function_">toLowerCase</span>()<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="手机类型判断"><a href="#手机类型判断" class="headerlink" title="手机类型判断"></a>手机类型判断</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">BrowserInfo</span> = &#123;<br><span class="hljs-attr">userAgent</span>: navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">toLowerCase</span>(),<br><span class="hljs-attr">isAndroid</span>: <span class="hljs-title class_">Boolean</span>(navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/android/ig</span>)),<br><span class="hljs-attr">isIphone</span>: <span class="hljs-title class_">Boolean</span>(navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/iphone|ipod/ig</span>)),<br><span class="hljs-attr">isIpad</span>: <span class="hljs-title class_">Boolean</span>(navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/ipad/ig</span>)),<br><span class="hljs-attr">isWeixin</span>: <span class="hljs-title class_">Boolean</span>(navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/MicroMessenger/ig</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="判断浏览器"><a href="#判断浏览器" class="headerlink" title="判断浏览器"></a>判断浏览器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getOs</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;MSIE 8.0&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MSIE8&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;MSIE 6.0&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MSIE6&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;MSIE 7.0&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MSIE7&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isFirefox = navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Firefox&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Firefox&quot;</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Chrome&quot;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Chrome&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Other&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JS判断两个日期大小-适合-2012-09-09-与2012-9-9-两种格式的对比"><a href="#JS判断两个日期大小-适合-2012-09-09-与2012-9-9-两种格式的对比" class="headerlink" title="JS判断两个日期大小 适合 2012-09-09 与2012-9-9 两种格式的对比"></a>JS判断两个日期大小 适合 2012-09-09 与2012-9-9 两种格式的对比</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//得到日期值并转化成日期格式，replace(/-/g, &quot;/&quot;)是根据验证表达式把日期转化成长日期格式，这样再进行判断就好判断了</span><br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">ValidateDate</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">var</span> beginDate = $(<span class="hljs-string">&quot;#t_datestart&quot;</span>).<span class="hljs-title function_">val</span>();<br>       <span class="hljs-keyword">var</span> endDate = $(<span class="hljs-string">&quot;#t_dateend&quot;</span>).<span class="hljs-title function_">val</span>();<br>       <span class="hljs-keyword">if</span> (beginDate.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> &amp;&amp; endDate.<span class="hljs-property">length</span>&gt;<span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">var</span> sDate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(beginDate.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/-/g</span>, <span class="hljs-string">&quot;/&quot;</span>));<br>           <span class="hljs-keyword">var</span> eDate= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(endDate.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/-/g</span>, <span class="hljs-string">&quot;/&quot;</span>));<br>           <span class="hljs-keyword">if</span> (sDate &gt; eDate) &#123;<br>               <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;开始日期要小于结束日期&#x27;</span>);<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>           &#125;<br>       &#125;<br>   &#125;　<br></code></pre></td></tr></table></figure><h1 id="移除事件"><a href="#移除事件" class="headerlink" title="移除事件"></a>移除事件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">moveBind</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">objId, eventType, callBack</span>) &#123;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(objId);<br><span class="hljs-keyword">if</span> (obj.<span class="hljs-property">removeEventListener</span>) &#123;<br>   obj.<span class="hljs-title function_">removeEventListener</span>(eventType, callBack, <span class="hljs-literal">false</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">detachEvent</span>) &#123;<br>   obj.<span class="hljs-title function_">detachEvent</span>(<span class="hljs-string">&#x27;on&#x27;</span> + eventType, callBack);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>   obj[<span class="hljs-string">&#x27;on&#x27;</span> + eventType] = <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;　<br></code></pre></td></tr></table></figure><h1 id="回车提交"><a href="#回车提交" class="headerlink" title="回车提交"></a>回车提交</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><br>$(<span class="hljs-string">&quot;id&quot;</span>).<span class="hljs-property">onkeypress</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>event = (event) ? event : ((<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>) ? <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span> : <span class="hljs-string">&quot;&quot;</span>)<br>keyCode = event.<span class="hljs-property">keyCode</span> ? event.<span class="hljs-property">keyCode</span> : (event.<span class="hljs-property">which</span> ? event.<span class="hljs-property">which</span> : event.<span class="hljs-property">charCode</span>);<br><span class="hljs-keyword">if</span> (keyCode == <span class="hljs-number">13</span>) &#123;<br>   $(<span class="hljs-string">&quot;SubmitLogin&quot;</span>).<span class="hljs-title function_">onclick</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JS-执行计时器"><a href="#JS-执行计时器" class="headerlink" title="JS 执行计时器"></a>JS 执行计时器</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><br>timeStart = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br>timesEnd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;time&quot;</span>).<span class="hljs-property">innerHTML</span> = timesEnd - timeStart;<br></code></pre></td></tr></table></figure><h1 id="JS-写Cookie"><a href="#JS-写Cookie" class="headerlink" title="JS 写Cookie"></a>JS 写Cookie</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setCookie</span>(<span class="hljs-params">name, value, expires, path, domain</span>) &#123;<br><span class="hljs-keyword">if</span> (!expires) expires = -<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (!path) path = <span class="hljs-string">&quot;/&quot;</span>;<br><span class="hljs-keyword">var</span> d = <span class="hljs-string">&quot;&quot;</span> + name + <span class="hljs-string">&quot;=&quot;</span> + value;<br><span class="hljs-keyword">var</span> e;<br><span class="hljs-keyword">if</span> (expires &lt; <span class="hljs-number">0</span>) &#123;<br>   e = <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (expires == <span class="hljs-number">0</span>) &#123;<br>   <span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1970</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>   e = <span class="hljs-string">&quot;;expires=&quot;</span> + f.<span class="hljs-title function_">toUTCString</span>();<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>   <span class="hljs-keyword">var</span> now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>   <span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(now.<span class="hljs-title function_">getTime</span>() + expires * <span class="hljs-number">1000</span>);<br>   e = <span class="hljs-string">&quot;;expires=&quot;</span> + f.<span class="hljs-title function_">toUTCString</span>();<br>&#125;<br><span class="hljs-keyword">var</span> dm;<br><span class="hljs-keyword">if</span> (!domain) &#123;<br>   dm = <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>   dm = <span class="hljs-string">&quot;;domain=&quot;</span> + domain;<br>&#125;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = name + <span class="hljs-string">&quot;=&quot;</span> + value + <span class="hljs-string">&quot;;path=&quot;</span> + path + e + dm;<br>&#125;;　　<br></code></pre></td></tr></table></figure><h1 id="JS读Cookie"><a href="#JS读Cookie" class="headerlink" title="JS读Cookie"></a>JS读Cookie</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">readCookie</span>(<span class="hljs-params">name</span>) &#123;<br><span class="hljs-keyword">var</span> nameEQ = name + <span class="hljs-string">&quot;=&quot;</span>;<br><span class="hljs-keyword">var</span> ca = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;;&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ca.<span class="hljs-property">length</span>; i++) &#123;<br>   <span class="hljs-keyword">var</span> c = ca[i];<br>   <span class="hljs-keyword">while</span> (c.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27; &#x27;</span>) c = c.<span class="hljs-title function_">substring</span>(<span class="hljs-number">1</span>, c.<span class="hljs-property">length</span>);<br>   <span class="hljs-keyword">if</span> (c.<span class="hljs-title function_">indexOf</span>(nameEQ) == <span class="hljs-number">0</span>) &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-built_in">decodeURIComponent</span>(c.<span class="hljs-title function_">substring</span>(nameEQ.<span class="hljs-property">length</span>, c.<span class="hljs-property">length</span>))<br>   &#125;<br>&#125; <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Ajax请求"><a href="#Ajax请求" class="headerlink" title="Ajax请求"></a>Ajax请求</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>C.<span class="hljs-property">ajax</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br><span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">this</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = &#123;<br>   <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>   <span class="hljs-attr">async</span>: <span class="hljs-literal">true</span>,<br>   <span class="hljs-attr">contentType</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>,<br>   <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;about:blank&#x27;</span>,<br>   <span class="hljs-attr">data</span>: <span class="hljs-literal">null</span>,<br>   <span class="hljs-attr">success</span>: &#123;&#125;,<br>   <span class="hljs-attr">error</span>: &#123;&#125;<br>&#125;;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">getXmlHttp</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">var</span> xmlHttp;<br>   <span class="hljs-keyword">try</span> &#123;<br>       xmlhttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>   &#125;<br>   <span class="hljs-keyword">catch</span> (e) &#123;<br>       <span class="hljs-keyword">try</span> &#123;<br>           xmlhttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&quot;Msxml2.XMLHTTP&quot;</span>);<br>       &#125;<br>       <span class="hljs-keyword">catch</span> (e) &#123;<br>           xmlHttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>       &#125;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (!xmlhttp) &#123;<br>       <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;您的浏览器不支持AJAX&#x27;</span>);<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br>   <span class="hljs-keyword">return</span> xmlhttp;<br>&#125;;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">send</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>   C.<span class="hljs-title function_">each</span>(self.<span class="hljs-property">options</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">key, val</span>) &#123;<br>       self.<span class="hljs-property">options</span>[key] = (args[key] == <span class="hljs-literal">null</span>) ? val : args[key];<br>   &#125;);<br><br>   <span class="hljs-keyword">var</span> xmlHttp = <span class="hljs-keyword">new</span> self.<span class="hljs-title function_">getXmlHttp</span>();<br>   <span class="hljs-keyword">if</span> (self.<span class="hljs-property">options</span>.<span class="hljs-property">type</span>.<span class="hljs-title function_">toUpperCase</span>() == <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>       xmlHttp.<span class="hljs-title function_">open</span>(self.<span class="hljs-property">options</span>.<span class="hljs-property">type</span>, self.<span class="hljs-property">options</span>.<span class="hljs-property">url</span> + (self.<span class="hljs-property">options</span>.<span class="hljs-property">data</span> == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;&quot;</span> : ((<span class="hljs-regexp">/[?]$/</span>.<span class="hljs-title function_">test</span>(self.<span class="hljs-property">options</span>.<span class="hljs-property">url</span>) ? <span class="hljs-string">&#x27;&amp;&#x27;</span> : <span class="hljs-string">&#x27;?&#x27;</span>) + self.<span class="hljs-property">options</span>.<span class="hljs-property">data</span>)), self.<span class="hljs-property">options</span>.<span class="hljs-property">async</span>);<br>   &#125;<br>   <span class="hljs-keyword">else</span> &#123;<br>       xmlHttp.<span class="hljs-title function_">open</span>(self.<span class="hljs-property">options</span>.<span class="hljs-property">type</span>, self.<span class="hljs-property">options</span>.<span class="hljs-property">url</span>, self.<span class="hljs-property">options</span>.<span class="hljs-property">async</span>);<br>       xmlHttp.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;Content-Length&#x27;</span>, self.<span class="hljs-property">options</span>.<span class="hljs-property">data</span>.<span class="hljs-property">length</span>);<br>   &#125;<br>   xmlHttp.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, self.<span class="hljs-property">options</span>.<span class="hljs-property">contentType</span>);<br>   xmlHttp.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">if</span> (xmlHttp.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span>) &#123;<br>           <span class="hljs-keyword">if</span> (xmlHttp.<span class="hljs-property">status</span> == <span class="hljs-number">200</span> || xmlHttp.<span class="hljs-property">status</span> == <span class="hljs-number">0</span>) &#123;<br>               <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> self.<span class="hljs-property">options</span>.<span class="hljs-property">success</span> == <span class="hljs-string">&#x27;function&#x27;</span>) self.<span class="hljs-property">options</span>.<span class="hljs-title function_">success</span>(xmlHttp.<span class="hljs-property">responseText</span>);<br>               xmlHttp = <span class="hljs-literal">null</span>;<br>           &#125;<br>           <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> self.<span class="hljs-property">options</span>.<span class="hljs-property">error</span> == <span class="hljs-string">&#x27;function&#x27;</span>) self.<span class="hljs-property">options</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Server Status: &#x27;</span> + xmlHttp.<span class="hljs-property">status</span>);<br>           &#125;<br>       &#125;<br>   &#125;;<br><br>   xmlHttp.<span class="hljs-title function_">send</span>(self.<span class="hljs-property">options</span>.<span class="hljs-property">type</span>.<span class="hljs-title function_">toUpperCase</span>() == <span class="hljs-string">&#x27;POST&#x27;</span> ? self.<span class="hljs-property">options</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">toString</span>() : <span class="hljs-literal">null</span>);<br>&#125;;<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">send</span>();<br>&#125;;　　<br></code></pre></td></tr></table></figure><h1 id="JS-StringBuilder-用法"><a href="#JS-StringBuilder-用法" class="headerlink" title="JS StringBuilder 用法"></a>JS StringBuilder 用法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">StringBuilder</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">strings</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>;<br>&#125;;<br><span class="hljs-title class_">StringBuilder</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">append</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">str</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">strings</span>.<span class="hljs-title function_">push</span>(str);<br>&#125;;<br><span class="hljs-title class_">StringBuilder</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">strings</span>.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="JS加载到顶部LoadJS"><a href="#JS加载到顶部LoadJS" class="headerlink" title="JS加载到顶部LoadJS"></a>JS加载到顶部LoadJS</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">loadJS</span> (url, fn) &#123;<br>   <span class="hljs-keyword">var</span> ss = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;script&#x27;</span>),<br>       loaded = <span class="hljs-literal">false</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, len = ss.<span class="hljs-property">length</span>; i &lt; len; i++) &#123;<br>       <span class="hljs-keyword">if</span> (ss[i].<span class="hljs-property">src</span> &amp;&amp; ss[i].<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;src&#x27;</span>) == url) &#123;<br>           loaded = <span class="hljs-literal">true</span>;<br>           <span class="hljs-keyword">break</span>;<br>       &#125;<br>   &#125;<br>   <span class="hljs-keyword">if</span> (loaded) &#123;<br>       <span class="hljs-keyword">if</span> (fn &amp;&amp; <span class="hljs-keyword">typeof</span> fn != <span class="hljs-string">&#x27;undefined&#x27;</span> &amp;&amp; fn <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>) <span class="hljs-title function_">fn</span>();<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br>   <span class="hljs-keyword">var</span> s = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>),<br>       b = <span class="hljs-literal">false</span>;<br>   s.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;type&#x27;</span>, <span class="hljs-string">&#x27;text/javascript&#x27;</span>);<br>   s.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;src&#x27;</span>, url);<br>   s.<span class="hljs-property">onload</span> = s.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">if</span> (!b &amp;&amp; (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span> == <span class="hljs-string">&#x27;loaded&#x27;</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">readyState</span> == <span class="hljs-string">&#x27;complete&#x27;</span>)) &#123;<br>           b = <span class="hljs-literal">true</span>;<br>           <span class="hljs-keyword">if</span> (fn &amp;&amp; <span class="hljs-keyword">typeof</span> fn != <span class="hljs-string">&#x27;undefined&#x27;</span> &amp;&amp; fn <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>) <span class="hljs-title function_">fn</span>();<br>       &#125;<br>   &#125;;<br>   <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;head&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(s);<br>&#125;<br><span class="hljs-attr">bind</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">objId, eventType, callBack</span>) &#123;  <span class="hljs-comment">//适用于任何浏览器的绑定</span><br>   <span class="hljs-keyword">var</span> obj = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(objId);<br>   <span class="hljs-keyword">if</span> (obj.<span class="hljs-property">addEventListener</span>) &#123;<br>       obj.<span class="hljs-title function_">addEventListener</span>(eventType, callBack, <span class="hljs-literal">false</span>);<br>   &#125;<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">attachEvent</span>) &#123;<br>       obj.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;on&#x27;</span> + eventType, callBack);<br>   &#125;<br>   <span class="hljs-keyword">else</span> &#123;<br>       obj[<span class="hljs-string">&#x27;on&#x27;</span> + eventType] = callBack;<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">JSLoad</span> (args) &#123;<br>   s = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;script&quot;</span>);<br>   s.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;text/javascript&quot;</span>);<br>   s.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;src&quot;</span>, args.<span class="hljs-property">url</span>);<br>   s.<span class="hljs-property">onload</span> = s.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">if</span> (!s.<span class="hljs-property">readyState</span> || s.<span class="hljs-property">readyState</span> == <span class="hljs-string">&quot;loaded&quot;</span> || s.<span class="hljs-property">readyState</span> == <span class="hljs-string">&quot;complete&quot;</span>) &#123;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> args.<span class="hljs-property">callback</span> == <span class="hljs-string">&quot;function&quot;</span>) args.<span class="hljs-title function_">callback</span>(<span class="hljs-variable language_">this</span>, args);<br>           s.<span class="hljs-property">onload</span> = s.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-literal">null</span>;<br>           <span class="hljs-keyword">try</span> &#123;<br>               s.<span class="hljs-property">parentNode</span> &amp;&amp; s.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(s);<br>           &#125; <span class="hljs-keyword">catch</span> (e) &#123; &#125;<br>       &#125;<br>   &#125;;<br>   <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;head&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(s);<br>&#125;　　<br></code></pre></td></tr></table></figure><h1 id="清空LoadJS加载到顶部的js引用"><a href="#清空LoadJS加载到顶部的js引用" class="headerlink" title="清空LoadJS加载到顶部的js引用"></a>清空LoadJS加载到顶部的js引用</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ClearHeadJs</span>  (src) &#123;<br>   <span class="hljs-keyword">var</span> js = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;head&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">children</span>;<br>   <span class="hljs-keyword">var</span> obj = <span class="hljs-literal">null</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; js.<span class="hljs-property">length</span>; i++) &#123;<br>       <span class="hljs-keyword">if</span> (js[i].<span class="hljs-property">tagName</span>.<span class="hljs-title function_">toLowerCase</span>() == <span class="hljs-string">&quot;script&quot;</span> &amp;&amp; js[i].<span class="hljs-property">attributes</span>[<span class="hljs-string">&#x27;src&#x27;</span>].<span class="hljs-property">value</span>.<span class="hljs-title function_">indexOf</span>(src) &gt; <span class="hljs-number">0</span>) &#123;<br>           obj = js[i];<br>       &#125;<br>   &#125;<br>   <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;head&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">removeChild</span>(obj);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JS替换非法字符主要用在密码验证上出现的特殊字符"><a href="#JS替换非法字符主要用在密码验证上出现的特殊字符" class="headerlink" title="JS替换非法字符主要用在密码验证上出现的特殊字符"></a>JS替换非法字符主要用在密码验证上出现的特殊字符</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">URLencode</span>(<span class="hljs-params">sStr</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">escape</span>(sStr).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/+/g</span>, <span class="hljs-string">&#x27;%2B&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&quot;/g</span>, <span class="hljs-string">&#x27;%22&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&#x27;/g</span>, <span class="hljs-string">&#x27;%27&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-comment">///g, &#x27;%2F&#x27;);</span><br>&#125;;　<br></code></pre></td></tr></table></figure><h1 id="按Ctrl-Entert-直接提交表单"><a href="#按Ctrl-Entert-直接提交表单" class="headerlink" title="按Ctrl + Entert 直接提交表单"></a>按Ctrl + Entert 直接提交表单</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">onkeydown</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">evt</span>) &#123;<br>evt = evt ? evt : (<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span> ? <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span> : <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-number">13</span> == evt.<span class="hljs-property">keyCode</span> &amp;&amp; evt.<span class="hljs-property">ctrlKey</span>) &#123;<br><br>   evt.<span class="hljs-property">returnValue</span> = <span class="hljs-literal">false</span>;<br>   evt.<span class="hljs-property">cancel</span> = <span class="hljs-literal">true</span>;<br>   <span class="hljs-title class_">PostData</span>();<br>&#125;<br>&#125;;　<br></code></pre></td></tr></table></figure><h1 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">GetCurrentDate</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>   <span class="hljs-keyword">var</span> y = d.<span class="hljs-title function_">getYear</span>()+<span class="hljs-number">1900</span>;<br>   month = <span class="hljs-title function_">add_zero</span>(d.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>),<br>   days = <span class="hljs-title function_">add_zero</span>(d.<span class="hljs-title function_">getDate</span>()),<br>   hours = <span class="hljs-title function_">add_zero</span>(d.<span class="hljs-title function_">getHours</span>());<br>   minutes = <span class="hljs-title function_">add_zero</span>(d.<span class="hljs-title function_">getMinutes</span>()),<br>   seconds = <span class="hljs-title function_">add_zero</span>(d.<span class="hljs-title function_">getSeconds</span>());<br>   <span class="hljs-keyword">var</span> str = y + <span class="hljs-string">&#x27;-&#x27;</span> + month + <span class="hljs-string">&#x27;-&#x27;</span> + days + <span class="hljs-string">&#x27; &#x27;</span> + hours + <span class="hljs-string">&#x27;:&#x27;</span> + minutes + <span class="hljs-string">&#x27;:&#x27;</span> + seconds;<br>   <span class="hljs-keyword">return</span> str;<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add_zero</span>(<span class="hljs-params">temp</span>) &#123;<br>   <span class="hljs-keyword">if</span> (temp &lt; <span class="hljs-number">10</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0&quot;</span> + temp;<br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> temp;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Js去掉空格方法"><a href="#Js去掉空格方法" class="headerlink" title="Js去掉空格方法"></a>Js去掉空格方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">Trim</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)<br>&#123; <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(^s*)|(s*$)/g</span>, <span class="hljs-string">&quot;&quot;</span>); &#125;<br><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">LTrim</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)<br>&#123;<span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(^s*)/g</span>, <span class="hljs-string">&quot;&quot;</span>);&#125;<br><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">RTrim</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)<br>&#123;<span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(s*$)/g</span>, <span class="hljs-string">&quot;&quot;</span>);&#125;　<br></code></pre></td></tr></table></figure><h1 id="Js动态移除head里的js引用"><a href="#Js动态移除head里的js引用" class="headerlink" title="Js动态移除head里的js引用"></a>Js动态移除head里的js引用</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">ClearHeadJs</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">src</span>) &#123;<br><span class="hljs-keyword">var</span> js = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;head&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">children</span>;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; js.<span class="hljs-property">length</span>; i++) &#123;<br>   <span class="hljs-keyword">if</span> (js[i].<span class="hljs-property">tagName</span>.<span class="hljs-title function_">toLowerCase</span>() == <span class="hljs-string">&quot;script&quot;</span> &amp;&amp; js[i].<span class="hljs-property">attributes</span>[<span class="hljs-string">&#x27;src&#x27;</span>].<span class="hljs-property">value</span>.<span class="hljs-title function_">indexOf</span>(src) &gt; <span class="hljs-number">0</span>) &#123;<br>       obj = js[i];<br>   &#125;<br>&#125;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;head&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">removeChild</span>(obj);<br>&#125;;　<br><br></code></pre></td></tr></table></figure><h1 id="动态加载js脚本文件"><a href="#动态加载js脚本文件" class="headerlink" title="动态加载js脚本文件"></a>动态加载js脚本文件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">async</span>(<span class="hljs-params">src, callBack</span>) &#123;<br><span class="hljs-keyword">var</span> $body = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">EleScript</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;script&quot;</span>);<br><span class="hljs-title class_">EleScript</span>.<span class="hljs-property">src</span> = src;<br>$body.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title class_">EleScript</span>);<br><span class="hljs-keyword">if</span> (callBack) &#123;<br><span class="hljs-title class_">EleScript</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br><span class="hljs-title function_">callBack</span>(<span class="hljs-literal">null</span>, e);<br>&#125;, <span class="hljs-literal">false</span>);<br>&#125;<br>$body.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title class_">EleScript</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="手机分享页唤起APP"><a href="#手机分享页唤起APP" class="headerlink" title="手机分享页唤起APP"></a>手机分享页唤起APP</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//操作系统</span><br><span class="hljs-keyword">var</span> browser = &#123;<br><span class="hljs-attr">versions</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> u = navigator.<span class="hljs-property">userAgent</span>, app = navigator.<span class="hljs-property">appVersion</span>;<br><span class="hljs-keyword">return</span> &#123;<span class="hljs-comment">//移动终端浏览器版本信息</span><br><span class="hljs-attr">dingTalk</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;DingTalk&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">weibo</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;weibo&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">qq</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;QQ/&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">qqBrowser</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;MQQBrowser&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">weChat</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;MicroMessenger&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">trident</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Trident&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">presto</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Presto&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">webKit</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;AppleWebKit&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">gecko</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Gecko&quot;</span>) &gt; -<span class="hljs-number">1</span> &amp;&amp; u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;KHTML&quot;</span>) == -<span class="hljs-number">1</span>,<br><span class="hljs-attr">mobile</span>: !!u.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/AppleWebKit.*Mobile.*/</span>) || !!u.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/Windows Phone/</span>) || !!u.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/Android/</span>) || !!u.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/MQQBrowser/</span>),<br><span class="hljs-attr">ios</span>: !!u.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>),<br><span class="hljs-attr">android</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Android&quot;</span>) &gt; -<span class="hljs-number">1</span> || u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Linux&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">iPhone</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;iPhone&quot;</span>) &gt; -<span class="hljs-number">1</span> || u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Mac&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">iPad</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;iPad&quot;</span>) &gt; -<span class="hljs-number">1</span>,<br><span class="hljs-attr">webApp</span>: u.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Safari&quot;</span>) == -<span class="hljs-number">1</span><br>&#125;;<br>&#125;(),<br><span class="hljs-attr">language</span>: (navigator.<span class="hljs-property">browserLanguage</span> || navigator.<span class="hljs-property">language</span>).<span class="hljs-title function_">toLowerCase</span>()<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">OpenApp</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title class_">IsPC</span>()) &#123;<br><span class="hljs-keyword">if</span> (browser.<span class="hljs-property">versions</span>.<span class="hljs-property">weChat</span> || browser.<span class="hljs-property">versions</span>.<span class="hljs-property">qq</span> || browser.<span class="hljs-property">versions</span>.<span class="hljs-property">dingTalk</span> || browser.<span class="hljs-property">versions</span>.<span class="hljs-property">weibo</span>) &#123;<br><span class="hljs-title class_">ShowGuide</span>();<br><span class="hljs-keyword">if</span> (browser.<span class="hljs-property">versions</span>.<span class="hljs-property">ios</span>) &#123;<br><span class="hljs-title class_">ShowIosGuide</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title class_">ShowAdrGuide</span>();<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//打开APP</span><br><span class="hljs-keyword">if</span> (navigator.<span class="hljs-property">onLine</span>) &#123;<br><span class="hljs-comment">//&#x27;&amp;usr=&#x27; + getURLParameter(&quot;openid&quot;) +</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;fivekilometres://articleDetail?id=&quot;</span> + <span class="hljs-title function_">getURLParameter</span>(<span class="hljs-string">&quot;articleId&quot;</span>) + <span class="hljs-string">&quot;&amp;type=&quot;</span> + <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;contentType&quot;</span>) + <span class="hljs-string">&quot;&amp;sharer=&quot;</span> + <span class="hljs-title function_">getURLParameter</span>(<span class="hljs-string">&quot;sharer&quot;</span>);<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// alert(&quot;即将上线，敬请期待&quot;);</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-title function_">download</span>();<br>&#125;, <span class="hljs-number">2000</span>);<br>&#125;, <span class="hljs-number">3000</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请查看您的网络链接&quot;</span>);<br>&#125;<br><span class="hljs-comment">//如果打开APP超时就提示用户下载</span><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-title function_">download</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express保存base64图片</title>
    <link href="/2017/07/07/2017-07-07-NodeJS-save-png/"/>
    <url>/2017/07/07/2017-07-07-NodeJS-save-png/</url>
    
    <content type="html"><![CDATA[<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;image&quot;</span> <span class="hljs-attribute">accept</span>=<span class="hljs-string">&quot;image/*&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;上传图片&quot;</span>&gt;<br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><ul><li>使用 FileReader 将本地图片解析为base64格式</li><li>使用 FormData 作为载体将base64图片数据传到后台<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fileInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;input&#x27;</span>)[<span class="hljs-number">0</span>],<br>    submitButton = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;input&#x27;</span>)[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">var</span> fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(),<br>    imgData;<br>    <br>    <span class="hljs-comment">//获取本地图片</span><br>    fileInput.<span class="hljs-title function_">addEventListaner</span>(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">var</span> file = fileInput.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];<br>        fileReader.<span class="hljs-title function_">readAsDataURL</span>(file);<br>    &#125;<br>    <br>    <span class="hljs-comment">//将base64格式的图片数据存到imgData</span><br>    fileReader.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;onload&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        imgData = fileReader.<span class="hljs-property">result</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">//Ajax上传图片数据到后台</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">uploadImg</span>(<span class="hljs-params"></span>)&#123;<br>    <br>        <span class="hljs-comment">//FormData保存图片信息</span><br>        <span class="hljs-keyword">var</span> formData =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>(),<br>            xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>        <br>        formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;imgData&#x27;</span>, imgData);<br>        <br>        xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;/uploadImage&#x27;</span>, <span class="hljs-literal">true</span>);<br>        xhr.<span class="hljs-title function_">send</span>(formData);<br>    &#125;<br>    <br>    submitButton.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">uploadImg</span>();<br>    &#125;<br>    <br></code></pre></td></tr></table></figure><h3 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h3></li><li>使用Multipaty解析表单<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-comment">//引入Multiparty解析表单</span><br><span class="hljs-keyword">var</span> multiparty = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;multiparty&#x27;</span>);<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs "><br>router.post(&#x27;/uploadImage&#x27;, function(req, res)&#123;<br>var form = new multiparty.Form();<br>form.parse(req, function(err, fields, files)&#123;<br>var imgDatas = fields.editImg;<br>var imgList = [];<br><br>for(let i = 0; i &lt; imgDatas.length; i++)&#123;<br>elem = imgDatas[i].replace(/^data:image\/\w+;base64,/, &#x27;&#x27;);<br>var dataBuffer = new Buffer(elem, &#x27;base64&#x27;);<br>var imgName = &#x27;img&#x27; + Date.now() + i + &#x27;.png&#x27;;<br>//同步写入图片文件<br>fs.writeFileSync(path.join(__dirname, &#x27;../public/tempImg/&#x27;) + imgName , dataBuffer);<br>imgList.push(imgName)<br>&#125;<br>//返回图片名数组<br>                res.send(imgList);<br>&#125;)<br><br>&#125;);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>NodeJS</tag>
      
      <tag>Express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FormData异步上传文件</title>
    <link href="/2017/07/07/2017-07-07-HTML5-upload-file/"/>
    <url>/2017/07/07/2017-07-07-HTML5-upload-file/</url>
    
    <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h1 id="一、创建FormData放入待上传文件"><a href="#一、创建FormData放入待上传文件" class="headerlink" title="一、创建FormData放入待上传文件"></a>一、创建FormData放入待上传文件</h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//准备FormData对象</span><br><span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> FormData(),<br>    uploadFile = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;file&#x27;</span>);<br>    <br><span class="hljs-comment">//将文件放入FormData对象中    </span><br>formData.append(<span class="hljs-string">&#x27;file&#x27;</span>, uploadFile.files[<span class="hljs-number">0</span>]);<br></code></pre></td></tr></table></figure><span id="more"></span><h1 id="二、通过xhr发送FormData数据到服务器，实现文件上传"><a href="#二、通过xhr发送FormData数据到服务器，实现文件上传" class="headerlink" title="二、通过xhr发送FormData数据到服务器，实现文件上传"></a>二、通过xhr发送FormData数据到服务器，实现文件上传</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建xhr对象</span><br><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br><br><span class="hljs-comment">//监听文件上传进度</span><br>xhr.<span class="hljs-property">upload</span>.<span class="hljs-property">onprogress</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">evt</span>)&#123;<br>    <span class="hljs-comment">//lengthComputabel: 文件长度是否可计算</span><br>    <span class="hljs-keyword">if</span>(evt.<span class="hljs-property">lengthComputable</span>)&#123;<br>        <span class="hljs-comment">//evt.loaded: 已下载的字节数</span><br>        <span class="hljs-comment">//evt.total: 文件总字节数</span><br>        <span class="hljs-keyword">var</span> percent = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(evt.<span class="hljs-property">loaded</span>*<span class="hljs-number">100</span>/evt.<span class="hljs-property">total</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(percent);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//监听文件传输开始    </span><br>xhr.<span class="hljs-property">onloadstart</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">evt）&#123;</span><br><span class="hljs-params">        xhr.abort() //终止上传</span><br><span class="hljs-params">&#125;</span><br><span class="hljs-params"></span><br><span class="hljs-params"><span class="hljs-comment">//监听ajax成功完成事件</span></span><br><span class="hljs-params">xhr.onload = <span class="hljs-keyword">function</span>(evt)&#123;</span><br><span class="hljs-params">    ...</span><br><span class="hljs-params">&#125;</span><br><span class="hljs-params"></span><br><span class="hljs-params"><span class="hljs-comment">//监听ajax错误事件    </span></span><br><span class="hljs-params">xhr.onerror = <span class="hljs-keyword">function</span>(evt)&#123;</span><br><span class="hljs-params">    ...</span><br><span class="hljs-params">&#125;</span><br><span class="hljs-params"></span><br><span class="hljs-params"><span class="hljs-comment">//监听ajax被中止事件</span></span><br><span class="hljs-params">xhr.onabort = <span class="hljs-keyword">function</span>(evt)&#123;</span><br><span class="hljs-params">    ...</span><br><span class="hljs-params">&#125;</span><br><span class="hljs-params"></span><br><span class="hljs-params"><span class="hljs-comment">//监听传输结束事件: 不管成功或者失败都会触发</span></span><br><span class="hljs-params">xhr.onloaded = <span class="hljs-keyword">function</span>(evt)&#123;</span><br><span class="hljs-params">    ...</span><br><span class="hljs-params">&#125;   </span><br><span class="hljs-params">   </span><br><span class="hljs-params"><span class="hljs-comment">//*发起ajax请求数据</span></span><br><span class="hljs-params">xhr.open(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;/url&#x27;</span>, <span class="hljs-literal">true</span>);</span><br><span class="hljs-params">xhr.send(formData);</span><br><span class="hljs-params"></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>HTML5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS中的模块化演变</title>
    <link href="/2017/07/07/2017-07-07-JS-module-note/"/>
    <url>/2017/07/07/2017-07-07-JS-module-note/</url>
    
    <content type="html"><![CDATA[<p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fh7u9d2ixbj308c08bdfs.jpg"></p><h2 id="为什么有模块概念"><a href="#为什么有模块概念" class="headerlink" title="为什么有模块概念"></a>为什么有模块概念</h2><p>理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。</p><p>但是，Javascript不是一种模块化编程语言，在es6以前，它是不支持”类”（class），所以也就没有”模块”（module）了。</p><span id="more"></span><h2 id="require时代"><a href="#require时代" class="headerlink" title="require时代"></a>require时代</h2><p>Javascript社区做了很多努力，在现有的运行环境中，实现”模块”的效果。</p><h3 id="原始写法"><a href="#原始写法" class="headerlink" title="原始写法"></a>原始写法</h3><p>模块就是实现特定功能的一组方法。<br>只要把不同的函数（以及记录状态的变量）简单地放在一起，就算是一个模块。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;<br>　<span class="hljs-comment">//...</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span>&#123;<br>　<span class="hljs-comment">//...　　</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面的函数m1()和m2()，组成一个模块。使用的时候，直接调用就行了。</p><p>这种做法的缺点很明显：”污染”了全局变量，无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系。</p><h3 id="对象写法"><a href="#对象写法" class="headerlink" title="对象写法"></a>对象写法</h3><p>为了解决上面的缺点，可以把模块写成一个对象，所有的模块成员都放到这个对象里面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> module1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(&#123;<br>  _count : <span class="hljs-number">0</span>,<br>　m1 : <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>　　<span class="hljs-comment">//...</span><br>　&#125;,<br>　m2 : <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>　　<span class="hljs-comment">//...</span><br>　&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>上面的函数m1()和m2(），都封装在module1对象里。使用的时候，就是调用这个对象的属性</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">module<span class="hljs-number">1.</span><span class="hljs-name">m1</span><span class="hljs-comment">()</span>;<br></code></pre></td></tr></table></figure><p>这样的写法会暴露所有模块成员，内部状态可以被外部改写。比如，外部代码可以直接改变内部计数器的值。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">module._count</span> = <span class="hljs-number">1</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="立即执行函数写法"><a href="#立即执行函数写法" class="headerlink" title="立即执行函数写法"></a>立即执行函数写法</h3><p>使用”立即执行函数”（Immediately-Invoked Function Expression，IIFE），可以达到不暴露私有成员的目的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> _count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> m1 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(_count)<br>    &#125;<br>    <span class="hljs-keyword">var</span> m2 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(_count + <span class="hljs-number">1</span>)<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">m1</span>: m1,<br>        <span class="hljs-attr">m2</span>: m2<br>    &#125;<br>&#125;)()<br></code></pre></td></tr></table></figure><p>使用上面的写法，外部代码无法读取内部的_count变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">　　<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">_count</span>); <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><p>module就是Javascript模块的基本写法。</p><h2 id="主流模块规范"><a href="#主流模块规范" class="headerlink" title="主流模块规范"></a>主流模块规范</h2><p>在es6以前，还没有提出一套官方的规范,从社区和框架推广程度而言,目前通行的javascript模块规范有两种：CommonJS 和 AMD</p><h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><p><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fh7n4us7v0j30dw043aa0.jpg"></p><p>2009年，美国程序员Ryan Dahl创造了node.js项目，将javascript语言用于服务器端编程。</p><p>这标志”Javascript模块化编程”正式诞生。前端的复杂程度有限，没有模块也是可以的，但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。</p><p>node编程中最重要的思想之一就是模块，而正是这个思想，让JavaScript的大规模工程成为可能。模块化编程在js界流行，也是基于此，随后在浏览器端，requirejs和seajs之类的工具包也出现了，可以说在对应规范下，require统治了ES6之前的所有模块化编程，即使现在，在ES6 module被完全实现之前，还是这样。</p><p>在CommonJS中,暴露模块使用module.exports和exports，很多人不明白暴露对象为什么会有两个,后面会介绍区别</p><p>在CommonJS中，有一个全局性方法require()，用于加载模块。假定有一个数学模块math.js，就可以像下面这样加载。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">var math</span> = require(<span class="hljs-string">&#x27;math&#x27;</span>);<br></code></pre></td></tr></table></figure><p>然后，就可以调用模块提供的方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp">　<span class="hljs-keyword">var</span> math = require(<span class="hljs-string">&#x27;math&#x27;</span>);<br>　math.<span class="hljs-keyword">add</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>); <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><p>正是由于CommonJS 使用的require方式的推动，才有了后面的AMD、CMD 也采用的require方式来引用模块的风格</p><h3 id="AMD规范"><a href="#AMD规范" class="headerlink" title="AMD规范"></a>AMD规范</h3><p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fh7u7byz4xj30dh06e75d.jpg"></p><p>有了服务器端模块以后，很自然地，大家就想要客户端模块。而且最好两者能够兼容，一个模块不用修改，在服务器和浏览器都可以运行。</p><p>但是，由于一个重大的局限，使得CommonJS规范不适用于浏览器环境。还是上一节的代码，如果在浏览器中运行，会有一个很大的问题</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">var <span class="hljs-built_in">math</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;math&#x27;</span>);<br><span class="hljs-built_in">math</span>.add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>第二行math.add(2, 3)，在第一行require(‘math’)之后运行，因此必须等math.js加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p><p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。<br>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是AMD规范诞生的背景。</p><p>AMD是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p><p>模块必须采用特定的define()函数来定义。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">define</span><span class="hljs-params">(id?, dependencies?, factory)</span></span><br></code></pre></td></tr></table></figure><ul><li>id:字符串，模块名称(可选)</li><li>dependencies: 是我们要载入的依赖模块(可选)，使用相对路径。,注意是数组格式</li><li>factory: 工厂方法，返回一个模块函数</li></ul><p>如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// math.js</span><br>　　define(<span class="hljs-keyword">function</span> <span class="hljs-params">()</span>&#123;<br>　　　　<span class="hljs-keyword">var</span> add = <span class="hljs-keyword">function</span> <span class="hljs-params">(x,y)</span>&#123;<br>　　　　　　<span class="hljs-keyword">return</span> x+y;<br>　　　　&#125;;<br>　　　　<span class="hljs-keyword">return</span> &#123;<br>　　　　　　add: add<br>　　　　&#125;;<br>　　&#125;);<br></code></pre></td></tr></table></figure><p>如果这个模块还依赖其他模块，那么define()函数的第一个参数，必须是一个数组，指明该模块的依赖性。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">define([<span class="hljs-symbol">&#x27;Lib</span>&#x27;], <span class="hljs-keyword">function</span>(Lib)&#123;<br>　　　　<span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>()&#123;<br>　　　　　　Lib.doSomething();<br>　　　　&#125;<br>　　　　<span class="hljs-keyword">return</span> &#123;<br>　　　　　　foo : <span class="hljs-type">foo</span><br>　　　　&#125;;<br>　　&#125;);<br></code></pre></td></tr></table></figure><p>当require()函数加载上面这个模块的时候，就会先加载Lib.js文件。</p><p>AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-keyword">require</span>([<span class="hljs-class"><span class="hljs-keyword">module</span>], <span class="hljs-title">callback</span>);</span><br></code></pre></td></tr></table></figure><p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数callback，则是加载成功之后的回调函数。如果将前面的代码改写成AMD形式，就是下面这样：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;math&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(math)</span></span> &#123;<br>　<span class="hljs-built_in">math</span>.add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>math.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。</p><p>目前，主要有两个Javascript库实现了AMD规范：<a href="http://requirejs.org/">require.js</a>和<a href="http://cujojs.com/">curl.js</a>。</p><h3 id="CMD规范"><a href="#CMD规范" class="headerlink" title="CMD规范"></a>CMD规范</h3><p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fh7u5xcnw7j305k046wed.jpg"></p><p>CMD (Common Module Definition), 是seajs推崇的规范，CMD则是依赖就近，用的时候再require。它写起来是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;<br>   <span class="hljs-keyword">var</span> clock = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clock&#x27;</span>);<br>   clock.<span class="hljs-title function_">start</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p>CMD与AMD一样，也是采用特定的define()函数来定义,用require方式来引用模块</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">define</span><span class="hljs-params">(id?, dependencies?, factory)</span></span><br></code></pre></td></tr></table></figure><ul><li>id:字符串，模块名称(可选)</li><li>dependencies: 是我们要载入的依赖模块(可选)，使用相对路径。,注意是数组格式</li><li>factory: 工厂方法，返回一个模块函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;hello&#x27;</span>, [<span class="hljs-string">&#x27;jquery&#x27;</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;<br><br>  <span class="hljs-comment">// 模块代码</span><br><br>&#125;);<br></code></pre></td></tr></table></figure><p>如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;<br>  <span class="hljs-comment">// 模块代码</span><br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>注意：带 id 和 dependencies 参数的 define 用法不属于 CMD 规范，而属于 Modules&#x2F;Transport 规范。</p></blockquote><h2 id="CMD与AMD区别"><a href="#CMD与AMD区别" class="headerlink" title="CMD与AMD区别"></a>CMD与AMD区别</h2><p>AMD和CMD最大的区别是对依赖模块的执行时机处理不同，而不是加载的时机或者方式不同，二者皆为异步加载模块。</p><p>AMD依赖前置，js可以方便知道依赖模块是谁，立即加载；</p><p>而CMD就近依赖，需要使用把模块变为字符串解析一遍才知道依赖了那些模块，这也是很多人诟病CMD的一点，牺牲性能来带来开发的便利性，实际上解析模块用的时间短到可以忽略。</p><h2 id="现阶段的标准"><a href="#现阶段的标准" class="headerlink" title="现阶段的标准"></a>现阶段的标准</h2><p><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fh7uc992vaj30go0a074e.jpg"></p><p>ES6标准发布后，module成为标准，标准使用是以export指令导出接口，以import引入模块，但是在我们一贯的node模块中，我们依然采用的是CommonJS规范，使用require引入模块，使用module.exports导出接口。</p><h2 id="export导出模块"><a href="#export导出模块" class="headerlink" title="export导出模块"></a>export导出模块</h2><p>export语法声明用于导出函数、对象、指定文件（或模块）的原始值。</p><blockquote><p>注意：在node中使用的是exports,不要混淆了</p></blockquote><p>export有两种模块导出方式：<strong>命名式导出（名称导出）</strong>和<strong>默认导出（定义式导出）</strong>，命名式导出每个模块可以多个，而默认导出每个模块仅一个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> &#123; name1, name2, …, nameN &#125;;<br><span class="hljs-keyword">export</span> &#123; variable1 <span class="hljs-keyword">as</span> name1, variable2 <span class="hljs-keyword">as</span> name2, …, nameN &#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> name1, name2, …, nameN; <span class="hljs-comment">// also var</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> name1 = …, name2 = …, …, nameN; <span class="hljs-comment">// also var, const</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> expression;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">…</span>) &#123; … &#125; <span class="hljs-comment">// also class, function*</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">name1</span>(<span class="hljs-params">…</span>) &#123; … &#125; <span class="hljs-comment">// also class, function*</span><br><span class="hljs-keyword">export</span> &#123; name1 <span class="hljs-keyword">as</span> <span class="hljs-keyword">default</span>, … &#125;;<br><br><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> …;<br><span class="hljs-keyword">export</span> &#123; name1, name2, …, nameN &#125; <span class="hljs-keyword">from</span> …;<br><span class="hljs-keyword">export</span> &#123; import1 <span class="hljs-keyword">as</span> name1, import2 <span class="hljs-keyword">as</span> name2, …, nameN &#125; <span class="hljs-keyword">from</span> …;<br></code></pre></td></tr></table></figure><ul><li>name1… nameN－导出的“标识符”。导出后，可以通过这个“标识符”在另一个模块中使用import引用</li><li>default－设置模块的默认导出。设置后import不通过“标识符”而直接引用默认导入</li><li>－继承模块并导出继承模块所有的方法和属性</li><li>as－重命名导出“标识符”</li><li>from－从已经存在的模块、脚本文件…导出</li></ul><h3 id="命名式导出"><a href="#命名式导出" class="headerlink" title="命名式导出"></a>命名式导出</h3><p>模块可以通过export前缀关键词声明导出对象，导出对象可以是多个。这些导出对象用名称进行区分，称之为命名式导出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">export</span> &#123; myFunction &#125;; <span class="hljs-comment">// 导出一个已定义的函数</span><br><span class="hljs-keyword">export</span> <span class="hljs-type">const</span> foo = Math.<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// 导出一个常量</span><br></code></pre></td></tr></table></figure><p>我们可以使用*和from关键字来实现的模块的继承：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;article&#x27;</span>;<br></code></pre></td></tr></table></figure><p>模块导出时，可以指定模块的导出成员。导出成员可以认为是类中的公有对象，而非导出成员可以认为是类中的私有对象：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;IT笔录&#x27;</span>;<br>var <span class="hljs-keyword">domain</span> = <span class="hljs-string">&#x27;http://itbilu.com&#x27;</span>;<br><br>export &#123;<span class="hljs-type">name</span>, <span class="hljs-keyword">domain</span>&#125;; // 相当于导出<br>&#123;<span class="hljs-type">name</span>:<span class="hljs-type">name</span>,<span class="hljs-keyword">domain</span>:<span class="hljs-keyword">domain</span>&#125;<br></code></pre></td></tr></table></figure><p>模块导出时，我们可以使用as关键字对导出成员进行重命名：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;IT笔录&#x27;</span>;<br>var <span class="hljs-keyword">domain</span> = <span class="hljs-string">&#x27;http://itbilu.com&#x27;</span>;<br><br>export &#123;<span class="hljs-type">name</span> <span class="hljs-keyword">as</span> siteName, <span class="hljs-keyword">domain</span>&#125;;<br></code></pre></td></tr></table></figure><p>注意，下面的语法有严重错误的情况：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 错误演示</span><br><span class="hljs-keyword">export</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 绝对不可以</span><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">export</span> a;<br></code></pre></td></tr></table></figure><p>export在导出接口的时候，必须与模块内部的变量具有一一对应的关系。直接导出1没有任何意义，也不可能在import的时候有一个变量与之对应</p><p><code>export a</code>虽然看上去成立，但是a的值是一个数字，根本无法完成解构，因此必须写成<code>export &#123;a&#125;</code>的形式。<strong>即使a被赋值为一个function，也是不允许的</strong>。而且，大部分风格都建议，模块中最好在末尾用一个export导出所有的接口，例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">export &#123;<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-keyword">as</span> default,a,b,c&#125;;</span><br></code></pre></td></tr></table></figure><h3 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h3><p>默认导出也被称做定义式导出。命名式导出可以导出多个值，但在在import引用时，也要使用相同的名称来引用相应的值。而默认导出每个导出只有一个单一值，这个输出可以是一个函数、类或其它类型的值，这样在模块import导入时也会很容易引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;; <span class="hljs-comment">// 可以导出一个函数</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">class</span>(<span class="hljs-params"></span>)&#123;&#125;; <span class="hljs-comment">// 也可以出一个类</span><br></code></pre></td></tr></table></figure><h3 id="命名式导出与默认导出"><a href="#命名式导出与默认导出" class="headerlink" title="命名式导出与默认导出"></a>命名式导出与默认导出</h3><p>默认导出可以理解为另一种形式的命名导出，默认导出可以认为是使用了default名称的命名导出。</p><p>下面两种导出方式是等价的：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> D = <span class="hljs-number">123</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> D;<br><span class="hljs-keyword">export</span> &#123; D <span class="hljs-keyword">as</span> <span class="hljs-keyword">default</span> &#125;;<br></code></pre></td></tr></table></figure><h3 id="export使用示例"><a href="#export使用示例" class="headerlink" title="export使用示例"></a>export使用示例</h3><p>使用名称导出一个模块时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// &quot;my-module.js&quot; 模块</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">cube</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">return</span> x * x * x;<br>&#125;<br><span class="hljs-keyword">const</span> foo = <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-property">SQRT2</span>;<br><span class="hljs-keyword">export</span> &#123; foo &#125;;<br></code></pre></td></tr></table></figure><p>在另一个模块（脚本文件）中，我们可以像下面这样引用：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">import &#123; cube, foo &#125; from <span class="hljs-string">&#x27;my-module&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(cube(<span class="hljs-number">3</span>)); <span class="hljs-comment">// 27</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(foo);    <span class="hljs-comment">// 4.555806215962888</span><br></code></pre></td></tr></table></figure><p>使用默认导出一个模块时：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">// <span class="hljs-string">&quot;my-module.js&quot;</span>模块<br>export default <span class="hljs-keyword">function</span> <span class="hljs-title"></span>(x) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">x</span> * x * x;<br>&#125;<br></code></pre></td></tr></table></figure><p>在另一个模块（脚本文件）中，我们可以像下面这样引用，相对名称导出来说使用更为简单：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// 引用 &quot;my-module.js&quot;模块<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">cube</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my-module&#x27;</span>;<br>console.log(<span class="hljs-keyword">cube</span>(<span class="hljs-number">3</span>)); // <span class="hljs-number">27</span><br></code></pre></td></tr></table></figure><h2 id="import引入模块"><a href="#import引入模块" class="headerlink" title="import引入模块"></a>import引入模块</h2><p>import语法声明用于从已导出的模块、脚本中导入函数、对象、指定文件（或模块）的原始值。</p><p>import模块导入与export模块导出功能相对应，也存在两种模块导入方式：命名式导入（名称导入）和默认导入（定义式导入）。</p><blockquote><p>import的语法跟require不同，而且import必须放在文件的最开始，且前面不允许有其他逻辑代码，这和其他所有编程语言风格一致。</p></blockquote><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> defaultMember <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> name <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; member &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; member <span class="hljs-keyword">as</span> alias &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; member1 , member2 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; member1 , member2 <span class="hljs-keyword">as</span> alias2 , [...] &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> defaultMember, &#123; member [ , [...] ] &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> defaultMember, * <span class="hljs-keyword">as</span> name <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>name－从将要导入模块中收到的导出值的名称</li><li>member, memberN－从导出模块，导入指定名称的多个成员</li><li>defaultMember－从导出模块，导入默认导出成员</li><li>alias, aliasN－别名，对指定导入成员进行的重命名</li><li>module-name－要导入的模块。是一个文件名</li><li>as－重命名导入成员名称（“标识符”）</li><li>from－从已经存在的模块、脚本文件等导入</li></ul><h3 id="命名式导入"><a href="#命名式导入" class="headerlink" title="命名式导入"></a>命名式导入</h3><p>我们可以通过指定名称，就是将这些成员插入到当作用域中。导出时，可以导入单个成员或多个成员：</p><p><strong>注意，花括号里面的变量与export后面的变量一一对应</strong></p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> &#123;myMember&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my-module&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;foo, bar&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my-module&quot;</span>;<br></code></pre></td></tr></table></figure><p>通过*符号，我们可以导入模块中的全部属性和方法。当导入模块全部导出内容时，就是将导出模块（’my-module.js’）所有的导出绑定内容，插入到当前模块（’myModule’）的作用域中：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> myModule <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my-module&quot;</span>;<br></code></pre></td></tr></table></figure><p>导入模块对象时，也可以使用as对导入成员重命名，以方便在当前模块内使用：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> &#123;reallyReallyLongModuleMemberName <span class="hljs-keyword">as</span> shortName&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my-module&quot;</span>;<br></code></pre></td></tr></table></figure><p>导入多个成员时，同样可以使用别名：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">import &#123;reallyReallyLongModuleMemberName <span class="hljs-keyword">as</span> shortName, anotherLongModuleName <span class="hljs-keyword">as</span> <span class="hljs-built_in">short</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my-module&quot;</span>;<br></code></pre></td></tr></table></figure><p>导入一个模块，但不进行任何绑定：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">import <span class="hljs-string">&quot;my-module&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="默认导入"><a href="#默认导入" class="headerlink" title="默认导入"></a>默认导入</h3><p>在模块导出时，可能会存在默认导出。同样的，在导入时可以使用import指令导出这些默认值。</p><p>直接导入默认值：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> myDefault <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my-module&quot;</span>;<br></code></pre></td></tr></table></figure><p>也可以在命名空间导入和名称导入中，同时使用默认导入：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> myDefault, * <span class="hljs-keyword">as</span> myModule <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my-module&quot;</span>; <span class="hljs-comment">// myModule 做为命名空间使用</span><br>或<br><br><span class="hljs-keyword">import</span> myDefault, &#123;foo, bar&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my-module&quot;</span>; <span class="hljs-comment">// 指定成员导入</span><br></code></pre></td></tr></table></figure><h3 id="import使用示例"><a href="#import使用示例" class="headerlink" title="import使用示例"></a>import使用示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// --file.js--</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getJSON</span>(<span class="hljs-params">url, callback</span>) &#123;<br>  <span class="hljs-keyword">let</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>  xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <br>    <span class="hljs-title function_">callback</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">responseText</span>) <br>  &#125;;<br>  xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, url, <span class="hljs-literal">true</span>);<br>  xhr.<span class="hljs-title function_">send</span>();<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getUsefulContents</span>(<span class="hljs-params">url, callback</span>) &#123;<br>  <span class="hljs-title function_">getJSON</span>(url, <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-title function_">callback</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data)));<br>&#125;<br><br><span class="hljs-comment">// --main.js--</span><br><span class="hljs-keyword">import</span> &#123; getUsefulContents &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;file&quot;</span>;<br><span class="hljs-title function_">getUsefulContents</span>(<span class="hljs-string">&quot;http://itbilu.com&quot;</span>, <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>  <span class="hljs-title function_">doSomethingUseful</span>(data);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="default关键字"><a href="#default关键字" class="headerlink" title="default关键字"></a>default关键字</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// d.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-comment">// 等效于：</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;&#125;;<br><span class="hljs-keyword">export</span> &#123;a <span class="hljs-keyword">as</span> <span class="hljs-keyword">default</span>&#125;;<br></code></pre></td></tr></table></figure><p>在import的时候，可以这样用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> a <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./d&#x27;</span>;<br><br><span class="hljs-comment">// 等效于，或者说就是下面这种写法的简写，是同一个意思</span><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> a&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./d&#x27;</span>;<br></code></pre></td></tr></table></figure><p>这个语法糖的好处就是import的时候，可以省去花括号{}。</p><p>简单的说，如果import的时候，你发现某个变量没有花括号括起来（没有*号），那么你在脑海中应该把它还原成有花括号的as语法。</p><p>所以，下面这种写法你也应该理解了吧：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> $,&#123;<span class="hljs-keyword">each</span>,map&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jquery&#x27;</span>;<br></code></pre></td></tr></table></figure><p>import后面第一个$是{defalut as $}的替代写法。</p><h2 id="as关键字"><a href="#as关键字" class="headerlink" title="as关键字"></a>as关键字</h2><p>as简单的说就是取一个别名,export中可以用，import中其实可以用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// a.js</span><br><span class="hljs-keyword">var</span> a = function() &#123;&#125;;<br>export &#123;a <span class="hljs-keyword">as</span> <span class="hljs-function"><span class="hljs-keyword">fun</span>&#125;;</span><br><br><span class="hljs-comment">// b.js</span><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-keyword">as</span> a&#125; from &#x27;./a&#x27;;</span><br>a();<br></code></pre></td></tr></table></figure><p>上面这段代码，export的时候，对外提供的接口是fun，它是a.js内部a这个函数的别名，但是在模块外面，认不到a，只能认到fun。</p><p>import中的as就很简单，就是你在使用模块里面的方法的时候，给这个方法取一个别名，好在当前的文件里面使用。之所以是这样，是因为有的时候不同的两个模块可能通过相同的接口，比如有一个c.js也通过了fun这个接口：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// c.js</span><br>export function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span> &#123;&#125;;<br></code></pre></td></tr></table></figure><p>如果在b.js中同时使用a和c这两个模块，就必须想办法解决接口重名的问题，as就解决了。</p><h2 id="CommonJS中module-exports-与-exports的区别"><a href="#CommonJS中module-exports-与-exports的区别" class="headerlink" title="CommonJS中module.exports 与 exports的区别"></a>CommonJS中module.exports 与 exports的区别</h2><p><strong>Module.exports</strong> </p><blockquote><p>The module.exports object is created by the Module system. Sometimes this is not acceptable; many want their module to be an instance of some class. To do this, assign the desired export object to module.exports. Note that assigning the desired object to exports will simply rebind the local exports variable, which is probably not what you want to do.</p></blockquote><blockquote><p>译文：module.exports对象是由模块系统创建的。 有时这是难以接受的；许多人希望他们的模块成为某个类的实例。 为了实现这个，需要将期望导出的对象赋值给module.exports。 注意，将期望的对象赋值给exports会简单地重新绑定到本地exports变量上，这可能不是你想要的。</p></blockquote><p><strong>Module.exports</strong></p><blockquote><p>The exports variable is available within a module’s file-level scope, and is assigned the value of module.exports before the module is evaluated. It allows a shortcut, so that module.exports.f &#x3D; … can be written more succinctly as exports.f &#x3D; …. However, be aware that like any variable, if a new value is assigned to exports, it is no longer bound to module.exports:</p></blockquote><blockquote><p>译文：exports变量是在模块的文件级别作用域内有效的，它在模块被执行前被赋于 module.exports 的值。它有一个快捷方式，以便 module.exports.f &#x3D; … 可以被更简洁地写成exports.f &#x3D; …。 注意，就像任何变量，如果一个新的值被赋值给exports，它就不再绑定到module.exports(其实是exports.属性会自动挂载到没有命名冲突的module.exports.属性)</p></blockquote><p>从<a href="http://nodejs.cn/api/modules.html#modules_module_exports">Api文档</a>上面的可以看出，从require导入方式去理解，关键有两个变量(全局变量module.exports，局部变量exports)、一个返回值(module.exports)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">require</span>(<span class="hljs-params">...</span>) &#123;  <br>  <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = &#123; <span class="hljs-attr">exports</span>: &#123;&#125; &#125;;<br>  (<span class="hljs-function">(<span class="hljs-params"><span class="hljs-variable language_">module</span>, <span class="hljs-built_in">exports</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 你的被引入代码 Start</span><br>    <span class="hljs-comment">// var exports = module.exports = &#123;&#125;; (默认都有的)</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">some_func</span>(<span class="hljs-params"></span>) &#123;&#125;;<br>    <span class="hljs-built_in">exports</span> = some_func;<br>    <span class="hljs-comment">// 此时，exports不再挂载到module.exports，</span><br>    <span class="hljs-comment">// export将导出&#123;&#125;默认对象</span><br>    <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = some_func;<br>    <span class="hljs-comment">// 此时，这个模块将导出some_func对象，覆盖exports上的some_func    </span><br>     <span class="hljs-comment">// 你的被引入代码 End</span><br>  &#125;)(<span class="hljs-variable language_">module</span>, <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>);<br> <span class="hljs-comment">// 不管是exports还是module.exports，最后返回的还是module.exports </span><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>demo.js:</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs lua">console.<span class="hljs-built_in">log</span>(exports); // &#123;&#125;  <br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">module</span>.exports);  // &#123;&#125;  <br>console.<span class="hljs-built_in">log</span>(exports === <span class="hljs-built_in">module</span>.exports);    // <span class="hljs-literal">true</span>  <br>console.<span class="hljs-built_in">log</span>(exports == <span class="hljs-built_in">module</span>.exports);        // <span class="hljs-literal">true</span>  <br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">module</span>);<br>/**<br> Module &#123;<br>  id: <span class="hljs-string">&#x27;.&#x27;</span>,<br>  exports: &#123;&#125;,<br>  parent: null,<br>  filename: <span class="hljs-string">&#x27;/Users/larben/Desktop/demo.js&#x27;</span>,<br>  <span class="hljs-built_in">loaded</span>: <span class="hljs-literal">false</span>,<br>  children: [],<br>  paths:<br>   [ <span class="hljs-string">&#x27;/Users/larben/Desktop/node_modules&#x27;</span>,<br>     <span class="hljs-string">&#x27;/Users/larben/node_modules&#x27;</span>,<br>     <span class="hljs-string">&#x27;/Users/node_modules&#x27;</span>,<br>     <span class="hljs-string">&#x27;/node_modules&#x27;</span> ] &#125;<br> */<br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><ol><li>每个js文件一创建，都有一个var exports &#x3D; module.exports &#x3D; {},使exports和module.exports都指向一个空对象。</li><li>module.exports和exports所指向的内存地址相同</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>彻底搞清楚javascript中的require、import和export</title>
    <link href="/2017/07/04/2017-07-04-import%E5%92%8Cexport%E7%AC%94%E8%AE%B0/"/>
    <url>/2017/07/04/2017-07-04-import%E5%92%8Cexport%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fh7u9d2ixbj308c08bdfs.jpg"></p><h2 id="为什么有模块概念"><a href="#为什么有模块概念" class="headerlink" title="为什么有模块概念"></a>为什么有模块概念</h2><p>理想情况下，开发者只需要实现核心的业务逻辑，其他都可以加载别人已经写好的模块。</p><p>但是，Javascript不是一种模块化编程语言，在es6以前，它是不支持”类”（class），所以也就没有”模块”（module）了。</p><span id="more"></span><h2 id="require时代"><a href="#require时代" class="headerlink" title="require时代"></a>require时代</h2><p>Javascript社区做了很多努力，在现有的运行环境中，实现”模块”的效果。</p><h3 id="原始写法"><a href="#原始写法" class="headerlink" title="原始写法"></a>原始写法</h3><p>模块就是实现特定功能的一组方法。<br>只要把不同的函数（以及记录状态的变量）简单地放在一起，就算是一个模块。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;<br>　<span class="hljs-comment">//...</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span>&#123;<br>　<span class="hljs-comment">//...　　</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面的函数m1()和m2()，组成一个模块。使用的时候，直接调用就行了。</p><p>这种做法的缺点很明显：”污染”了全局变量，无法保证不与其他模块发生变量名冲突，而且模块成员之间看不出直接关系。</p><h3 id="对象写法"><a href="#对象写法" class="headerlink" title="对象写法"></a>对象写法</h3><p>为了解决上面的缺点，可以把模块写成一个对象，所有的模块成员都放到这个对象里面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> module1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(&#123;<br>  _count : <span class="hljs-number">0</span>,<br>　m1 : <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>　　<span class="hljs-comment">//...</span><br>　&#125;,<br>　m2 : <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>　　<span class="hljs-comment">//...</span><br>　&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>上面的函数m1()和m2(），都封装在module1对象里。使用的时候，就是调用这个对象的属性</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">module<span class="hljs-number">1.</span><span class="hljs-name">m1</span><span class="hljs-comment">()</span>;<br></code></pre></td></tr></table></figure><p>这样的写法会暴露所有模块成员，内部状态可以被外部改写。比如，外部代码可以直接改变内部计数器的值。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">module._count</span> = <span class="hljs-number">1</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="立即执行函数写法"><a href="#立即执行函数写法" class="headerlink" title="立即执行函数写法"></a>立即执行函数写法</h3><p>使用”立即执行函数”（Immediately-Invoked Function Expression，IIFE），可以达到不暴露私有成员的目的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> _count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">var</span> m1 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(_count)<br>    &#125;<br>    <span class="hljs-keyword">var</span> m2 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(_count + <span class="hljs-number">1</span>)<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">m1</span>: m1,<br>        <span class="hljs-attr">m2</span>: m2<br>    &#125;<br>&#125;)()<br></code></pre></td></tr></table></figure><p>使用上面的写法，外部代码无法读取内部的_count变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">　　<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-variable language_">module</span>.<span class="hljs-property">_count</span>); <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><p>module就是Javascript模块的基本写法。</p><h2 id="主流模块规范"><a href="#主流模块规范" class="headerlink" title="主流模块规范"></a>主流模块规范</h2><p>在es6以前，还没有提出一套官方的规范,从社区和框架推广程度而言,目前通行的javascript模块规范有两种：CommonJS 和 AMD</p><h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><p><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fh7n4us7v0j30dw043aa0.jpg"></p><p>2009年，美国程序员Ryan Dahl创造了node.js项目，将javascript语言用于服务器端编程。</p><p>这标志”Javascript模块化编程”正式诞生。前端的复杂程度有限，没有模块也是可以的，但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。</p><p>node编程中最重要的思想之一就是模块，而正是这个思想，让JavaScript的大规模工程成为可能。模块化编程在js界流行，也是基于此，随后在浏览器端，requirejs和seajs之类的工具包也出现了，可以说在对应规范下，require统治了ES6之前的所有模块化编程，即使现在，在ES6 module被完全实现之前，还是这样。</p><p>在CommonJS中,暴露模块使用module.exports和exports，很多人不明白暴露对象为什么会有两个,后面会介绍区别</p><p>在CommonJS中，有一个全局性方法require()，用于加载模块。假定有一个数学模块math.js，就可以像下面这样加载。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">var math</span> = require(<span class="hljs-string">&#x27;math&#x27;</span>);<br></code></pre></td></tr></table></figure><p>然后，就可以调用模块提供的方法：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp">　<span class="hljs-keyword">var</span> math = require(<span class="hljs-string">&#x27;math&#x27;</span>);<br>　math.<span class="hljs-keyword">add</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>); <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><p>正是由于CommonJS 使用的require方式的推动，才有了后面的AMD、CMD 也采用的require方式来引用模块的风格</p><h3 id="AMD规范"><a href="#AMD规范" class="headerlink" title="AMD规范"></a>AMD规范</h3><p><img src="https://ww1.sinaimg.cn/large/006tKfTcgy1fh7u7byz4xj30dh06e75d.jpg"></p><p>有了服务器端模块以后，很自然地，大家就想要客户端模块。而且最好两者能够兼容，一个模块不用修改，在服务器和浏览器都可以运行。</p><p>但是，由于一个重大的局限，使得CommonJS规范不适用于浏览器环境。还是上一节的代码，如果在浏览器中运行，会有一个很大的问题</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">var <span class="hljs-built_in">math</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;math&#x27;</span>);<br><span class="hljs-built_in">math</span>.add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>第二行math.add(2, 3)，在第一行require(‘math’)之后运行，因此必须等math.js加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p><p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。<br>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是AMD规范诞生的背景。</p><p>AMD是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p><p>模块必须采用特定的define()函数来定义。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">define</span><span class="hljs-params">(id?, dependencies?, factory)</span></span><br></code></pre></td></tr></table></figure><ul><li>id:字符串，模块名称(可选)</li><li>dependencies: 是我们要载入的依赖模块(可选)，使用相对路径。,注意是数组格式</li><li>factory: 工厂方法，返回一个模块函数</li></ul><p>如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// math.js</span><br>　　define(<span class="hljs-keyword">function</span> <span class="hljs-params">()</span>&#123;<br>　　　　<span class="hljs-keyword">var</span> add = <span class="hljs-keyword">function</span> <span class="hljs-params">(x,y)</span>&#123;<br>　　　　　　<span class="hljs-keyword">return</span> x+y;<br>　　　　&#125;;<br>　　　　<span class="hljs-keyword">return</span> &#123;<br>　　　　　　add: add<br>　　　　&#125;;<br>　　&#125;);<br></code></pre></td></tr></table></figure><p>如果这个模块还依赖其他模块，那么define()函数的第一个参数，必须是一个数组，指明该模块的依赖性。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">define([<span class="hljs-symbol">&#x27;Lib</span>&#x27;], <span class="hljs-keyword">function</span>(Lib)&#123;<br>　　　　<span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>()&#123;<br>　　　　　　Lib.doSomething();<br>　　　　&#125;<br>　　　　<span class="hljs-keyword">return</span> &#123;<br>　　　　　　foo : <span class="hljs-type">foo</span><br>　　　　&#125;;<br>　　&#125;);<br></code></pre></td></tr></table></figure><p>当require()函数加载上面这个模块的时候，就会先加载Lib.js文件。</p><p>AMD也采用require()语句加载模块，但是不同于CommonJS，它要求两个参数：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-keyword">require</span>([<span class="hljs-class"><span class="hljs-keyword">module</span>], <span class="hljs-title">callback</span>);</span><br></code></pre></td></tr></table></figure><p>第一个参数[module]，是一个数组，里面的成员就是要加载的模块；第二个参数callback，则是加载成功之后的回调函数。如果将前面的代码改写成AMD形式，就是下面这样：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;math&#x27;</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(math)</span></span> &#123;<br>　<span class="hljs-built_in">math</span>.add(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>math.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。</p><p>目前，主要有两个Javascript库实现了AMD规范：<a href="http://requirejs.org/">require.js</a>和<a href="http://cujojs.com/">curl.js</a>。</p><h3 id="CMD规范"><a href="#CMD规范" class="headerlink" title="CMD规范"></a>CMD规范</h3><p><img src="https://ww2.sinaimg.cn/large/006tKfTcgy1fh7u5xcnw7j305k046wed.jpg"></p><p>CMD (Common Module Definition), 是seajs推崇的规范，CMD则是依赖就近，用的时候再require。它写起来是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;<br>   <span class="hljs-keyword">var</span> clock = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;clock&#x27;</span>);<br>   clock.<span class="hljs-title function_">start</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p>CMD与AMD一样，也是采用特定的define()函数来定义,用require方式来引用模块</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">define</span><span class="hljs-params">(id?, dependencies?, factory)</span></span><br></code></pre></td></tr></table></figure><ul><li>id:字符串，模块名称(可选)</li><li>dependencies: 是我们要载入的依赖模块(可选)，使用相对路径。,注意是数组格式</li><li>factory: 工厂方法，返回一个模块函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;hello&#x27;</span>, [<span class="hljs-string">&#x27;jquery&#x27;</span>], <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;<br><br>  <span class="hljs-comment">// 模块代码</span><br><br>&#125;);<br></code></pre></td></tr></table></figure><p>如果一个模块不依赖其他模块，那么可以直接定义在define()函数之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">define</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">require</span>, <span class="hljs-built_in">exports</span>, <span class="hljs-variable language_">module</span></span>) &#123;<br>  <span class="hljs-comment">// 模块代码</span><br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>注意：带 id 和 dependencies 参数的 define 用法不属于 CMD 规范，而属于 Modules&#x2F;Transport 规范。</p></blockquote><h2 id="CMD与AMD区别"><a href="#CMD与AMD区别" class="headerlink" title="CMD与AMD区别"></a>CMD与AMD区别</h2><p>AMD和CMD最大的区别是对依赖模块的执行时机处理不同，而不是加载的时机或者方式不同，二者皆为异步加载模块。</p><p>AMD依赖前置，js可以方便知道依赖模块是谁，立即加载；</p><p>而CMD就近依赖，需要使用把模块变为字符串解析一遍才知道依赖了那些模块，这也是很多人诟病CMD的一点，牺牲性能来带来开发的便利性，实际上解析模块用的时间短到可以忽略。</p><h2 id="现阶段的标准"><a href="#现阶段的标准" class="headerlink" title="现阶段的标准"></a>现阶段的标准</h2><p><img src="https://ww4.sinaimg.cn/large/006tKfTcgy1fh7uc992vaj30go0a074e.jpg"></p><p>ES6标准发布后，module成为标准，标准使用是以export指令导出接口，以import引入模块，但是在我们一贯的node模块中，我们依然采用的是CommonJS规范，使用require引入模块，使用module.exports导出接口。</p><h2 id="export导出模块"><a href="#export导出模块" class="headerlink" title="export导出模块"></a>export导出模块</h2><p>export语法声明用于导出函数、对象、指定文件（或模块）的原始值。</p><blockquote><p>注意：在node中使用的是exports,不要混淆了</p></blockquote><p>export有两种模块导出方式：<strong>命名式导出（名称导出）</strong>和<strong>默认导出（定义式导出）</strong>，命名式导出每个模块可以多个，而默认导出每个模块仅一个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> &#123; name1, name2, …, nameN &#125;;<br><span class="hljs-keyword">export</span> &#123; variable1 <span class="hljs-keyword">as</span> name1, variable2 <span class="hljs-keyword">as</span> name2, …, nameN &#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> name1, name2, …, nameN; <span class="hljs-comment">// also var</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> name1 = …, name2 = …, …, nameN; <span class="hljs-comment">// also var, const</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> expression;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">…</span>) &#123; … &#125; <span class="hljs-comment">// also class, function*</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">name1</span>(<span class="hljs-params">…</span>) &#123; … &#125; <span class="hljs-comment">// also class, function*</span><br><span class="hljs-keyword">export</span> &#123; name1 <span class="hljs-keyword">as</span> <span class="hljs-keyword">default</span>, … &#125;;<br><br><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> …;<br><span class="hljs-keyword">export</span> &#123; name1, name2, …, nameN &#125; <span class="hljs-keyword">from</span> …;<br><span class="hljs-keyword">export</span> &#123; import1 <span class="hljs-keyword">as</span> name1, import2 <span class="hljs-keyword">as</span> name2, …, nameN &#125; <span class="hljs-keyword">from</span> …;<br></code></pre></td></tr></table></figure><ul><li>name1… nameN－导出的“标识符”。导出后，可以通过这个“标识符”在另一个模块中使用import引用</li><li>default－设置模块的默认导出。设置后import不通过“标识符”而直接引用默认导入</li><li>－继承模块并导出继承模块所有的方法和属性</li><li>as－重命名导出“标识符”</li><li>from－从已经存在的模块、脚本文件…导出</li></ul><h3 id="命名式导出"><a href="#命名式导出" class="headerlink" title="命名式导出"></a>命名式导出</h3><p>模块可以通过export前缀关键词声明导出对象，导出对象可以是多个。这些导出对象用名称进行区分，称之为命名式导出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">export</span> &#123; myFunction &#125;; <span class="hljs-comment">// 导出一个已定义的函数</span><br><span class="hljs-keyword">export</span> <span class="hljs-type">const</span> foo = Math.<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// 导出一个常量</span><br></code></pre></td></tr></table></figure><p>我们可以使用*和from关键字来实现的模块的继承：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;article&#x27;</span>;<br></code></pre></td></tr></table></figure><p>模块导出时，可以指定模块的导出成员。导出成员可以认为是类中的公有对象，而非导出成员可以认为是类中的私有对象：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;IT笔录&#x27;</span>;<br>var <span class="hljs-keyword">domain</span> = <span class="hljs-string">&#x27;http://itbilu.com&#x27;</span>;<br><br>export &#123;<span class="hljs-type">name</span>, <span class="hljs-keyword">domain</span>&#125;; // 相当于导出<br>&#123;<span class="hljs-type">name</span>:<span class="hljs-type">name</span>,<span class="hljs-keyword">domain</span>:<span class="hljs-keyword">domain</span>&#125;<br></code></pre></td></tr></table></figure><p>模块导出时，我们可以使用as关键字对导出成员进行重命名：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var <span class="hljs-type">name</span> = <span class="hljs-string">&#x27;IT笔录&#x27;</span>;<br>var <span class="hljs-keyword">domain</span> = <span class="hljs-string">&#x27;http://itbilu.com&#x27;</span>;<br><br>export &#123;<span class="hljs-type">name</span> <span class="hljs-keyword">as</span> siteName, <span class="hljs-keyword">domain</span>&#125;;<br></code></pre></td></tr></table></figure><p>注意，下面的语法有严重错误的情况：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 错误演示</span><br><span class="hljs-keyword">export</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 绝对不可以</span><br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">export</span> a;<br></code></pre></td></tr></table></figure><p>export在导出接口的时候，必须与模块内部的变量具有一一对应的关系。直接导出1没有任何意义，也不可能在import的时候有一个变量与之对应</p><p><code>export a</code>虽然看上去成立，但是a的值是一个数字，根本无法完成解构，因此必须写成<code>export &#123;a&#125;</code>的形式。<strong>即使a被赋值为一个function，也是不允许的</strong>。而且，大部分风格都建议，模块中最好在末尾用一个export导出所有的接口，例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">export &#123;<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-keyword">as</span> default,a,b,c&#125;;</span><br></code></pre></td></tr></table></figure><h3 id="默认导出"><a href="#默认导出" class="headerlink" title="默认导出"></a>默认导出</h3><p>默认导出也被称做定义式导出。命名式导出可以导出多个值，但在在import引用时，也要使用相同的名称来引用相应的值。而默认导出每个导出只有一个单一值，这个输出可以是一个函数、类或其它类型的值，这样在模块import导入时也会很容易引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;; <span class="hljs-comment">// 可以导出一个函数</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">class</span>(<span class="hljs-params"></span>)&#123;&#125;; <span class="hljs-comment">// 也可以出一个类</span><br></code></pre></td></tr></table></figure><h3 id="命名式导出与默认导出"><a href="#命名式导出与默认导出" class="headerlink" title="命名式导出与默认导出"></a>命名式导出与默认导出</h3><p>默认导出可以理解为另一种形式的命名导出，默认导出可以认为是使用了default名称的命名导出。</p><p>下面两种导出方式是等价的：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> D = <span class="hljs-number">123</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> D;<br><span class="hljs-keyword">export</span> &#123; D <span class="hljs-keyword">as</span> <span class="hljs-keyword">default</span> &#125;;<br></code></pre></td></tr></table></figure><h3 id="export使用示例"><a href="#export使用示例" class="headerlink" title="export使用示例"></a>export使用示例</h3><p>使用名称导出一个模块时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// &quot;my-module.js&quot; 模块</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">cube</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">return</span> x * x * x;<br>&#125;<br><span class="hljs-keyword">const</span> foo = <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-property">SQRT2</span>;<br><span class="hljs-keyword">export</span> &#123; foo &#125;;<br></code></pre></td></tr></table></figure><p>在另一个模块（脚本文件）中，我们可以像下面这样引用：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">import &#123; cube, foo &#125; from <span class="hljs-string">&#x27;my-module&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(cube(<span class="hljs-number">3</span>)); <span class="hljs-comment">// 27</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(foo);    <span class="hljs-comment">// 4.555806215962888</span><br></code></pre></td></tr></table></figure><p>使用默认导出一个模块时：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">// <span class="hljs-string">&quot;my-module.js&quot;</span>模块<br>export default <span class="hljs-keyword">function</span> <span class="hljs-title"></span>(x) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">x</span> * x * x;<br>&#125;<br></code></pre></td></tr></table></figure><p>在另一个模块（脚本文件）中，我们可以像下面这样引用，相对名称导出来说使用更为简单：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// 引用 &quot;my-module.js&quot;模块<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">cube</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;my-module&#x27;</span>;<br>console.log(<span class="hljs-keyword">cube</span>(<span class="hljs-number">3</span>)); // <span class="hljs-number">27</span><br></code></pre></td></tr></table></figure><h2 id="import引入模块"><a href="#import引入模块" class="headerlink" title="import引入模块"></a>import引入模块</h2><p>import语法声明用于从已导出的模块、脚本中导入函数、对象、指定文件（或模块）的原始值。</p><p>import模块导入与export模块导出功能相对应，也存在两种模块导入方式：命名式导入（名称导入）和默认导入（定义式导入）。</p><blockquote><p>import的语法跟require不同，而且import必须放在文件的最开始，且前面不允许有其他逻辑代码，这和其他所有编程语言风格一致。</p></blockquote><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> defaultMember <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> name <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; member &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; member <span class="hljs-keyword">as</span> alias &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; member1 , member2 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; member1 , member2 <span class="hljs-keyword">as</span> alias2 , [...] &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> defaultMember, &#123; member [ , [...] ] &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> defaultMember, * <span class="hljs-keyword">as</span> name <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;module-name&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>name－从将要导入模块中收到的导出值的名称</li><li>member, memberN－从导出模块，导入指定名称的多个成员</li><li>defaultMember－从导出模块，导入默认导出成员</li><li>alias, aliasN－别名，对指定导入成员进行的重命名</li><li>module-name－要导入的模块。是一个文件名</li><li>as－重命名导入成员名称（“标识符”）</li><li>from－从已经存在的模块、脚本文件等导入</li></ul><h3 id="命名式导入"><a href="#命名式导入" class="headerlink" title="命名式导入"></a>命名式导入</h3><p>我们可以通过指定名称，就是将这些成员插入到当作用域中。导出时，可以导入单个成员或多个成员：</p><p><strong>注意，花括号里面的变量与export后面的变量一一对应</strong></p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> &#123;myMember&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my-module&quot;</span>;<br><span class="hljs-keyword">import</span> &#123;foo, bar&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my-module&quot;</span>;<br></code></pre></td></tr></table></figure><p>通过*符号，我们可以导入模块中的全部属性和方法。当导入模块全部导出内容时，就是将导出模块（’my-module.js’）所有的导出绑定内容，插入到当前模块（’myModule’）的作用域中：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> myModule <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my-module&quot;</span>;<br></code></pre></td></tr></table></figure><p>导入模块对象时，也可以使用as对导入成员重命名，以方便在当前模块内使用：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> &#123;reallyReallyLongModuleMemberName <span class="hljs-keyword">as</span> shortName&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my-module&quot;</span>;<br></code></pre></td></tr></table></figure><p>导入多个成员时，同样可以使用别名：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">import &#123;reallyReallyLongModuleMemberName <span class="hljs-keyword">as</span> shortName, anotherLongModuleName <span class="hljs-keyword">as</span> <span class="hljs-built_in">short</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my-module&quot;</span>;<br></code></pre></td></tr></table></figure><p>导入一个模块，但不进行任何绑定：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">import <span class="hljs-string">&quot;my-module&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="默认导入"><a href="#默认导入" class="headerlink" title="默认导入"></a>默认导入</h3><p>在模块导出时，可能会存在默认导出。同样的，在导入时可以使用import指令导出这些默认值。</p><p>直接导入默认值：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> myDefault <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my-module&quot;</span>;<br></code></pre></td></tr></table></figure><p>也可以在命名空间导入和名称导入中，同时使用默认导入：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> myDefault, * <span class="hljs-keyword">as</span> myModule <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my-module&quot;</span>; <span class="hljs-comment">// myModule 做为命名空间使用</span><br>或<br><br><span class="hljs-keyword">import</span> myDefault, &#123;foo, bar&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;my-module&quot;</span>; <span class="hljs-comment">// 指定成员导入</span><br></code></pre></td></tr></table></figure><h3 id="import使用示例"><a href="#import使用示例" class="headerlink" title="import使用示例"></a>import使用示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// --file.js--</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getJSON</span>(<span class="hljs-params">url, callback</span>) &#123;<br>  <span class="hljs-keyword">let</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>  xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <br>    <span class="hljs-title function_">callback</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">responseText</span>) <br>  &#125;;<br>  xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, url, <span class="hljs-literal">true</span>);<br>  xhr.<span class="hljs-title function_">send</span>();<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getUsefulContents</span>(<span class="hljs-params">url, callback</span>) &#123;<br>  <span class="hljs-title function_">getJSON</span>(url, <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-title function_">callback</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data)));<br>&#125;<br><br><span class="hljs-comment">// --main.js--</span><br><span class="hljs-keyword">import</span> &#123; getUsefulContents &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;file&quot;</span>;<br><span class="hljs-title function_">getUsefulContents</span>(<span class="hljs-string">&quot;http://itbilu.com&quot;</span>, <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>  <span class="hljs-title function_">doSomethingUseful</span>(data);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="default关键字"><a href="#default关键字" class="headerlink" title="default关键字"></a>default关键字</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// d.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-comment">// 等效于：</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;&#125;;<br><span class="hljs-keyword">export</span> &#123;a <span class="hljs-keyword">as</span> <span class="hljs-keyword">default</span>&#125;;<br></code></pre></td></tr></table></figure><p>在import的时候，可以这样用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> a <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./d&#x27;</span>;<br><br><span class="hljs-comment">// 等效于，或者说就是下面这种写法的简写，是同一个意思</span><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> a&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./d&#x27;</span>;<br></code></pre></td></tr></table></figure><p>这个语法糖的好处就是import的时候，可以省去花括号{}。</p><p>简单的说，如果import的时候，你发现某个变量没有花括号括起来（没有*号），那么你在脑海中应该把它还原成有花括号的as语法。</p><p>所以，下面这种写法你也应该理解了吧：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> $,&#123;<span class="hljs-keyword">each</span>,map&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;jquery&#x27;</span>;<br></code></pre></td></tr></table></figure><p>import后面第一个$是{defalut as $}的替代写法。</p><h2 id="as关键字"><a href="#as关键字" class="headerlink" title="as关键字"></a>as关键字</h2><p>as简单的说就是取一个别名,export中可以用，import中其实可以用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// a.js</span><br><span class="hljs-keyword">var</span> a = function() &#123;&#125;;<br>export &#123;a <span class="hljs-keyword">as</span> <span class="hljs-function"><span class="hljs-keyword">fun</span>&#125;;</span><br><br><span class="hljs-comment">// b.js</span><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-keyword">as</span> a&#125; from &#x27;./a&#x27;;</span><br>a();<br></code></pre></td></tr></table></figure><p>上面这段代码，export的时候，对外提供的接口是fun，它是a.js内部a这个函数的别名，但是在模块外面，认不到a，只能认到fun。</p><p>import中的as就很简单，就是你在使用模块里面的方法的时候，给这个方法取一个别名，好在当前的文件里面使用。之所以是这样，是因为有的时候不同的两个模块可能通过相同的接口，比如有一个c.js也通过了fun这个接口：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// c.js</span><br>export function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span> &#123;&#125;;<br></code></pre></td></tr></table></figure><p>如果在b.js中同时使用a和c这两个模块，就必须想办法解决接口重名的问题，as就解决了。</p><h2 id="CommonJS中module-exports-与-exports的区别"><a href="#CommonJS中module-exports-与-exports的区别" class="headerlink" title="CommonJS中module.exports 与 exports的区别"></a>CommonJS中module.exports 与 exports的区别</h2><p><strong>Module.exports</strong> </p><blockquote><p>The module.exports object is created by the Module system. Sometimes this is not acceptable; many want their module to be an instance of some class. To do this, assign the desired export object to module.exports. Note that assigning the desired object to exports will simply rebind the local exports variable, which is probably not what you want to do.</p></blockquote><blockquote><p>译文：module.exports对象是由模块系统创建的。 有时这是难以接受的；许多人希望他们的模块成为某个类的实例。 为了实现这个，需要将期望导出的对象赋值给module.exports。 注意，将期望的对象赋值给exports会简单地重新绑定到本地exports变量上，这可能不是你想要的。</p></blockquote><p><strong>Module.exports</strong></p><blockquote><p>The exports variable is available within a module’s file-level scope, and is assigned the value of module.exports before the module is evaluated. It allows a shortcut, so that module.exports.f &#x3D; … can be written more succinctly as exports.f &#x3D; …. However, be aware that like any variable, if a new value is assigned to exports, it is no longer bound to module.exports:</p></blockquote><blockquote><p>译文：exports变量是在模块的文件级别作用域内有效的，它在模块被执行前被赋于 module.exports 的值。它有一个快捷方式，以便 module.exports.f &#x3D; … 可以被更简洁地写成exports.f &#x3D; …。 注意，就像任何变量，如果一个新的值被赋值给exports，它就不再绑定到module.exports(其实是exports.属性会自动挂载到没有命名冲突的module.exports.属性)</p></blockquote><p>从<a href="http://nodejs.cn/api/modules.html#modules_module_exports">Api文档</a>上面的可以看出，从require导入方式去理解，关键有两个变量(全局变量module.exports，局部变量exports)、一个返回值(module.exports)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">require</span>(<span class="hljs-params">...</span>) &#123;  <br>  <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = &#123; <span class="hljs-attr">exports</span>: &#123;&#125; &#125;;<br>  (<span class="hljs-function">(<span class="hljs-params"><span class="hljs-variable language_">module</span>, <span class="hljs-built_in">exports</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 你的被引入代码 Start</span><br>    <span class="hljs-comment">// var exports = module.exports = &#123;&#125;; (默认都有的)</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">some_func</span>(<span class="hljs-params"></span>) &#123;&#125;;<br>    <span class="hljs-built_in">exports</span> = some_func;<br>    <span class="hljs-comment">// 此时，exports不再挂载到module.exports，</span><br>    <span class="hljs-comment">// export将导出&#123;&#125;默认对象</span><br>    <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = some_func;<br>    <span class="hljs-comment">// 此时，这个模块将导出some_func对象，覆盖exports上的some_func    </span><br>     <span class="hljs-comment">// 你的被引入代码 End</span><br>  &#125;)(<span class="hljs-variable language_">module</span>, <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>);<br> <span class="hljs-comment">// 不管是exports还是module.exports，最后返回的还是module.exports </span><br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>demo.js:</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs lua">console.<span class="hljs-built_in">log</span>(exports); // &#123;&#125;  <br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">module</span>.exports);  // &#123;&#125;  <br>console.<span class="hljs-built_in">log</span>(exports === <span class="hljs-built_in">module</span>.exports);    // <span class="hljs-literal">true</span>  <br>console.<span class="hljs-built_in">log</span>(exports == <span class="hljs-built_in">module</span>.exports);        // <span class="hljs-literal">true</span>  <br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">module</span>);<br>/**<br> Module &#123;<br>  id: <span class="hljs-string">&#x27;.&#x27;</span>,<br>  exports: &#123;&#125;,<br>  parent: null,<br>  filename: <span class="hljs-string">&#x27;/Users/larben/Desktop/demo.js&#x27;</span>,<br>  <span class="hljs-built_in">loaded</span>: <span class="hljs-literal">false</span>,<br>  children: [],<br>  paths:<br>   [ <span class="hljs-string">&#x27;/Users/larben/Desktop/node_modules&#x27;</span>,<br>     <span class="hljs-string">&#x27;/Users/larben/node_modules&#x27;</span>,<br>     <span class="hljs-string">&#x27;/Users/node_modules&#x27;</span>,<br>     <span class="hljs-string">&#x27;/node_modules&#x27;</span> ] &#125;<br> */<br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><ol><li>每个js文件一创建，都有一个var exports &#x3D; module.exports &#x3D; {},使exports和module.exports都指向一个空对象。</li><li>module.exports和exports所指向的内存地址相同</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git-flow</title>
    <link href="/2017/06/19/2017-06-19-git-flow/"/>
    <url>/2017/06/19/2017-06-19-git-flow/</url>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://www.thinktxt.com/git/2017/06/16/create-git-flow-efficient-work-flow.html">https://www.thinktxt.com/git/2017/06/16/create-git-flow-efficient-work-flow.html</a></p><h1 id="master"><a href="#master" class="headerlink" title="master"></a>master</h1><p>【线上的分支】 - 是线上版本分支，也可以理解为随时可以发布的稳定版本，要求在每次版本封版后由主程序员合并release分支代码进来，开发人员不可以随意操作。</p><h1 id="develop"><a href="#develop" class="headerlink" title="develop"></a>develop</h1><p>【开发基础分支】 - 包含待上线的新内容，是你进行任何新的<strong>开发的基础分支</strong>。当你开始一个新的功能分支时，它将是开发的基础，由此拉出feature分支准备新功能开发。另外，该分支也汇集所有已经完成的功能，并等待经过release分支测试通过后最终被整合到 master 分支中。</p><h1 id="release"><a href="#release" class="headerlink" title="release"></a>release</h1><p>【上线分支】 - 当开发结束后用来提测并且为本次版本最终上线的分支，所有测试阶段的bug全部在此分支修复，测试结束后合并到 <code>master</code> 和 <code>develop</code> 分支中。</p><p>当准备将develop上的新内容发布到生产环境时，需要拉release分支。release分支可以隔离develop后续对本次上线的影响。当release拉出来后，不用担心其它的东西会合过来，只需要在这上面专注测试和修复bug。</p><h1 id="feature"><a href="#feature" class="headerlink" title="feature"></a>feature</h1><p>【新功能开发分支】 - 开发新功能时以develop分支为基础建立新的feature分支进行单独开发。当需要此功能的时候，只需要将该 feature 分支合并入 develop 分支，下次一并提测即可。</p><p>这样设计可以避免这个功能在尚未开发完成或者通过测试的时候混入发布的版本，而导致不可预知的不稳定。当然也可以同时开启多个 feature 分支进行不同新功能开发，在合适的时候合并提测即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript深入浅出系列-es6-编写现代Javascript代码</title>
    <link href="/2017/06/01/2017-06-01-javascript-%E7%BC%96%E5%86%99%E7%8E%B0%E4%BB%A3Javascript%E4%BB%A3%E7%A0%81/"/>
    <url>/2017/06/01/2017-06-01-javascript-%E7%BC%96%E5%86%99%E7%8E%B0%E4%BB%A3Javascript%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>原文： <a href="https://dev.to/scastiel/writing-modern-javascript-code">https://dev.to/scastiel/writing-modern-javascript-code</a></p><h1 id="编写现代Javascript代码"><a href="#编写现代Javascript代码" class="headerlink" title="编写现代Javascript代码"></a>编写现代Javascript代码</h1><p>记得以前Javascript还处于是一种改变页面元素的语言？这些日子已经过去了，每种语言随着时间的推移而发展，我们使用它们也是如此，看看你一两年前写的代码：你不感到羞愧吗？如果是，这篇帖子就是写给你的<br>🙂</p><p>在这篇文章里，我会尝试这里列出一些很好的做法，使您的JavaScript代码更容易编写，阅读和维护</p><h1 id="使用可以格式化代码的linter"><a href="#使用可以格式化代码的linter" class="headerlink" title="使用可以格式化代码的linter"></a>使用可以格式化代码的linter</h1><p>第一个建议是使用一个代码linter,他会检查你的每一行代码是否遵守统一规则，特别是几个开发人员协同开发一个项目的时候：缩减，括号中的空格，将&#x3D;&#x3D;替换为&#x3D;&#x3D;&#x3D;…</p><p>但更重要的是，尽可能让您的linter自动修复您的代码。 ESLint非常好（使用–fix选项），它与所有主要的IDE集成，可以在保存时自动修复文件。</p><p>您也可以使用更为专注于格式化的“漂亮”，而不是检查，但结果基本相同😉</p><p>下一点将帮助你选择你的linter使用的规则:</p><h1 id="为你的linter使用现代规则"><a href="#为你的linter使用现代规则" class="headerlink" title="为你的linter使用现代规则"></a>为你的linter使用现代规则</h1><p>如果您想知道您的代码需要什么规则，这里有一个提示:StandardJS.<br>这是一个非常严格的linter,不会在规则中给您任何选择，但是它们中的每一个都越来越被社区所承认。下面是一些例子:</p><ul><li>使用2空格缩进(我曾经使用4个空格,但实际上使用2是相当不错)</li><li>没有分号</li><li>在关键字(如if)和花括号后加空格</li><li>and <a href="https://standardjs.com/rules-zhcn.html">a lot more</a>.</li></ul><h1 id="使用ES2015-新特性"><a href="#使用ES2015-新特性" class="headerlink" title="使用ES2015 +新特性"></a>使用ES2015 +新特性</h1><p>如果你用JavaScript开发,你还没有听说过ES2015 +(或ES6 ES7…)特性。这是不可或缺的了:</p><ul><li>箭头函数：编写函数可以像 x &#x3D;&gt; x * 2 是非常有用的函数式编程</li><li>类：停止使用原型函数，类更酷（但是不要滥用,JavaScript比任何面向对象的语言都要好得多）</li><li>使用数组和对象进行操作</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">function <span class="hljs-built_in">doSomething</span>() &#123;<br>  const <span class="hljs-selector-tag">a</span> = <span class="hljs-built_in">doSomethingElse</span>()<br>  const <span class="hljs-selector-tag">b</span> = <span class="hljs-built_in">doSomethingWithA</span>(a)<br>  const otherResults = &#123; c: <span class="hljs-string">&#x27;😺&#x27;</span>, d: <span class="hljs-string">&#x27;🐶&#x27;</span> &#125;<br>  return &#123; <span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span>, ..<span class="hljs-selector-class">.otherResults</span> &#125; <span class="hljs-comment">// 相当于 &#123; a: a, b: b，c: &#x27;😺&#x27;, d: &#x27;🐶&#x27; &#125;</span><br>&#125;<br>const &#123; <span class="hljs-selector-tag">a</span>, c, ..<span class="hljs-selector-class">.rest</span> &#125; = <span class="hljs-built_in">doSomething</span>() <span class="hljs-comment">// 同样适用于数组</span><br><span class="hljs-comment">// `rest` 相当于 &#123; b: ..., d: &#x27;🐶&#x27; &#125;</span><br></code></pre></td></tr></table></figure><ul><li>使用更容易的使用的async&#x2F;await:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomething</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> a = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getValueForA</span>()<br>  <span class="hljs-keyword">const</span> b = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getValueForBFromA</span>(a)<br>  <span class="hljs-keyword">const</span> [c, d] = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>    <span class="hljs-comment">// parallel execution</span><br>    <span class="hljs-title function_">getValueForC</span>(), <span class="hljs-title function_">getValueForDFromB</span>(b)<br>  ])<br>  <span class="hljs-keyword">const</span> total = <span class="hljs-keyword">await</span> <span class="hljs-title function_">calculateTotal</span>(a, b, c, d)<br>  <span class="hljs-keyword">return</span> total / <span class="hljs-number">1000</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们怎样使用这些特性呢？我的一篇文章给你一些建议（顺便说一下,与最新版本的Node.js,你可能不需要babel就可以使用最新的一些特性）</p><h1 id="使用函数式编程"><a href="#使用函数式编程" class="headerlink" title="使用函数式编程"></a>使用函数式编程</h1><p>现在，函数式编程已经取得了很大的成功，不仅仅是在JavaScript中。这是什么原因呢?它使代码更加可预测、更安全、更确定，并且在使用时更容易维护。以下是一些简单的建议:</p><p>首先，停止使用for循环，在大多数情况下你不需要他们，例如：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const arr = [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;first&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">13</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;second&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">7</span> &#125;]<br><br><span class="hljs-comment">// 以前:</span><br>const res = &#123;&#125;<br><span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">length</span>; i++) &#123;<br>  const calculatedValue = arr[i].value * <span class="hljs-number">10</span><br>  <span class="hljs-keyword">if</span> (calculatedValue &gt; <span class="hljs-number">100</span>) &#123;<br>    res[arr[i].name] = calculatedValue<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 更好:</span><br>const res = arr<br>  .<span class="hljs-built_in">map</span>(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> (&#123; <span class="hljs-attr">name</span>: elem.name, <span class="hljs-attr">calculatedValue</span>: elem.value * <span class="hljs-number">10</span> &#125;))<br>  .<span class="hljs-built_in">filter</span>(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> elem.calculatedValue &gt; <span class="hljs-number">100</span>)<br>  .<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, elem</span>) =&gt;</span> (&#123;<br>    [elem.name]: calculatedValue,<br>    ...acc<br>  &#125;), &#123;&#125;)<br></code></pre></td></tr></table></figure><p>好吧，我承认这是一个非常极端的例子，如果你不经常使用函数式编程的情况下，他看起来会非常的复杂，也许我们可以这样简化一下：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const enrichElementWithCalculatedValue =<br>  <span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> (&#123; <span class="hljs-attr">name</span>: elem.name, <span class="hljs-attr">calculatedValue</span>: elem.value * <span class="hljs-number">10</span> &#125;)<br>const filterElementsByValue = <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span><br>  elem =&gt; elem.calculatedValue &gt; value<br>const aggregateElementInObject = <span class="hljs-function">(<span class="hljs-params">acc, elem</span>) =&gt;</span> (&#123;<br>  [elem.name]: calculatedValue,<br>  ...acc<br>&#125;)<br>const res = arr<br>  .<span class="hljs-built_in">map</span>(enrichElementWithCalculatedValue)<br>  .<span class="hljs-built_in">filter</span>(filterElementsByValue(<span class="hljs-number">100</span>))<br>  .<span class="hljs-built_in">reduce</span>(aggregateElementInObject, &#123;&#125;)<br></code></pre></td></tr></table></figure><p>这里我们定义了三个函数基本上就是它们的名字</p><p>第二:创建局部函数(即使是在现有函数中)，无需注释就可以记录代码。</p><p>注意，三个局部函数不修改它们执行的上下文。没有外部变量被修改,没有被其他方法被调用，<br>他们称为纯函数在函数式编程中。他们有一些巨大的优势:</p><ul><li>它们是易测试的，因为从给定的参数来说，只有一个可能的结果，即使我们把函数多调用几次;</li><li>无论应用程序的实际状态如何，它们都可以提供相同的结果;</li><li>在函数调用之前和之后，应用程序状态保持不变。</li></ul><p>所以我的第三条建议是:多使用纯函数!</p><h1 id="最后还有一些其他的建议"><a href="#最后还有一些其他的建议" class="headerlink" title="最后还有一些其他的建议"></a>最后还有一些其他的建议</h1><ul><li>经常使用异步代码，多使用promise，查看带有<a href="http://reactivex.io/rxjs/">RxJS</a>的观察效果(<a href="http://reactivex.io/learnrx/">有一个关于函数编程的很好的教程，可以测试你的函数式编程</a>)</li><li>编写测试代码!应该是显而易见的，但是我知道很多项目都有未经测试的代码，尽管测试JavaScript(前端或后端)并不像看起来那么困难。</li><li>使用语言的新特性：例如停止使用<code>arr.indexOf(elem) !== -1</code> 赞成使用<code>arr.includes(elem)</code></li><li>多阅读技术文章：<a href="https://www.reddit.com/r/javascript/">JavaScript subreddit</a>是了解生态系统中最酷的实践的一个很好的来源</li><li>哦，最后，我能给你最好的建议是：总是重构你的代码！改进你一年前写的模块？借此机会使用<code>const</code>代替<code>var</code>，使用<code>箭头函数</code>或者<code>async/await</code>来简化代码…总之用最好的代码进行工作!😉</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git常用操作-远程管理与分支管理</title>
    <link href="/2016/12/21/2016-12-21-git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C-%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <url>/2016/12/21/2016-12-21-git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C-%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="git常用操作之远程管理与分支管理"><a href="#git常用操作之远程管理与分支管理" class="headerlink" title="git常用操作之远程管理与分支管理"></a>git常用操作之远程管理与分支管理</h1><h2 id="远程管理"><a href="#远程管理" class="headerlink" title="远程管理"></a>远程管理</h2><ul><li><p>克隆远程库， git clone <a href="mailto:&#x67;&#105;&#x74;&#x40;&#103;&#x69;&#x74;&#104;&#117;&#98;&#46;&#x63;&#x6f;&#109;">&#x67;&#105;&#x74;&#x40;&#103;&#x69;&#x74;&#104;&#117;&#98;&#46;&#x63;&#x6f;&#109;</a>:meiminjun&#x2F;meiminjun.github.io.git</p></li><li><p>要关联一个远程库，使用命令git remote add origin git@server-name:path&#x2F;repo-name.git；</p></li><li><p>关联后，使用命令git push -u origin master第一次推送master分支的所有内容；</p></li><li><p>此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；</p></li></ul><blockquote><p>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p></blockquote><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p><p>一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：<br><img src="http://ww3.sinaimg.cn/large/69a9ed59gw1fb1upo5iqkj208d047q2w.jpg"></p><p>每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长,</p><p>当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：</p><p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1fb1uriy9a3j20a706h74a.jpg"></p><p>Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！</p><p>不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：</p><p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1fb1ut2uf8qj20dq06hmx7.jpg"></p><p>假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：</p><p><img src="http://ww4.sinaimg.cn/large/69a9ed59gw1fb1utvdg4ij20br0660st.jpg"></p><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p><p>合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：</p><p><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1fb1uvckv5pj20br04fdfu.jpg"></p><p>举个例子：</p><p>首先，我们创建dev分支，然后切换到dev分支：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">git checkout -b test<br>Switched <span class="hljs-built_in">to</span> <span class="hljs-keyword">a</span> <span class="hljs-built_in">new</span> branch <span class="hljs-string">&#x27;test&#x27;</span><br></code></pre></td></tr></table></figure><p>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch <span class="hljs-built_in">test</span><br>git checkout <span class="hljs-built_in">test</span><br>Switched to branch <span class="hljs-string">&#x27;test&#x27;</span><br></code></pre></td></tr></table></figure><p>然后，用git branch命令查看当前分支：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git branch<br>  develop<br>  feature/mysql<br>  <span class="hljs-keyword">master</span><br><span class="hljs-title">* test</span><br></code></pre></td></tr></table></figure><p>git branch命令会列出所有分支，当前分支前面会标一个*号。</p><p>然后，我们就可以在test分支上正常提交，比如添加一个branch.js文件</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m &quot;添加文件&quot;<br></code></pre></td></tr></table></figure><p>这时，我们切换到master分支</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git checkout <span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure><p>切换回master分支后，刚才添加branch.js文件不见了，因为那个提交是在test分支上，而master分支此刻的提交点并没有变：<br><img src="http://ww1.sinaimg.cn/large/69a9ed59gw1fb1vqyzyh0j20bd066aa3.jpg"></p><p>现在，我们把test分支的工作成果合并到master分支上：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> merge test<br><span class="hljs-attribute">Updating</span> <span class="hljs-number">967984</span>f..ecc13e5<br><span class="hljs-attribute">Fast</span>-forward<br> <span class="hljs-attribute">git</span>/branch.js           | <span class="hljs-number">1</span> +<br></code></pre></td></tr></table></figure><p>git merge命令用于合并指定分支到当前分支。合并后，再查看里面的内容，就可以看到，和test分支的最新提交是完全一样的。</p><p>合并完成后，就可以放心地删除dev分支了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -d <span class="hljs-built_in">test</span><br><br></code></pre></td></tr></table></figure><blockquote><p>注意删除只能删除其他分支，不能删除当前分支</p></blockquote><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全</p><p>小结:</p><p>查看分支：git branch</p><p>创建分支：git branch <name></p><p>切换分支：git checkout <name></p><p>创建+切换分支：git checkout -b <name></p><p>合并某分支到当前分支：git merge <name></p><p>删除分支：git branch -d <name></p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git常用操作-回滚代码</title>
    <link href="/2016/12/01/2016-12-20-git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2016/12/01/2016-12-20-git%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="git常用操作-回滚代码"><a href="#git常用操作-回滚代码" class="headerlink" title="git常用操作-回滚代码"></a>git常用操作-回滚代码</h1><h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><ul><li>git init 初始化一个git仓库</li><li>git add readme.txt 把文件添加到仓库(可以后面添加多个文件)</li><li>git add . 提交当前目录到缓存区</li><li>git commit -m “wrote a readme file” 把文件提交到仓库：</li><li>git status命令可以让我们时刻掌握仓库当前的状态</li><li>git diff 查看修改记录(按q退出)</li><li>git diff test.js 查看test.js修改记录(按q退出)</li><li>git checkout – file 在add之前修改过的记录撤销到与仓库一致</li><li>git reset HEAD – file 把你add到缓存区的文件撤销到add之前</li><li>git diff HEAD – file 查看当前文件与仓库文件的区别</li></ul><h2 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h2><p>你不断对文件进行修改，然后不断提交修改到版本库里，就好比玩RPG游戏时，每通过一关就会自动把游戏状态存盘，如果某一关没过去，你还可以选择读取前一关的状态。有些时候，在打Boss之前，你会手动存盘，以便万一打Boss失败了，可以从最近的地方重新开始。Git也是一样，每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在Git中被称为commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个commit恢复，然后继续工作，而不是把几个月的工作成果全部丢失。</p><p>在实际工作中，我们脑子里怎么可能记得一个几千行的文件每次都改了什么内容，不然要版本控制系统干什么。版本控制系统肯定有某个命令可以告诉我们历史记录，在Git中，我们用git log命令查看：</p><p>打印日志：</p><p>git log 显示从最近到最远的提交日志</p><p>git log –pretty&#x3D;oneline 显示简要版本</p><p>git reflog 显示所有分支的<strong>全部提交记录</strong> </p><p>开始穿梭到之前存盘（commit）的版本</p><p>git reset –hard HEAD^ </p><p>Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164…882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上100个版本写100个^比较容易数不过来，所以写成<code>HEAD~100</code>。</p><p>git reset –hard d50672e 回滚到特定版本</p><p>总结：</p><ul><li><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。</p></li><li><p>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</p></li><li><p>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</p></li></ul><h2 id="工作区与缓存区"><a href="#工作区与缓存区" class="headerlink" title="工作区与缓存区"></a>工作区与缓存区</h2><p>工作区：就是你电脑里看到的目录,也就是你的项目目录</p><p>版本库（Repository）:工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</p><p><img src="http://ww2.sinaimg.cn/large/69a9ed59gw1faxekavuo1j20cq06iaa8.jpg" alt="缓存区"></p><p>前面我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><p>为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">touch <span class="hljs-keyword">man</span>.js<br><br><span class="hljs-keyword">cat</span> &gt; <span class="hljs-keyword">man</span>.js<br>输入管理<br><br><span class="hljs-keyword">cat</span> <span class="hljs-keyword">man</span>.js<br></code></pre></td></tr></table></figure><p>然后，</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">git <span class="hljs-built_in">add</span> man.js<br>git status<br>Changes <span class="hljs-keyword">to</span> <span class="hljs-keyword">be</span> committed:<br>  (use <span class="hljs-string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> <span class="hljs-keyword">to</span> unstage)<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-keyword">file</span>:   man.js<br><br></code></pre></td></tr></table></figure><p>然后再次修改man.js，</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> <span class="hljs-keyword">man</span>.js<br>测试一个内容<br>测试<br>新增修改<br><br></code></pre></td></tr></table></figure><p>提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;新增修改&quot;</span><br>[feature/git学习 4f8114c] 新增修改<br> 1 file changed, 2 insertions(+)<br> create mode 100644 git/man.js<br></code></pre></td></tr></table></figure><p>提交后，再看看状态：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">Changes not staged <span class="hljs-keyword">for</span> commit:<br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">update</span> what will <span class="hljs-keyword">be</span> committed)<br>  (use <span class="hljs-string">&quot;git checkout -- &lt;file&gt;...&quot;</span> <span class="hljs-keyword">to</span> discard <span class="hljs-keyword">changes</span> in working directory)<br><br>        modified:   man.js<br><br><span class="hljs-keyword">no</span> <span class="hljs-keyword">changes</span> added <span class="hljs-keyword">to</span> commit (use <span class="hljs-string">&quot;git add&quot;</span> <span class="hljs-built_in">and</span>/<span class="hljs-built_in">or</span> <span class="hljs-string">&quot;git commit -a&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>咦，怎么第二次的修改没有被提交？</p><p>我们回顾一下操作过程：</p><p>第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git commit</p><blockquote><p>Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p></blockquote><p>提交后，用git diff HEAD – readme.txt命令可以查看工作区和版本库里面最新版本的区别：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs diff">git diff HEAD --man.js<br><br><span class="hljs-comment">diff --git a/git/man.js b/git/man.js</span><br><span class="hljs-comment">index 5884356..f434b08 100644</span><br><span class="hljs-comment">--- a/git/man.js</span><br><span class="hljs-comment">+++ b/git/man.js</span><br><span class="hljs-meta">@@ -1,2 +1,3 @@</span><br> 测试一个内容<br> 测试<br><span class="hljs-addition">+新增修改</span><br></code></pre></td></tr></table></figure><p>可见，第二次修改确实没有被提交。<br>如果提交完毕了则显示的是：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">nothing</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">commit</span>, working directory clean<br></code></pre></td></tr></table></figure><p>总结：<br>Git是如何跟踪修改的？每次修改，如果不add到暂存区，那就不会加入到commit中</p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>举例说明：</p><p>目前的最新文件：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> <span class="hljs-keyword">man</span>.js<br>测试一个内容<br>测试<br>新增修改<br></code></pre></td></tr></table></figure><p>这时候你新增了一行</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> <span class="hljs-keyword">man</span>.js<br>测试一个内容<br>测试<br>新增修改<br>新增一行代码<br></code></pre></td></tr></table></figure><p>突然，你发现新增的代码有点问题你想回退到之前版本</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim">git status<br>Changes not staged <span class="hljs-keyword">for</span> commit:<br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">update</span> what will <span class="hljs-keyword">be</span> committed)<br>  (use <span class="hljs-string">&quot;git checkout -- &lt;file&gt;...&quot;</span> <span class="hljs-keyword">to</span> discard <span class="hljs-keyword">changes</span> in working directory)<br><br>        modified:   man.js<br><br><span class="hljs-keyword">no</span> <span class="hljs-keyword">changes</span> added <span class="hljs-keyword">to</span> commit (use <span class="hljs-string">&quot;git add&quot;</span> <span class="hljs-built_in">and</span>/<span class="hljs-built_in">or</span> <span class="hljs-string">&quot;git commit -a&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>你可以发现，Git会告诉你，git checkout – file可以丢弃工作区的修改：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">git checkout <span class="hljs-comment">-- man.js </span><br><br></code></pre></td></tr></table></figure><p>命令git checkout – man.js意思就是，把man.js文件在工作区的修改全部撤销，这里有两种情况：</p><p>一种是man.js自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p><p>一种是man.js已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><blockquote><p>git checkout – file命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令</p></blockquote><p>下面一种情况是当你已经add到缓存区了，你想撤销</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">add </span>man.<span class="hljs-keyword">js</span><br><span class="hljs-keyword"></span>git status<br>Changes to <span class="hljs-keyword">be </span>committed:<br>  (use <span class="hljs-string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">        modified:</span>   man.<span class="hljs-keyword">js</span><br><span class="hljs-keyword"></span><br></code></pre></td></tr></table></figure><p>Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">git reset HEAD <span class="hljs-keyword">man</span>.js<br></code></pre></td></tr></table></figure><p>git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。</p><p>再用git status查看一下，现在暂存区是干净的，工作区有修改：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">Changes not staged <span class="hljs-keyword">for</span> commit:<br>  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">update</span> what will <span class="hljs-keyword">be</span> committed)<br>  (use <span class="hljs-string">&quot;git checkout -- &lt;file&gt;...&quot;</span> <span class="hljs-keyword">to</span> discard <span class="hljs-keyword">changes</span> in working directory)<br><br>        modified:   man.js<br><br><span class="hljs-keyword">no</span> <span class="hljs-keyword">changes</span> added <span class="hljs-keyword">to</span> commit (use <span class="hljs-string">&quot;git add&quot;</span> <span class="hljs-built_in">and</span>/<span class="hljs-built_in">or</span> <span class="hljs-string">&quot;git commit -a&quot;</span>)<br></code></pre></td></tr></table></figure><p>如果想丢弃工作区的修改,则继续</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git checkout <span class="hljs-comment">-- man.js</span><br></code></pre></td></tr></table></figure><p>小结：</p><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>场景说明：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">git add man<span class="hljs-selector-class">.js</span><br>git commit -m &quot;测试删除&quot;<br><span class="hljs-selector-attr">[feature/git学习 fe3e350]</span> 测试删除<br> <span class="hljs-number">1</span> file changed, <span class="hljs-number">1</span> <span class="hljs-built_in">insertion</span>(+), <span class="hljs-number">3</span> <span class="hljs-built_in">deletions</span>(-)<br></code></pre></td></tr></table></figure><p>一般情况下如果你删除文件的时候，就直接把文件给删了，或者rm 命令删除了</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">rm</span> <span class="hljs-keyword">man</span>.js<br></code></pre></td></tr></table></figure><p>这个时候，Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata">git status<br><span class="hljs-keyword">On</span> branch feature/git学习<br>Changes not staged <span class="hljs-keyword">for</span> commit:<br>  (<span class="hljs-keyword">use</span> <span class="hljs-string">&quot;git add/rm &lt;file&gt;...&quot;</span> to <span class="hljs-keyword">update</span> what will be committed)<br>  (<span class="hljs-keyword">use</span> <span class="hljs-string">&quot;git checkout -- &lt;file&gt;...&quot;</span> to <span class="hljs-keyword">discard</span> changes <span class="hljs-keyword">in</span> working directory)<br><br>        deleted:    <span class="hljs-keyword">man</span>.js<br><br><span class="hljs-keyword">no</span> changes added to commit (<span class="hljs-keyword">use</span> <span class="hljs-string">&quot;git add&quot;</span> and/or <span class="hljs-string">&quot;git commit -a&quot;</span>)<br></code></pre></td></tr></table></figure><p>现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">git <span class="hljs-keyword">rm</span> <span class="hljs-keyword">man</span>.js<br><span class="hljs-keyword">rm</span> &#x27;git/<span class="hljs-keyword">man</span>.js&#x27;<br>git commit -<span class="hljs-keyword">m</span> <span class="hljs-string">&quot;remove man.js&quot;</span><br>feature/git学习 8a1abac] remove <span class="hljs-keyword">man</span>.js<br> 1 <span class="hljs-keyword">file</span> changed, 1 deletion(-)<br> delete mode 100644 git/<span class="hljs-keyword">man</span>.js<br></code></pre></td></tr></table></figure><p>文件就从版本库中被删除了。</p><p>另一种情况，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git checkout <span class="hljs-comment">-- man.js</span><br></code></pre></td></tr></table></figure><p>git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML5-API汇总学习</title>
    <link href="/2016/11/30/2016-11-30-HTML5-API-all/"/>
    <url>/2016/11/30/2016-11-30-HTML5-API-all/</url>
    
    <content type="html"><![CDATA[<p>看<code>MDN</code> 的文档才知道HTML5很多API还没有学习过，这里记录学习HTML5 新 api。</p><p><code>&lt;!DOCTYPE html&gt; &lt;meta charset=&quot;UTF-8&quot;&gt;</code></p><p>HTML5是最新进化的标准,它定义了HTML。这个词代表了两个不同的概</p><ul><li>这是一个新版本的HTML语言,与新元素、属性和行为</li><li>和一组更大的技术,允许更加多样化和功能强大的Web站点和应用程序。这组有时被称为HTML5&amp;朋友和通常缩短HTML5。</li></ul><p>HTML5 大概包含以下几点</p><ol><li>语义:允许您更精确地描述你的内容是什么。</li><li>连通性:允许您以新的和创新的方式与服务器通信。</li><li>离线存储:允许网页在客户端本地存储数据和离线操作更有效率。</li><li>多媒体:制作视频和音频开放网络中的一等公民。</li><li>2d &#x2F; 3d图形和效果:允许一个更加多样化的选择范围。</li><li>性能和集成:提供更大的速度优化和更好的使用计算机硬件。</li><li>设备访问:允许使用各种输入和输出设备。</li><li>样式:让作者编写更复杂的主题。</li></ol>   <a class="fancybox_img"  rel="group" href="http://resource.zwjay.cn/jekyll/img/html5-all.png">        <img src="http://resource.zwjay.cn/jekyll/img/html5-all.png" alt="html5-all" />   </a><span id="more"></span><h1 id="语义化"><a href="#语义化" class="headerlink" title="语义化"></a>语义化</h1><h2 id="语义化标签，在-HTML4-中-lt-div-gt-标签不精确，不够明显的描述文档轮廓。在-HTML5-更新语义化标签。"><a href="#语义化标签，在-HTML4-中-lt-div-gt-标签不精确，不够明显的描述文档轮廓。在-HTML5-更新语义化标签。" class="headerlink" title="语义化标签，在 HTML4 中 &lt;div&gt; 标签不精确，不够明显的描述文档轮廓。在 HTML5 更新语义化标签。"></a>语义化标签，在 <code>HTML4</code> 中 <code>&lt;div&gt;</code> 标签不精确，不够明显的描述文档轮廓。在 <code>HTML5</code> 更新语义化标签。</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Forest elephants<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span> <br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Introduction<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>In this section, we discuss the lesser known forest elephants.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Habitat<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Forest elephants do not live in trees but among them.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>advertising block<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>(c) 2010 The Example company<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样可以直观的看出html的结构，而且更利于SEO。</p><p>HTML5中引入的新语义元素带来的能力描述web文档的结构和轮廓在一个标准的方式。他们给人们带来一个很大的优势在HTML5浏览器和需要帮助他们理解页面结构,例如人需要一些辅助技术的帮助。这些新的语义元素是使用简单,用很少的负担,也可以工作在non-HTML5浏览器。因此他们应该使用没有限制。</p><h2 id="标签使用选择顺序（参考）"><a href="#标签使用选择顺序（参考）" class="headerlink" title="标签使用选择顺序（参考）"></a>标签使用选择顺序（参考）</h2>   <a class="fancybox_img"  rel="group" href="http://resource.zwjay.cn/jekyll/img/in-post/html-tag.png">        <img src="http://resource.zwjay.cn/jekyll/img/in-post/html-tag.png" alt="html5-all" />   </a><h2 id="video-audio"><a href="#video-audio" class="headerlink" title="video audio"></a><code>video</code> <code>audio</code></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://v2v.cc/~j/theora_testsuite/320x240.ogg&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><br>  Your browser does not support the <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>video<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> element.<br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>controls : Displays the standard HTML5 controls for the audio on the web page.</li><li>autoplay : Makes the audio play automatically.</li><li>loop : Make the audio repeat (loop) automatically.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/test/audio.ogg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Your browser does not support the <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>audio<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> element.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>“none” does not buffer the file</li><li>“auto” buffers the media file</li><li>“metadata” buffers only the metadata for the file</li></ul><h3 id="用JS控制多媒体标签"><a href="#用JS控制多媒体标签" class="headerlink" title="用JS控制多媒体标签"></a>用JS控制多媒体标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;audio id=<span class="hljs-string">&quot;demo&quot;</span> src=<span class="hljs-string">&quot;audio.mp3&quot;</span>&gt;&lt;/audio&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;document.getElementById(&#x27;demo&#x27;).play()&quot;</span>&gt;</span>Play the Audio<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;document.getElementById(&#x27;demo&#x27;).pause()&quot;</span>&gt;</span>Pause the Audio<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;document.getElementById(&#x27;demo&#x27;).volume+=0.1&quot;</span>&gt;</span>Increase Volume<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;document.getElementById(&#x27;demo&#x27;).volume-=0.1&quot;</span>&gt;</span>Decrease Volume<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>更多API点击 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement">https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement</a></p><h2 id="在HTML5中的表单"><a href="#在HTML5中的表单" class="headerlink" title="在HTML5中的表单"></a>在HTML5中的表单</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-pattern">https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-pattern</a></p><h3 id="input标签-type-属性"><a href="#input标签-type-属性" class="headerlink" title="input标签 type 属性"></a><code>input</code>标签 <code>type</code> 属性</h3><ul><li>search </li><li>tel</li><li>url</li><li>email</li><li>number</li><li>text</li><li>checkbox</li><li>radio</li><li>date</li><li>color</li><li>datetime</li><li>file</li><li>image</li><li>hidden</li><li>month</li><li>password</li><li>range</li><li>reset</li><li>submit</li><li>week</li></ul><p>其他属性</p><ul><li>list  用法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&quot;browsers&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myBrowser&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;browsers&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Chrome&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Firefox&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Internet Explorer&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Opera&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Safari&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Microsoft Edge&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>pattern<br> 一个正则表达式检查与控制的价值。模式必须匹配整个价值,而不仅仅是一个子集。使用title属性来描述模式来帮助用户。这个属性适用于当type属性的值是文本,搜索,电话,地址,电子邮件,或密码,否则它将被忽略。正则表达式语言JavaScript RegExp算法是一样的,与“u”参数,使其治疗模式的序列unicode代码点。模式不是包围正斜杠。</li></ul><h2 id="MathML-数学表达式标签"><a href="#MathML-数学表达式标签" class="headerlink" title="MathML (数学表达式标签)"></a>MathML (数学表达式标签)</h2><p><math style="display: block;"> <mtable columnalign="right center left"> <mtr> <mtd> <msup> <mrow> <mo> ( </mo> <mi> a </mi> <mo> + </mo> <mi> b </mi> <mo> ) </mo> </mrow> <mn> 2 </mn> </msup> </mtd> <mtd> <mo> &#x3D; </mo> </mtd> <mtd> <msup><mi> c </mi><mn>2</mn></msup> <mo> + </mo> <mn> 4 </mn> <mo> ⋅ </mo> <mo>(</mo> <mfrac> <mn> 1 </mn> <mn> 2 </mn> </mfrac> <mi> a </mi><mi> b </mi> <mo>)</mo> </mtd> </mtr> <mtr> <mtd> <msup><mi> a </mi><mn>2</mn></msup> <mo> + </mo> <mn> 2 </mn><mi> a </mi><mi> b </mi> <mo> + </mo> <msup><mi> b </mi><mn>2</mn></msup> </mtd> <mtd> <mo> &#x3D; </mo> </mtd> <mtd> <msup><mi> c </mi><mn>2</mn></msup> <mo> + </mo> <mn> 2 </mn><mi> a </mi><mi> b </mi> </mtd> </mtr> <mtr> <mtd> <msup><mi> a </mi><mn>2</mn></msup> <mo> + </mo> <msup><mi> b </mi><mn>2</mn></msup> </mtd> <mtd> <mo> &#x3D; </mo> </mtd> <mtd> <msup><mi> c </mi><mn>2</mn></msup> </mtd> </mtr> </mtable> </math></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/MathML">https://developer.mozilla.org/en-US/docs/Web/MathML</a></p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><h2 id="Web-Sockets"><a href="#Web-Sockets" class="headerlink" title="Web Sockets"></a>Web Sockets</h2><p>允许创建一个永久的页面和服务器之间的连接和交换,是HTML5一种新的协议。它实现了浏览器与服务器全双工通信(full-duplex)。一开始的握手需要借助HTTP请求完成。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API</a></p><h2 id="Server-Sent-服务端推送事件"><a href="#Server-Sent-服务端推送事件" class="headerlink" title="Server-Sent 服务端推送事件"></a>Server-Sent 服务端推送事件</h2><p><a href="http://www.ibm.com/developerworks/cn/web/1307_chengfu_serversentevent/">http://www.ibm.com/developerworks/cn/web/1307_chengfu_serversentevent&#x2F;</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events">https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events&#x2F;Using_server-sent_events</a></p><p><code>EventSource</code> 对象提供的标准事件</p><table><thead><tr><th>名称</th><th>说明</th><th>事件处理方法</th></tr></thead><tbody><tr><td>open</td><td>当成功与服务器建立连接时产生</td><td></td></tr><tr><td>message</td><td>当收到服务器发送的事件时产生</td><td>onmessage</td></tr><tr><td>error</td><td>当出现错误时产生</td><td>onerror</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> es = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventSource</span>(<span class="hljs-string">&#x27;events&#x27;</span>);<br>es.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">data</span>);<br>&#125;;<br><br>es.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;myevent&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">data</span>);<br>&#125;);<br><br> <span class="hljs-keyword">var</span> es = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventSource</span>(<span class="hljs-string">&#x27;sse/movement&#x27;</span>); <br> es.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123; <br>     <span class="hljs-keyword">var</span> pos = e.<span class="hljs-property">data</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>), x = pos[<span class="hljs-number">0</span>], y = pos[<span class="hljs-number">1</span>]; <br>     $(<span class="hljs-string">&#x27;#box&#x27;</span>).<span class="hljs-title function_">css</span>(&#123; <br>         left : x + <span class="hljs-string">&#x27;px&#x27;</span>, <br>         top : y + <span class="hljs-string">&#x27;px&#x27;</span> <br>         &#125;); <br>     &#125;);<br></code></pre></td></tr></table></figure><blockquote><p>第一种办法是在其他浏览器上使用原生 EventSource 对象，而在 IE 上则使用简易轮询或 COMET 技术来实现；另外一种做法是使用 polyfill 技术，即使用第三方提供的 JavaScript 库来屏蔽浏览器的不同。本文使用的是 polyfill 技术，只需要在页面中加载第三方 JavaScript 库即可。应用本身的浏览器端代码并不需要进行改动。一般推荐使用第二种做法，因为这样的话，在服务器端只需要使用一种实现技术即可。</p></blockquote><h2 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h2><p>RTC代表实时通信的技术,允许连接到其他人和控制视频会议直接在浏览器中,而不需要一个插件或外部应用程序。WebRTC（Web实时通信）是一种技术，使Web应用程序和网站来捕捉和可选的音频和&#x2F;或视频流媒体，以及交换任意数据之间的浏览器不需要中介。该系列标准包括WebRTC能够共享数据和执行会议的对等，而不需要用户安装插件或任何其他第三方软件。<br>WebRTC由几个相互关联的应用程序接口和协议，共同实现这。文件，你会发现这里将帮助你理解WebRTC的基础，如何设置和使用数据和媒体的连接，和更多。</p><h1 id="离线-amp-存储"><a href="#离线-amp-存储" class="headerlink" title="离线&amp;存储"></a>离线&amp;存储</h1><h2 id="The-application-cache-manifest-x3D-”example-appcache”"><a href="#The-application-cache-manifest-x3D-”example-appcache”" class="headerlink" title="The application cache manifest&#x3D;”example.appcache”"></a>The application cache manifest&#x3D;”example.appcache”</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">manifest</span>=<span class="hljs-string">&quot;example.appcache&quot;</span>&gt;</span><br>  ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这种方式已经过时，不推荐使用。</p><h2 id="在线-amp-离线事件"><a href="#在线-amp-离线事件" class="headerlink" title="在线&amp;离线事件"></a>在线&amp;离线事件</h2><h3 id="navigator-onLine"><a href="#navigator-onLine" class="headerlink" title="navigator.onLine"></a>navigator.onLine</h3><p>navigator.onLine return true&#x2F;false</p><p>e.g</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> status = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;status&quot;</span>);<br>  <span class="hljs-keyword">var</span> log = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;log&quot;</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateOnlineStatus</span>(<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-keyword">var</span> condition = navigator.<span class="hljs-property">onLine</span> ? <span class="hljs-string">&quot;online&quot;</span> : <span class="hljs-string">&quot;offline&quot;</span>;<br><br>    status.<span class="hljs-property">className</span> = condition;<br>    status.<span class="hljs-property">innerHTML</span> = condition.<span class="hljs-title function_">toUpperCase</span>();<br><br>    log.<span class="hljs-title function_">insertAdjacentHTML</span>(<span class="hljs-string">&quot;beforeend&quot;</span>, <span class="hljs-string">&quot;Event: &quot;</span> + event.<span class="hljs-property">type</span> + <span class="hljs-string">&quot;; Status: &quot;</span> + condition);<br>  &#125;<br><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;online&#x27;</span>,  updateOnlineStatus);<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;offline&#x27;</span>, updateOnlineStatus);<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="Web-Storage-API"><a href="#Web-Storage-API" class="headerlink" title="Web Storage API"></a>Web Storage API</h2><ul><li>sessionStorage </li><li>localStorage</li></ul><p><a href="https://github.com/mdn/web-storage-demo">https://github.com/mdn/web-storage-demo</a></p><ul><li><p>Storage.length </p></li><li><p>Storage.key()<br> 当传入一个数字，这个方法会返回这个名字在storage中根据索引。</p></li><li><p>Storage.getItem()<br> 当传入一个<code>key</code>的名字，返回值</p></li><li><p>Storage.setItem()<br> 当传入一个<code>key</code>的名字，会在storage增加这个键值对，或者当存在时更新这个值。</p></li><li><p>Storage.removeItem()<br> 当传入一个<code>key</code>的名字，会删除这个键值对。<br>Storage.clear()<br> 当调用这个方法，会清空storage。</p></li></ul><p>e.g</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;bgcolor&#x27;</span>)) &#123;<br>  <span class="hljs-title function_">populateStorage</span>();<br>&#125;<br><span class="hljs-title function_">setStyles</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">populateStorage</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;bgcolor&#x27;</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;bgcolor&#x27;</span>).<span class="hljs-property">value</span>);<br>  <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;font&#x27;</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;font&#x27;</span>).<span class="hljs-property">value</span>);<br>  <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;image&#x27;</span>, <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;image&#x27;</span>).<span class="hljs-property">value</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setStyles</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> currentColor = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;bgcolor&#x27;</span>);<br>  <span class="hljs-keyword">var</span> currentFont = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;font&#x27;</span>);<br>  <span class="hljs-keyword">var</span> currentImage = <span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;image&#x27;</span>);<br><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;bgcolor&#x27;</span>).<span class="hljs-property">value</span> = currentColor;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;font&#x27;</span>).<span class="hljs-property">value</span> = currentFont;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;image&#x27;</span>).<span class="hljs-property">value</span> = currentImage;<br><br>  htmlElem.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&#x27;#&#x27;</span> + currentColor;<br>  pElem.<span class="hljs-property">style</span>.<span class="hljs-property">fontFamily</span> = currentFont;<br>  imgElem.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;src&#x27;</span>, currentImage);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="IndexedDB-API"><a href="#IndexedDB-API" class="headerlink" title="IndexedDB API"></a>IndexedDB API</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ol><li>Open a database.</li><li>Create an object store in the database. </li><li>Start a transaction and make a request to do some database operation, like adding or retrieving data.</li><li>Wait for the operation to complete by listening to the right kind of DOM event.</li><li>Do something with the results (which can be found on the request object).</li></ol><p><em>兼容</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// In the following line, you should include the prefixes of implementations you want to test.</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">indexedDB</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">indexedDB</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">mozIndexedDB</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitIndexedDB</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">msIndexedDB</span>;<br><span class="hljs-comment">// DON&#x27;T use &quot;var indexedDB = ...&quot; if you&#x27;re not in a function.</span><br><span class="hljs-comment">// Moreover, you may need references to some window.IDB* objects:</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">IDBTransaction</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">IDBTransaction</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitIDBTransaction</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">msIDBTransaction</span> || &#123;<span class="hljs-attr">READ_WRITE</span>: <span class="hljs-string">&quot;readwrite&quot;</span>&#125;; <span class="hljs-comment">// This line should only be needed if it is needed to support the object&#x27;s constants for older browsers</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">IDBKeyRange</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">IDBKeyRange</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitIDBKeyRange</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">msIDBKeyRange</span>;<br><span class="hljs-comment">// (Mozilla has never prefixed these objects, so we don&#x27;t need window.mozIDB*)</span><br></code></pre></td></tr></table></figure><h3 id="基本例子"><a href="#基本例子" class="headerlink" title="基本例子"></a>基本例子</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">dbName</span> = <span class="hljs-string">&quot;the_name&quot;</span>;<br><br><span class="hljs-keyword">var</span> request = indexedDB.<span class="hljs-title function_ invoke__">open</span>(dbName, <span class="hljs-number">2</span>);<br><br>request.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;<br>  <span class="hljs-comment">// Handle errors.</span><br>&#125;;<br>request.onupgradeneeded = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> db = event.target.result;<br><br>  <span class="hljs-comment">// Create an objectStore to hold information about our customers. We&#x27;re</span><br>  <span class="hljs-comment">// going to use &quot;ssn&quot; as our key path because it&#x27;s guaranteed to be</span><br>  <span class="hljs-comment">// unique - or at least that&#x27;s what I was told during the kickoff meeting.</span><br>  <span class="hljs-keyword">var</span> objectStore = db.<span class="hljs-title function_ invoke__">createObjectStore</span>(<span class="hljs-string">&quot;customers&quot;</span>, &#123; <span class="hljs-attr">keyPath</span>: <span class="hljs-string">&quot;ssn&quot;</span> &#125;);<br><br>  <span class="hljs-comment">// Create an index to search customers by name. We may have duplicates</span><br>  <span class="hljs-comment">// so we can&#x27;t use a unique index.</span><br>  objectStore.<span class="hljs-title function_ invoke__">createIndex</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, &#123; <span class="hljs-attr">unique</span>: <span class="hljs-literal">false</span> &#125;);<br><br>  <span class="hljs-comment">// Create an index to search customers by email. We want to ensure that</span><br>  <span class="hljs-comment">// no two customers have the same email, so use a unique index.</span><br>  objectStore.<span class="hljs-title function_ invoke__">createIndex</span>(<span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>, &#123; <span class="hljs-attr">unique</span>: <span class="hljs-literal">true</span> &#125;);<br><br>  <span class="hljs-comment">// Use transaction oncomplete to make sure the objectStore creation is </span><br>  <span class="hljs-comment">// finished before adding data into it.</span><br>  objectStore.transaction.oncomplete = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;<br>    <span class="hljs-comment">// Store values in the newly created objectStore.</span><br>    <span class="hljs-keyword">var</span> customerObjectStore = db.<span class="hljs-title function_ invoke__">transaction</span>(<span class="hljs-string">&quot;customers&quot;</span>, <span class="hljs-string">&quot;readwrite&quot;</span>).<span class="hljs-title function_ invoke__">objectStore</span>(<span class="hljs-string">&quot;customers&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i in customerData) &#123;<br>      customerObjectStore.<span class="hljs-title function_ invoke__">add</span>(customerData[i]);<br>    &#125;<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="从web应用程序使用文件"><a href="#从web应用程序使用文件" class="headerlink" title="从web应用程序使用文件"></a>从web应用程序使用文件</h2><h3 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h3><p>现在可以从HTML5的<code>File API</code>读取本地文件，通过<code>&lt;input&gt;</code>的<code>type=&#39;file&#39;</code>，其实是通过 <a href="https://developer.mozilla.org/en-US/docs/DOM/FileReader">FileReader</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;file&#x27;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;input&#x27;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果选择了文件会返回文件对象通过dom访问得到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> selectedFile = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;input&#x27;</span>).<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><p>jquery:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> selectedFile = $(<span class="hljs-string">&#x27;#input&#x27;</span>).<span class="hljs-title function_">get</span>(<span class="hljs-number">0</span>).<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];<br><br><span class="hljs-keyword">var</span> selectedFile = $(<span class="hljs-string">&#x27;#input&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><p>选择文件后触发方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;handleFiles(this.files)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果你想选择多个文件 给 <code>input</code> 加上 <code>multiple</code> 属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;handleFiles(this.files)&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>给选择文件夹上监听事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> inputElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input&quot;</span>);<br>inputElement.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;change&quot;</span>, handleFiles, <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFiles</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> fileList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">files</span>; <span class="hljs-comment">/* now you can work with the file list */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="e-g-显示文件大小"><a href="#e-g-显示文件大小" class="headerlink" title="e.g 显示文件大小"></a>e.g 显示文件大小</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">updateSize</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> nBytes = <span class="hljs-number">0</span>,<br>      oFiles = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;uploadInput&quot;</span>).<span class="hljs-property">files</span>,<br>      nFiles = oFiles.<span class="hljs-property">length</span>;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> nFileId = <span class="hljs-number">0</span>; nFileId &lt; nFiles; nFileId++) &#123;<br>    nBytes += oFiles[nFileId].<span class="hljs-property">size</span>;<br>  &#125;<br>  <span class="hljs-keyword">var</span> sOutput = nBytes + <span class="hljs-string">&quot; bytes&quot;</span>;<br>  <span class="hljs-comment">// optional code for multiples approximation</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> aMultiples = [<span class="hljs-string">&quot;KiB&quot;</span>, <span class="hljs-string">&quot;MiB&quot;</span>, <span class="hljs-string">&quot;GiB&quot;</span>, <span class="hljs-string">&quot;TiB&quot;</span>, <span class="hljs-string">&quot;PiB&quot;</span>, <span class="hljs-string">&quot;EiB&quot;</span>, <span class="hljs-string">&quot;ZiB&quot;</span>, <span class="hljs-string">&quot;YiB&quot;</span>], nMultiple = <span class="hljs-number">0</span>, nApprox = nBytes / <span class="hljs-number">1024</span>; nApprox &gt; <span class="hljs-number">1</span>; nApprox /= <span class="hljs-number">1024</span>, nMultiple++) &#123;<br>    sOutput = nApprox.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">3</span>) + <span class="hljs-string">&quot; &quot;</span> + aMultiples[nMultiple] + <span class="hljs-string">&quot; (&quot;</span> + nBytes + <span class="hljs-string">&quot; bytes)&quot;</span>;<br>  &#125;<br>  <span class="hljs-comment">// end of optional code</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;fileNum&quot;</span>).<span class="hljs-property">innerHTML</span> = nFiles;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;fileSize&quot;</span>).<span class="hljs-property">innerHTML</span> = sOutput;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;updateSize();&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;uploadForm&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uploadInput&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;myFiles&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;updateSize();&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span> selected files: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fileNum&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>; total size: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fileSize&quot;</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Send file&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用hidden的file-input-通过-click-来触发选择文件"><a href="#使用hidden的file-input-通过-click-来触发选择文件" class="headerlink" title="使用hidden的file input 通过 click() 来触发选择文件"></a>使用<code>hidden</code>的<code>file input</code> 通过 <code>click()</code> 来触发选择文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fileElem&quot;</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;image/*&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;handleFiles(this.files)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fileSelect&quot;</span>&gt;</span>Select some files<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fileSelect = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;fileSelect&quot;</span>),<br>  fileElem = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;fileElem&quot;</span>);<br><br>fileSelect.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">if</span> (fileElem) &#123;<br>    fileElem.<span class="hljs-title function_">click</span>();<br>  &#125;<br>  e.<span class="hljs-title function_">preventDefault</span>(); <span class="hljs-comment">// prevent navigation to &quot;#&quot;</span><br>&#125;, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><h3 id="通过label元素来触发隐藏的file-input"><a href="#通过label元素来触发隐藏的file-input" class="headerlink" title="通过label元素来触发隐藏的file input"></a>通过<code>label</code>元素来触发隐藏的<code>file input</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fileElem&quot;</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;image/*&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;handleFiles(this.files)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;fileElem&quot;</span>&gt;</span>Select some files<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="选择文件通过拖拽拖放"><a href="#选择文件通过拖拽拖放" class="headerlink" title="选择文件通过拖拽拖放"></a>选择文件通过拖拽拖放</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/Events/dragenter">文档</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> dropbox;<br><br>dropbox = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;dropbox&quot;</span>);<br>dropbox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;dragenter&quot;</span>, dragenter, <span class="hljs-literal">false</span>);<br>dropbox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;dragover&quot;</span>, dragover, <span class="hljs-literal">false</span>);<br>dropbox.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;drop&quot;</span>, drop, <span class="hljs-literal">false</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">drop</span>(<span class="hljs-params">e</span>) &#123;<br>  e.<span class="hljs-title function_">stopPropagation</span>();<br>  e.<span class="hljs-title function_">preventDefault</span>();<br><br>  <span class="hljs-keyword">var</span> dt = e.<span class="hljs-property">dataTransfer</span>;<br>  <span class="hljs-keyword">var</span> files = dt.<span class="hljs-property">files</span>;<br><br>  <span class="hljs-title function_">handleFiles</span>(files);<br>&#125;<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFiles</span>(<span class="hljs-params">files</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; files.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">var</span> file = files[i];<br>    <span class="hljs-keyword">var</span> imageType = <span class="hljs-regexp">/^image\//</span>;<br>    <br>    <span class="hljs-keyword">if</span> (!imageType.<span class="hljs-title function_">test</span>(file.<span class="hljs-property">type</span>)) &#123;<br>      <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;img&quot;</span>);<br>    img.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;obj&quot;</span>);<br>    img.<span class="hljs-property">file</span> = file;<br>    preview.<span class="hljs-title function_">appendChild</span>(img); <span class="hljs-comment">// Assuming that &quot;preview&quot; is the div output where the content will be displayed.</span><br>    <br>    <span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();<br>    reader.<span class="hljs-property">onload</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params">aImg</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123; aImg.<span class="hljs-property">src</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">result</span>; &#125;; &#125;)(img);<br>    reader.<span class="hljs-title function_">readAsDataURL</span>(file);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用-object-URLs"><a href="#使用-object-URLs" class="headerlink" title="使用 object URLs"></a>使用 object URLs</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> objectURL = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(fileObj);<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(objectURL);<br></code></pre></td></tr></table></figure><h4 id="e-g-使用-object-URLs-显示图像"><a href="#e-g-使用-object-URLs-显示图像" class="headerlink" title="e.g: 使用 object URLs 显示图像"></a>e.g: 使用 object URLs 显示图像</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fileElem&quot;</span> <span class="hljs-attr">multiple</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;image/*&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;handleFiles(this.files)&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fileSelect&quot;</span>&gt;</span>Select some files<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fileList&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No files selected!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitURL</span>;<br><span class="hljs-keyword">var</span> fileSelect = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;fileSelect&quot;</span>),<br>    fileElem   = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;fileElem&quot;</span>),<br>    fileList   = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;fileList&quot;</span>);<br>fileSelect.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">if</span> (fileElem) &#123;<br>    fileElem.<span class="hljs-title function_">click</span>();<br>  &#125;<br>  e.<span class="hljs-title function_">preventDefault</span>(); <span class="hljs-comment">// prevent navigation to &quot;#&quot;</span><br>&#125;, <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFiles</span>(<span class="hljs-params">files</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!files.<span class="hljs-property">length</span>) &#123;<br>    fileList.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&lt;p&gt;No files selected!&lt;/p&gt;&quot;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    fileList.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;ul&quot;</span>);<br>    fileList.<span class="hljs-title function_">appendChild</span>(list);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; files.<span class="hljs-property">length</span>; i++) &#123;<br>      <span class="hljs-keyword">var</span> li = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;li&quot;</span>);<br>      list.<span class="hljs-title function_">appendChild</span>(li);<br>      <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;img&quot;</span>);<br>      img.<span class="hljs-property">src</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(files[i]);<br>      img.<span class="hljs-property">height</span> = <span class="hljs-number">60</span>;<br>      img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">src</span>);<br>      &#125;<br>      li.<span class="hljs-title function_">appendChild</span>(img);<br>      <span class="hljs-keyword">var</span> info = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;span&quot;</span>);<br>      info.<span class="hljs-property">innerHTML</span> = files[i].<span class="hljs-property">name</span> + <span class="hljs-string">&quot;: &quot;</span> + files[i].<span class="hljs-property">size</span> + <span class="hljs-string">&quot; bytes&quot;</span>;<br>      li.<span class="hljs-title function_">appendChild</span>(info);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>A new unordered list (<ul>) element is created.</li><li>The new list element is inserted into the <div> block by calling its element.appendChild() method.</li><li>For each File in the FileList represented by files:</li><li>Create a new list item (<li>) element and insert it into the list.</li><li>Create a new image (<img>) element.</li><li>Set the image’s source to a new object URL representing the file, using window.URL.createObjectURL() to create the blob URL.</li><li>Set the image’s height to 60 pixels.</li><li>Set up the image’s load event handler to release the object URL since it’s no longer needed once the image has been loaded. This is done by calling the window.URL.revokeObjectURL() method and passing in the object URL string as specified by img.src.</li><li>Append the new list item to the list.</li></ol><h3 id="上传选择的文件"><a href="#上传选择的文件" class="headerlink" title="上传选择的文件"></a>上传选择的文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">FileUpload</span>(<span class="hljs-params">img, file</span>) &#123;<br>  <span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();  <br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">ctrl</span> = <span class="hljs-title function_">createThrobber</span>(img);<br>  <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">xhr</span> = xhr;<br>  <br>  <span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">this</span>;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">xhr</span>.<span class="hljs-property">upload</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;progress&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">lengthComputable</span>) &#123;<br>          <span class="hljs-keyword">var</span> percentage = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>((e.<span class="hljs-property">loaded</span> * <span class="hljs-number">100</span>) / e.<span class="hljs-property">total</span>);<br>          self.<span class="hljs-property">ctrl</span>.<span class="hljs-title function_">update</span>(percentage);<br>        &#125;<br>      &#125;, <span class="hljs-literal">false</span>);<br>  <br>  xhr.<span class="hljs-property">upload</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;load&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>          self.<span class="hljs-property">ctrl</span>.<span class="hljs-title function_">update</span>(<span class="hljs-number">100</span>);<br>          <span class="hljs-keyword">var</span> canvas = self.<span class="hljs-property">ctrl</span>.<span class="hljs-property">ctx</span>.<span class="hljs-property">canvas</span>;<br>          canvas.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(canvas);<br>      &#125;, <span class="hljs-literal">false</span>);<br>  xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;http://demos.hacks.mozilla.org/paul/demos/resources/webservices/devnull.php&quot;</span>);<br>  xhr.<span class="hljs-title function_">overrideMimeType</span>(<span class="hljs-string">&#x27;text/plain; charset=x-user-defined-binary&#x27;</span>);<br>  reader.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">evt</span>) &#123;<br>    xhr.<span class="hljs-title function_">send</span>(evt.<span class="hljs-property">target</span>.<span class="hljs-property">result</span>);<br>  &#125;;<br>  reader.<span class="hljs-title function_">readAsBinaryString</span>(file);<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>The XMLHttpRequest’s upload progress listener is set to update the throbber with new percentage information so that as the upload progresses the throbber will be updated based on the latest information.</li><li>The XMLHttpRequest’s upload load event handler is set to update the throbber progress information to 100% to ensure the progress indicator actually reaches 100% (in case of granularity quirks during the process). It then removes the throbber since it’s no longer needed. This causes the throbber to disappear once the upload is complete.</li><li>The request to upload the image file is opened by calling XMLHttpRequest’s open() method to start generating a POST request.</li><li>The MIME type for the upload is set by calling the XMLHttpRequest function overrideMimeType(). In this case, we’re using a generic MIME type; you may or may not need to set the MIME type at all depending on your use case.</li><li>The FileReader object is used to convert the file to a binary string.</li><li>Finally, when the content is loaded the XMLHttpRequest function send() is called to upload the file’s content.</li></ol><h3 id="使用-object-URLs-显示-PDF"><a href="#使用-object-URLs-显示-PDF" class="headerlink" title="使用 object URLs 显示 PDF"></a>使用 <code>object URLs</code> 显示 <code>PDF</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;viewer&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj_url = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(blob);<br><span class="hljs-keyword">var</span> iframe = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;viewer&#x27;</span>);<br>iframe.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;src&#x27;</span>, obj_url);<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(obj_url);<br></code></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob">blob</a></p><p>一个<code>blob</code>对象就是这个文件的原始数据。　　　</p><h1 id="媒体"><a href="#媒体" class="headerlink" title="媒体"></a>媒体</h1><h2 id="使用-HTML5-的-audio-amp-96-video"><a href="#使用-HTML5-的-audio-amp-96-video" class="headerlink" title="使用 HTML5 的 audio &amp; &#96;video"></a>使用 <code>HTML5</code> 的 <code>audio</code> &amp; &#96;video</h2><p>　　　</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://v2v.cc/~j/theora_testsuite/320x240.ogg&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><br>  Your browser does not support the <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>video<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> element.<br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/test/audio.ogg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Your browser does not support the <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span>audio<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span> element.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="WebRTC-API-Web-Real-Time-Communication"><a href="#WebRTC-API-Web-Real-Time-Communication" class="headerlink" title="WebRTC API (Web Real-Time Communication)"></a>WebRTC API (Web Real-Time Communication)</h2><p>这个API很强大，webRTC （Web Real-Time Communication）是一个支持网页浏览器进行实时语音对话或视频对话的技术，缺点是只在 PC 的 Chrome 上支持较好，移动端支持不太理想。</p><h3 id="使用webRTC录制视频基本流程"><a href="#使用webRTC录制视频基本流程" class="headerlink" title="使用webRTC录制视频基本流程"></a>使用webRTC录制视频基本流程</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">MDN WEBRTC API</a></p><ol><li>调用 window.navigator.webkitGetUserMedia() 获取用户的PC摄像头视频数据。</li><li>将获取到视频流数据转换成 window.webkitRTCPeerConnection (一种视频流数据格式)。</li><li>利用 WebScoket 将视频流数据传输到服务端。</li></ol><h2 id="使用-Camera-API"><a href="#使用-Camera-API" class="headerlink" title="使用 Camera API"></a>使用 Camera API</h2><p>这个API目前只适用于Firefox 浏览器 ,下面的例子在手机端浏览器打开，会显示拍照选项，拍照后，或选择照片后会显示在网页上。</p><p><a href="https://developer.mozilla.org/en-US/docs/Mozilla/B2G_OS/API/Camera_API">https://developer.mozilla.org/en-US/docs/Mozilla/B2G_OS&#x2F;API&#x2F;Camera_API</a></p><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> cameraManager = <span class="hljs-variable language_">window</span>.<span class="hljs-property">navigator</span>.<span class="hljs-property">mozCameras</span>;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;take-picture&quot;</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;image/*&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;about:blank&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;show-picture&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> takePicture = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#take-picture&quot;</span>),<br>        showPicture = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#show-picture&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (takePicture &amp;&amp; showPicture) &#123;<br>        <span class="hljs-comment">// Set events</span><br>        takePicture.<span class="hljs-property">onchange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>            <span class="hljs-comment">// Get a reference to the taken picture or chosen file</span><br>            <span class="hljs-keyword">var</span> files = event.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>,<br>                file;<br>            <span class="hljs-keyword">if</span> (files &amp;&amp; files.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                file = files[<span class="hljs-number">0</span>];<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// Get window.URL object</span><br>                    <span class="hljs-keyword">var</span> <span class="hljs-variable constant_">URL</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitURL</span>;<br><br>                    <span class="hljs-comment">// Create ObjectURL</span><br>                    <span class="hljs-keyword">var</span> imgURL = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(file);<br><br>                    <span class="hljs-comment">// Set img src to ObjectURL</span><br>                    showPicture.<span class="hljs-property">src</span> = imgURL;<br><br>                    <span class="hljs-comment">// Revoke ObjectURL after imagehas loaded</span><br>                    showPicture.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                        <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(imgURL);  <br>                    &#125;;<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (e) &#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">// Fallback if createObjectURL is not supported</span><br>                        <span class="hljs-keyword">var</span> fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();<br>                        fileReader.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>                            showPicture.<span class="hljs-property">src</span> = event.<span class="hljs-property">target</span>.<span class="hljs-property">result</span>;<br>                        &#125;;<br>                        fileReader.<span class="hljs-title function_">readAsDataURL</span>(file);<br>                    &#125;<br>                    <span class="hljs-keyword">catch</span> (e) &#123;<br>                        <span class="hljs-comment">// Display error message</span><br>                        <span class="hljs-keyword">var</span> error = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;#error&quot;</span>);<br>                        <span class="hljs-keyword">if</span> (error) &#123;<br>                            error.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;Neither createObjectURL or FileReader are supported&quot;</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;)();<br></code></pre></td></tr></table></figure><h2 id="track-标签"><a href="#track-标签" class="headerlink" title="track 标签"></a><code>track</code> 标签</h2><blockquote><p>track用来指定 audio 元素和 video 元素的字幕、标题、章节等轨信息。HTML5追加内容，现在还没什么浏览器支持，将来有可能会有改动。</p></blockquote><p>HTML代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;brave.webm&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;subtitles&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;brave.ja.vtt&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;zh&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Chinese&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;subtitles&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;brave.en.vtt&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;en&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;English&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">track</span> <span class="hljs-attr">kind</span>=<span class="hljs-string">&quot;subtitles&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;brave.de.vtt&quot;</span> <span class="hljs-attr">srclang</span>=<span class="hljs-string">&quot;de&quot;</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;Deutsch&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="3D图形和效果"><a href="#3D图形和效果" class="headerlink" title="3D图形和效果"></a>3D图形和效果</h1><h2 id="Canvas-画布"><a href="#Canvas-画布" class="headerlink" title="Canvas 画布"></a><code>Canvas</code> 画布</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tutorial&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;150&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;150&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br></code></pre></td></tr></table></figure><p>得到<code>canvas</code> 上下文</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;tutorial&#x27;</span>);<br><span class="hljs-keyword">if</span> (canvas.<span class="hljs-property">getContext</span>)&#123;<br>  <span class="hljs-keyword">var</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br>  <span class="hljs-comment">// drawing code here</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">// canvas-unsupported code here</span><br>&#125;<br></code></pre></td></tr></table></figure><p>e.g:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;rgb(200,0,0)&quot;</span>;<br>        ctx.<span class="hljs-property">fillRect</span> (<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);<br><br>        ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;rgba(0, 0, 200, 0.5)&quot;</span>;<br>        ctx.<span class="hljs-property">fillRect</span> (<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);<br></code></pre></td></tr></table></figure><p>具体用法<br><a href="http://www.runoob.com/tags/ref-canvas.html">http://www.runoob.com/tags/ref-canvas.html</a></p><h2 id="WebGl"><a href="#WebGl" class="headerlink" title="WebGl"></a>WebGl</h2><p>如果说<code>Canvas</code>实在2D上做图，那么<code>WebGL</code>就提供了浏览器3D绘图的能力，这是百度百科的解释：</p><blockquote><p>WebGL（全写Web Graphics Library）是一种3D绘图标准，这种绘图技术标准允许把JavaScript和OpenGL ES 2.0结合在一起，通过增加OpenGL ES 2.0的一个JavaScript绑定，WebGL可以为HTML5 Canvas提供硬件3D加速渲染，这样Web开发人员就可以借助系统显卡来在浏览器里更流畅地展示3D场景和模型了，还能创建复杂的导航和数据视觉化。显然，WebGL技术标准免去了开发网页专用渲染插件的麻烦，可被用于创建具有复杂3D结构的网站页面，甚至可以用来设计3D网页游戏等等。</p></blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API</a></p><p>主要代表有<a href="https://github.com/mrdoob/three.js">three.js</a></p><p>先不做研究。</p><h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><blockquote><p>矢量图像的基于xml的格式,可以直接嵌入到HTML中。</p></blockquote><p><a href="http://www.w3school.com.cn/svg/">http://www.w3school.com.cn/svg/</a></p><h1 id="性能和集成"><a href="#性能和集成" class="headerlink" title="性能和集成"></a>性能和集成</h1><h2 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h2><blockquote><p>网络工作者提供一个简单的方法Web内容在后台线程运行脚本。工作线程可以执行任务而不干扰用户界面。此外,他们可以执行I &#x2F; O使用XMLHttpRequest(虽然responseXML和通道属性总是零)。一旦创建,一个工人可以将消息发送到创建它的JavaScript代码发布信息到指定的事件处理程序的代码(反之亦然)。本文提供了一个详细的介绍使用web工人。</p></blockquote><p><a href="https://developer.mozilla.org/en-US/docs/DOM/Using_web_workers">https://developer.mozilla.org/en-US/docs/DOM/Using_web_workers</a></p><h2 id="XMLHttpRequest-level2-AJax-2-0"><a href="#XMLHttpRequest-level2-AJax-2-0" class="headerlink" title="XMLHttpRequest level2 (AJax 2.0)"></a>XMLHttpRequest level2 (AJax 2.0)</h2><p><a href="">https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest</a></p><h2 id="History-API"><a href="#History-API" class="headerlink" title="History API"></a>History API</h2><blockquote><p>允许浏览器的操作历史。这是特别有用的页面加载交互新信息。</p></blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">https://developer.mozilla.org/en-US/docs/Web/API/History_API</a></p><h2 id="96-contenteditable-x3D-”true”"><a href="#96-contenteditable-x3D-”true”" class="headerlink" title="&#96;contenteditable&#x3D;”true”"></a>&#96;contenteditable&#x3D;”true”</h2><p> 这个属性可以让html页面上的内容被编辑。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">contenteditable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>  This text can be edited by the user.<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="History-APi"><a href="#History-APi" class="headerlink" title="History APi"></a>History APi</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API">https://developer.mozilla.org/en-US/docs/Web/API/History_API</a></p><p>允许浏览器的操作历史。这是对页面加载交互新信息特别有用。（操作url的<code>hash</code>值）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">back</span>();<span class="hljs-comment">//类似浏览器后退按钮，相对应</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">forward</span>();<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F; 通过<code>go()</code>方法来返回前进到特定页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>);<span class="hljs-comment">//后退一个页面</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">go</span>(-<span class="hljs-number">2</span>);<span class="hljs-comment">//后退两个页面</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">go</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//前进一个页面</span><br></code></pre></td></tr></table></figure><p>您可以通过查看长度属性的值来确定历史堆栈中的页数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> numberOfEntries = <span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-property">length</span>;<br></code></pre></td></tr></table></figure><h2 id="HTML-Drag-and-Drop-API"><a href="#HTML-Drag-and-Drop-API" class="headerlink" title="HTML Drag and Drop API"></a>HTML Drag and Drop API</h2><blockquote><p>HTML拖放接口使应用程序能够使用拖和Firefox等浏览器滴特征。例如，有了这些功能，用户可以选择用鼠标拖动元素，拖动元素到一个可删除的元素，这些元素和下降释放鼠标按键。</p></blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API">https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API</a></p><table><thead><tr><th>事件</th><th>事件方法</th><th>介绍</th></tr></thead><tbody><tr><td>drag</td><td>ondrag</td><td>Fired when an element or text selection is being dragged.</td></tr><tr><td>dragend</td><td>ondragend</td><td>Fired when a drag operation is being ended (for example, by releasing a mouse button or hitting the escape key). (See Finishing a Drag.)</td></tr><tr><td>dragenter</td><td>ondragenter</td><td>Fired when a dragged element or text selection enters a valid drop target. (See Specifying Drop Targets.)</td></tr><tr><td>dragexit</td><td>ondragexit</td><td>Fired when an element is no longer the drag operation’s immediate selection target.</td></tr><tr><td>dragleave</td><td>ondragleave</td><td>Fired when a dragged element or text selection leaves a valid drop target.</td></tr><tr><td>dragover</td><td>ondragover</td><td>Fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).</td></tr><tr><td>dragstart</td><td>ondragstart</td><td>Fired when the user starts dragging an element or text selection. (See Starting a Drag Operation.)</td></tr><tr><td>drop</td><td>ondropFired when</td><td>an element or text selection is dropped on a valid drop target. (See Performing a Drop.)</td></tr></tbody></table><h2 id="Document-hasFocus"><a href="#Document-hasFocus" class="headerlink" title="Document.hasFocus()"></a>Document.hasFocus()</h2><blockquote><p>文件。hasfocus()方法返回一个布尔值，指示是否文件或任何元素在文档具有焦点。此方法可用于确定文档中的活动元素是否具有焦点.。</p></blockquote><p><em>语法</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">focused = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">hasFocus</span>();<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setInterval</span>( checkPageFocus, <span class="hljs-number">200</span> );<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkPageFocus</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> info = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;message&quot;</span>);<br><br>  <span class="hljs-keyword">if</span> ( <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">hasFocus</span>() ) &#123;<br>    info.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;The document has the focus.&quot;</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    info.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;The document doesn&#x27;t have the focus.&quot;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">openWindow</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">open</span> (<br>    <span class="hljs-string">&quot;http://developer.mozilla.org/&quot;</span>,<br>    <span class="hljs-string">&quot;mozdev&quot;</span>,<br>    <span class="hljs-string">&quot;width=640,</span><br><span class="hljs-string">    height=300,</span><br><span class="hljs-string">    left=150,</span><br><span class="hljs-string">    top=260&quot;</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Document-focus"><a href="#Document-focus" class="headerlink" title="Document.focus()"></a>Document.focus()</h2><blockquote><p>让元素获得焦点</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;message&quot;</span>).<span class="hljs-title function_">focus</span>();<br></code></pre></td></tr></table></figure><h2 id="基于Web的协议处理程序"><a href="#基于Web的协议处理程序" class="headerlink" title="基于Web的协议处理程序"></a>基于Web的协议处理程序</h2><p><a href="https://www.w3.org/TR/2011/WD-html5-20110525/timers.html#custom-handlers">https://www.w3.org/TR/2011/WD-html5-20110525/timers.html#custom-handlers</a></p><blockquote><p>实现调起本地邮箱软件发送邮件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:webmaster@example.com&quot;</span>&gt;</span>Web Master<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>在 <code>APP中的网页</code> <code>Hybird APP</code> 用 <code>URL Scheme</code> 来调用其他APP</p></blockquote><ol><li><a href="https://www.zhihu.com/question/19907735">你所知道好玩有趣的 iOS URL Scheme 有哪些?</a></li><li><a href="http://www.idownloadblog.com/2011/11/07/quickly-launch-apps-with-siri/?utm_source=dlvr.it&utm_medium=twitter">利用 URL schemes 实现 Siri 启动应用程序</a></li><li><a href="http://wiki.akosma.com/IPhone_URL_Schemes">一个收录大部分 URL schemes 的维基页面</a></li><li><a href="http://handleopenurl.com/scheme"> 一个 iOS URL schemes 目录</a></li></ol><h3 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h3><blockquote><p>将web应用程序设置为协议处理程序不是一个困难的过程.。基本上，Web应用程序使用registerprotocolhandler()以浏览器为一个给定的协议处理程序登记本身的潜力。</p></blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler">registerProtocolHandler()</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">navigator.<span class="hljs-title function_">registerProtocolHandler</span>(<span class="hljs-string">&quot;burger&quot;</span>,<br>                                  <span class="hljs-string">&quot;http://www.google.co.uk/?uri=%s&quot;</span>,<br>                                  <span class="hljs-string">&quot;Burger handler&quot;</span>);<br></code></pre></td></tr></table></figure><p>触发</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hey have you seen <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;burger:cheeseburger&quot;</span>&gt;</span>this<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> before?<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>实际上是访问的 <code>http://www.google.co.uk/?uri=burger:cheeseburger</code></p><h2 id="window-requestAnimationFrame"><a href="#window-requestAnimationFrame" class="headerlink" title="window.requestAnimationFrame()"></a>window.requestAnimationFrame()</h2><blockquote><p>在浏览器动画程序中，我们通常使用一个定时器来循环每隔几毫秒移动目标物体一次，来让它动起来。如今有一个好消息，浏览器开发商们决定：“嗨，为什么我们不在浏览器里提供这样一个API呢，这样一来我们可以为用户优化他们的动画。”所以，这个requestAnimationFrame()函数就是针对动画效果的API，你可以把它用在DOM上的风格变化或画布动画或WebGL中。</p></blockquote><p>好处</p><blockquote><p>浏览器可以优化并行的动画动作，更合理的重新排列动作序列，并把能够合并的动作放在一个渲染周期内完成，从而呈现出更流畅的动画效果。比如，通过requestAnimationFrame()，JS动画能够和CSS动画&#x2F;变换或SVG SMIL动画同步发生。另外，如果在一个浏览器标签页里运行一个动画，当这个标签页不可见时，浏览器会暂停它，这会减少CPU，内存的压力，节省电池电量。</p></blockquote><blockquote><p>兼容</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">requestAnimationFrame</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">requestAnimationFrame</span> <br>                                || <span class="hljs-variable language_">window</span>.<span class="hljs-property">mozRequestAnimationFrame</span> <br>                                || <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitRequestAnimationFrame</span> <br>                                || <span class="hljs-variable language_">window</span>.<span class="hljs-property">msRequestAnimationFrame</span>;<br></code></pre></td></tr></table></figure><p>例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> start = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">var</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;SomeElementYouWantToAnimate&quot;</span>);<br>element.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&#x27;absolute&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">step</span>(<span class="hljs-params">timestamp</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!start) start = timestamp;<br>  <span class="hljs-keyword">var</span> progress = timestamp - start;<br>  element.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>(progress/<span class="hljs-number">10</span>, <span class="hljs-number">200</span>) + <span class="hljs-string">&quot;px&quot;</span>;<br>  <span class="hljs-keyword">if</span> (progress &lt; <span class="hljs-number">2000</span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(step);<br>  &#125;<br>&#125;<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(step);<br></code></pre></td></tr></table></figure><h2 id="FullScreen-API"><a href="#FullScreen-API" class="headerlink" title="FullScreen API"></a>FullScreen API</h2><blockquote><p>全屏API提供Web内容是利用用户的整个屏幕上出现了一个简单的方法。该API可以让你轻松地直接浏览器使元素和它的孩子，如果有，占据全屏，消除所有浏览器的用户界面和其他应用程序的屏幕时间。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;keydown&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-keyword">if</span> (e.<span class="hljs-property">keyCode</span> == <span class="hljs-number">13</span>) &#123;<br>    <span class="hljs-title function_">toggleFullScreen</span>();<br>  &#125;<br>&#125;, <span class="hljs-literal">false</span>);<br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">toggleFullScreen</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">document</span>.<span class="hljs-property">fullscreenElement</span>) &#123;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-title function_">requestFullscreen</span>();<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">exitFullscreen</span>) &#123;<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">exitFullscreen</span>(); <br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>事件</p><ul><li>Document.fullscreen</li><li>Document.fullscreenElement</li><li>Document.onfullscreenchange</li><li>Document.onfullscreenerror</li></ul><h2 id="Pointer-Lock-API"><a href="#Pointer-Lock-API" class="headerlink" title="Pointer Lock API"></a>Pointer Lock API</h2><p><a href="http://www.tfan.org/pointer-lock-api/">http://www.tfan.org/pointer-lock-api/</a></p><blockquote><p>指针锁定(以前叫做 鼠标锁定) 提供了一种输入方法，这种方法是基于鼠标随着时间推移的运动的（也就是说，deltas），而不仅是鼠标光标的绝对位置。通过它可以访问原始的鼠标运动，把鼠标事件的目标锁定到一个单独的元素，这就消除了鼠标在一个单独的方向上到底可以移动多远这方面的限制，并从视图中删去光标。</p></blockquote><p>  这个 API 对于需要大量的鼠标输入来控制运动，旋转物体，以及更改项目的应用程序来说非常有用。对高度视觉化的应用程序尤其重要，例如那些使用第一人称视角的应用程序，以及 3D 视图和建模。</p><p>  举例来说，你可以创建让你的用户简单地通过移动鼠标而不需要点击任何按钮就可以控制视角的应用。那么这些按钮就可以被用作其他动作。这类鼠标输入对于查看地图，卫星图像，或者第一人称场景（例如在一个游戏中或者一个全景视频中）是非常方便使用的。</p><p>  即使在光标移到浏览器或者屏幕区域之外，指针锁定也能够让你访问鼠标事件。例如，你的用户可以通过不断地移动鼠标来持续旋转或操纵一个 3D 模型。如果没有指针锁定的话，这些旋转或操纵会在指针到达浏览器或者屏幕边缘的那一刻停止。尤其是游戏玩家将会因为此功能而兴奋不已，因为他们可以疯狂地点击按钮，来回地滑动鼠标光标，而不必担心离开了游戏区域，进而不小心误点到另外一个应用程序上，结果将鼠标焦点移离了游戏。杯具了！</p><h1 id="访问设备"><a href="#访问设备" class="headerlink" title="访问设备"></a>访问设备</h1><h2 id="Touch-events"><a href="#Touch-events" class="headerlink" title="Touch events"></a>Touch events</h2><blockquote><p>移动端的触摸事件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">startup</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;canvas&quot;</span>)[<span class="hljs-number">0</span>];<br>  el.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;touchstart&quot;</span>, handleStart, <span class="hljs-literal">false</span>);<br>  el.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;touchend&quot;</span>, handleEnd, <span class="hljs-literal">false</span>);<br>  el.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;touchcancel&quot;</span>, handleCancel, <span class="hljs-literal">false</span>);<br>  el.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;touchmove&quot;</span>, handleMove, <span class="hljs-literal">false</span>);<br>  <span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;initialized.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li>Touch <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">touch = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Touch</span>(touchInit);<br></code></pre></td></tr></table></figure></li></ul><ol><li>Touch.clientX</li><li>Touch.clientY</li><li>Touch.force</li><li>Touch.identifier<br>…</li></ol><ul><li>TouchEvent </li><li>TouchList</li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li>touchstart</li><li>touchend</li><li>touchmove</li><li>touchcancel</li></ul><h2 id="HTML5定位"><a href="#HTML5定位" class="headerlink" title="HTML5定位"></a>HTML5定位</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">geoFindMe</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> output = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;out&quot;</span>);<br><br>  <span class="hljs-keyword">if</span> (!navigator.<span class="hljs-property">geolocation</span>)&#123;<br>    output.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&lt;p&gt;Geolocation is not supported by your browser&lt;/p&gt;&quot;</span>;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">success</span>(<span class="hljs-params">position</span>) &#123;<br>    <span class="hljs-keyword">var</span> latitude  = position.<span class="hljs-property">coords</span>.<span class="hljs-property">latitude</span>;<br>    <span class="hljs-keyword">var</span> longitude = position.<span class="hljs-property">coords</span>.<span class="hljs-property">longitude</span>;<br><br>    output.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;p&gt;Latitude is &#x27;</span> + latitude + <span class="hljs-string">&#x27;° &lt;br&gt;Longitude is &#x27;</span> + longitude + <span class="hljs-string">&#x27;°&lt;/p&gt;&#x27;</span>;<br><br>    <span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();<br>    img.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;https://maps.googleapis.com/maps/api/staticmap?center=&quot;</span> + latitude + <span class="hljs-string">&quot;,&quot;</span> + longitude + <span class="hljs-string">&quot;&amp;zoom=13&amp;size=300x300&amp;sensor=false&quot;</span>;<br><br>    output.<span class="hljs-title function_">appendChild</span>(img);<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">error</span>(<span class="hljs-params"></span>) &#123;<br>    output.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;Unable to retrieve your location&quot;</span>;<br>  &#125;<br><br>  output.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&lt;p&gt;Locating…&lt;/p&gt;&quot;</span>;<br><br>  navigator.<span class="hljs-property">geolocation</span>.<span class="hljs-title function_">getCurrentPosition</span>(success, error);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="设备的陀螺仪"><a href="#设备的陀螺仪" class="headerlink" title="设备的陀螺仪"></a>设备的陀螺仪</h2><blockquote><p>通过这个API可以访问设备的陀螺仪信息</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;devicemotion&quot;</span>, handleMotion, <span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><ol><li>DeviceMotionEvent.acceleration</li><li>DeviceMotionEvent.accelerationIncludingGravity</li><li>DeviceMotionEvent.rotationRate</li><li>DeviceMotionEvent.interval</li></ol><p>简单的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ball   = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.ball&#x27;</span>);<br><span class="hljs-keyword">var</span> garden = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.garden&#x27;</span>);<br><span class="hljs-keyword">var</span> output = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.output&#x27;</span>);<br><br><span class="hljs-keyword">var</span> maxX = garden.<span class="hljs-property">clientWidth</span>  - ball.<span class="hljs-property">clientWidth</span>;<br><span class="hljs-keyword">var</span> maxY = garden.<span class="hljs-property">clientHeight</span> - ball.<span class="hljs-property">clientHeight</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleOrientation</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-keyword">var</span> x = event.<span class="hljs-property">beta</span>;  <span class="hljs-comment">// In degree in the range [-180,180]</span><br>  <span class="hljs-keyword">var</span> y = event.<span class="hljs-property">gamma</span>; <span class="hljs-comment">// In degree in the range [-90,90]</span><br><br>  output.<span class="hljs-property">innerHTML</span>  = <span class="hljs-string">&quot;beta : &quot;</span> + x + <span class="hljs-string">&quot;\n&quot;</span>;<br>  output.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&quot;gamma: &quot;</span> + y + <span class="hljs-string">&quot;\n&quot;</span>;<br><br>  <span class="hljs-comment">// Because we don&#x27;t want to have the device upside down</span><br>  <span class="hljs-comment">// We constrain the x value to the range [-90,90]</span><br>  <span class="hljs-keyword">if</span> (x &gt;  <span class="hljs-number">90</span>) &#123; x =  <span class="hljs-number">90</span>&#125;;<br>  <span class="hljs-keyword">if</span> (x &lt; -<span class="hljs-number">90</span>) &#123; x = -<span class="hljs-number">90</span>&#125;;<br><br>  <span class="hljs-comment">// To make computation easier we shift the range of </span><br>  <span class="hljs-comment">// x and y to [0,180]</span><br>  x += <span class="hljs-number">90</span>;<br>  y += <span class="hljs-number">90</span>;<br><br>  <span class="hljs-comment">// 10 is half the size of the ball</span><br>  <span class="hljs-comment">// It center the positioning point to the center of the ball</span><br>  ball.<span class="hljs-property">style</span>.<span class="hljs-property">top</span>  = (maxX*x/<span class="hljs-number">180</span> - <span class="hljs-number">10</span>) + <span class="hljs-string">&quot;px&quot;</span>;<br>  ball.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = (maxY*y/<span class="hljs-number">180</span> - <span class="hljs-number">10</span>) + <span class="hljs-string">&quot;px&quot;</span>;<br>&#125;<br><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;deviceorientation&#x27;</span>, handleOrientation);<br></code></pre></td></tr></table></figure><p>实例 <a href="http://www.cnblogs.com/waitingbar/p/4682215.html">摇一摇</a></p><h1 id="HTML5-Notification-API"><a href="#HTML5-Notification-API" class="headerlink" title="HTML5 Notification API"></a>HTML5 Notification API</h1><blockquote><p>PC端的浏览器桌面通知功能。</p></blockquote><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Notification</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">Notification</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">mozNotification</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitNotification</span>;<br><br><span class="hljs-title class_">Notification</span>.<span class="hljs-title function_">requestPermission</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">permission</span>) &#123;<br><span class="hljs-comment">// console.log(permission);</span><br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">window</span>.<span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notification</span>(<br><span class="hljs-string">&quot;标题&quot;</span>, &#123;<br><span class="hljs-attr">body</span>: <span class="hljs-string">&quot;消息&quot;</span>,<br><span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;http://resource.zwjay.cn/jekyll/img/avatar-zwj.jpg&quot;</span><br><br>&#125;<br>);<br><br>instance.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// Something to do</span><br>&#125;;<br>instance.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// Something to do</span><br>&#125;;<br>instance.<span class="hljs-property">onshow</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// Something to do</span><br>&#125;;<br>instance.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// Something to do</span><br>&#125;;<br>&#125;, <span class="hljs-number">3000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;show()&quot;</span>&gt;</span>Notify me!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="最后：新增的CSS3"><a href="#最后：新增的CSS3" class="headerlink" title="最后：新增的CSS3"></a>最后：新增的CSS3</h1><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes">FlexBox</a> </li><li>动画</li><li>多列 （column-count）</li><li>过渡</li><li>2D 3D 转换</li><li>….</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>HTML5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改ionic中android程序的包名</title>
    <link href="/2016/11/30/2016-11-30-Modify-cordova&amp;ionic-package-name/"/>
    <url>/2016/11/30/2016-11-30-Modify-cordova&amp;ionic-package-name/</url>
    
    <content type="html"><![CDATA[<p>默认ionic新建工程的时候指定的Android版本包名是：com.ionicframework.starter；这样固定死包名的话会导致一个问题，多个ionic工程无法正常安装到手机当中，后面安装的程序始终会把之前的程序覆盖掉，这样的话就太悲剧了。<br>现在给大家演示一下如何修改ionic工程的包名：</p><p>#1.修改android工程下源码文件的路径和Java文件的包名：<br>   修改java文件包名：找到platforms\android\src\com\ionicframework\starter*.java，用记事本打开后，修改package为你自己定义好的，我这里为了简单就改成com.ionicframework.starter2；</p>   <a class="fancybox_img"  rel="group" href="http://resource.zwjay.cn/jekyll/img/Modify-cordova&ionic-package-name-1.png">        <img src="http://resource.zwjay.cn/jekyll/img/Modify-cordova&ionic-package-name-1.png" alt="Modify-cordova&ionic-package-name-1" />   </a>   <p> 修改源码文件的路径：platforms\android\src\com\ionicframework\starter改成platforms\android\src\com\ionicframework\starter2；</p><p>#2.修改AndroidManifest.xml，找到platforms\android下面的AndroidManifest.xml，用记事本打开后，修改里面的package内容：</p>  <a class="fancybox_img"  rel="group" href="http://resource.zwjay.cn/jekyll/img/Modify-cordova&ionic-package-name-2.png">       <img src="http://resource.zwjay.cn/jekyll/img/Modify-cordova&ionic-package-name-2.png" alt="Modify-cordova&ionic-package-name-2" />  </a><p>#3.修改android.json：找到platforms\android下面的android.json，用记事本打开，修改其中的installed_plugins中各个插件对应的主包名：</p> <a class="fancybox_img"  rel="group" href="http://resource.zwjay.cn/jekyll/img/Modify-cordova&ionic-package-name-3.png">      <img src="http://resource.zwjay.cn/jekyll/img/Modify-cordova&ionic-package-name-3.png" alt="Modify-cordova&ionic-package-name-3" /> </a><p>#4.修改ionic工程下的config.xml文件，修改里面的widget节点的id属性值：</p> <a class="fancybox_img"  rel="group" href="http://resource.zwjay.cn/jekyll/img/Modify-cordova&ionic-package-name-4.png" >      <img src="http://resource.zwjay.cn/jekyll/img/Modify-cordova&ionic-package-name-4.png" alt="Modify-cordova&ionic-package-name-4" /> </a>    <p>这样，整个工程的android版本的包名就彻底改好了，虽然很麻烦，但是有时候还是可以派上用场的，希望对大家有所帮助！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Ionic</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于AngularJS/Ionic框架开发的性能优化</title>
    <link href="/2016/11/30/2016-11-30-AngularJSIonic-framework-optimization/"/>
    <url>/2016/11/30/2016-11-30-AngularJSIonic-framework-optimization/</url>
    
    <content type="html"><![CDATA[<p>下面提出几点优化的方法：</p><h1 id="1-使用单次绑定符号"><a href="#1-使用单次绑定符号" class="headerlink" title="1. 使用单次绑定符号"></a>1. 使用单次绑定符号</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;&#123;::value&#125;&#125;<br></code></pre></td></tr></table></figure><p>AngularJS的性能优化方法之一是减少双向绑定。我们知道AngularJS的双向绑定是通过为每个需要双向绑定的数据对象添加$$watchers,一旦某个scope的数据发生了更新，<br>就触发脏检测($digest)，深度优先遍历所有scope对象的$$watchers值的old&#x2F;new value是否发生变化。所以在开发过程中，我们都要小心判断创建出的每个$$watchers是否有必要。<br>对于只需要更新一次，以后不管数据层如何变化都不需要更新的数据，使用连续两个冒号即可在在$$watchers列表中将这个值删除，即减少了$digest脏检测循环。</p><h1 id="2-ng-repeat优化"><a href="#2-ng-repeat优化" class="headerlink" title="2. ng-repeat优化"></a>2. ng-repeat优化</h1><p>第一种方式虽然减少了脏检测的次数，但是单次绑定的数据毕竟少数，可能加完单次绑定，性能提升并没有太大。如果我们的代码中使用了ng-repeat,并且list数量很大时，<br>我们的性能会有很大下降，在移动端尤为明显。下面几点是对ng-repeat指令的优化。</p><p>使用limitTo来减少第一次加载列表元素的数量，以提高初始化页面的速度。我们也许有上百上千条数据要显示，但是屏幕的大小毕竟有限，<br>呈现在用户眼前的可能就是个1280x800或者360x640大小的屏幕，那我们可以先加载用户所能看到几个十几个列表。limitTo属性就提供了这样的功能。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">ng-repeat</span>=<span class="hljs-string">&quot;mail in mails |limitTo:loadMailLimitTo&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用track by属性。比如我们有下面一段代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">ng-repeat</span>=<span class="hljs-string">&quot;mail in mails&quot;</span>&gt;</span><br>        &#123;&#123;mail.id&#125;&#125;:&#123;&#123;mail.title&#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>  <br></code></pre></td></tr></table></figure><p>如果我们想更新mails里面的值，我们可能会这么做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>$scope.<span class="hljs-property">mails</span> = newMailListFromServer;<br><br></code></pre></td></tr></table></figure><p>上一行代码会告诉ng-repeat去删除掉所有的li元素，再去重新生成一套新的li，这意味着大量的DOM操作，尤其当li元素里面有 复杂的逻辑判断和双向绑定数据。<br>这是因为ng-repeat在创建时会给每个mail加上$hashkey属性，并时时跟踪，一旦mails元素替换成服务器 返回的对象，即时他们完全一样，由于他们没有$hashkey,<br>所以ng-repeat不会知道他们是一样的元素。而通过如下的改动：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">ng-repeat</span>=<span class="hljs-string">&quot;mail in mails track by mail.id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ng-repeat会跟踪我们创建的mail.id去判断是否为新的元素。这样就减少了大量的DOM删减添加操作。<br>需要注意的是，如果limitTo和track by一起使用的时候，需要把track by放到最后，如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">ng-repeat</span>=<span class="hljs-string">&quot;mail in mails | limitTo:loadMailLimitTo track by mail.id&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>如果有引入ionic框架，可以使用collection-repeat替代ng-repeat。<br>collection-repeat是ionic框架自己的一套显示list的指令，原理在于不论list有多大，页面最多只有一定数量的item,这个item数量的大小是通过屏幕高度和单个item的高度计算出来的。<br>滑动列表时通过更新item元素的页面内容和位置来呈现所有的items。所以在大数量级的list呈现上，collection-repeat会比ng-repeat性能好很多。但是需要注意的是，<br>由于collection-repeat是通过时时更新滑动位置的item内容来实现的，所以在item内部使用第一个方法的单次绑定方式，滑动后会造成页面混乱的情况。</p><h1 id="3-减少html页面中的filter"><a href="#3-减少html页面中的filter" class="headerlink" title="3. 减少html页面中的filter"></a>3. 减少html页面中的filter</h1><p>原因是每当filter执行时，都会走两次$digest cycle，一次是scope中有数据改动，一次是查看是否有更多的改动需要更新数据。当数据量很大时对性能会有很大影响。<br>我们可以在初始化时就格式化好数据，比如赋值到view层之前，在我们的js代码里使用angular提供的$filter provider来预处理我们的数据。</p><h1 id="4-ng-if替代ng-show-x2F-ng-hide"><a href="#4-ng-if替代ng-show-x2F-ng-hide" class="headerlink" title="4. ng-if替代ng-show&#x2F;ng-hide"></a>4. ng-if替代ng-show&#x2F;ng-hide</h1><p>原因是ng-if与ng-show&#x2F;ng-hide的不同之处在于，ng-if在等于false时会把元素从DOM中移除，所以所有绑在该元素上的handler会一同失效。<br>而ng-show&#x2F;ng-hide不会移除DOM元素，而是使用css style去隐藏&#x2F;显示DOM元素，所以handlers会一直存在。</p><h1 id="5-scope-apply-和-scope-digest"><a href="#5-scope-apply-和-scope-digest" class="headerlink" title="5. $scope.$apply()和$scope.$digest()"></a>5. $scope.$apply()和$scope.$digest()</h1><p>我们会用到上面两种去执行一次脏检测，刷新页面数据。区别就是$scope.$apply()会从$rootscope开始，深度优先遍历执行$digest循环，<br>而$scope.$digest会从当前scope开始，往下层scope遍历脏检测。如果只是期望当前scope的数据更新，而不涉及到parent $scope，则可以使用$scope.$digest()。</p><h1 id="6-angular-animate"><a href="#6-angular-animate" class="headerlink" title="6. angular animate"></a>6. angular animate</h1><p>如果我们的项目引入了angular-animate.js的模块，那么在大部分使用了指令的元素上，animate里面的代码都会被执行，不管当前元素是否有应用css动画样式。<br>这对我们页面上如果有大量数据频繁滑动，隐藏显示的时候会有比较明显的性能问题。如果我们对当前scope并没有渐入渐出等动画效果的时候，<br>可以在当前scope初始化时加上$animate.enabled(false);当然，我们也可以对某个元素进行禁止动画的动作：$animate.enabled(element, false);</p><h1 id="7-ionicSlideBox优化（只针对使用了ionic框架的项目）"><a href="#7-ionicSlideBox优化（只针对使用了ionic框架的项目）" class="headerlink" title="7. ionicSlideBox优化（只针对使用了ionic框架的项目）"></a>7. ionicSlideBox优化（只针对使用了ionic框架的项目）</h1><p>初始化slidebox时先初始化显示中间的首先显示在用户面前的slide，其他的slide可以在$timeout里面延迟初始化。思想和ng-repeat的limitTo比较类似。<br>slidebox的滑动速度在ionic框架中默认速度是300ms滑完一个slide,通过改变这个速度来使滑动更快速。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
      <tag>Ionic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ruby gems更换source的时候 certificate verify failed</title>
    <link href="/2016/11/30/2016-11-30-Install-Ruby-change-source-pit/"/>
    <url>/2016/11/30/2016-11-30-Install-Ruby-change-source-pit/</url>
    
    <content type="html"><![CDATA[<p>安装Ruby后，安装sass，jekkly会遇到错误，按照 <a href="https://gems.ruby-china.org/">https://gems.ruby-china.org/</a> ,的方式更换Ruby源，会遇到错误</p><blockquote><p>gem sources –add <a href="https://gems.ruby-china.org/">https://gems.ruby-china.org/</a> –remove <a href="https://rubygems.org/">https://rubygems.org/</a><br>Error fetching <a href="https://ruby.taobao.org/">https://ruby.taobao.org/</a>:<br>SSL_connect returned&#x3D;1 errno&#x3D;0 state&#x3D;SSLv3 read server certificate B: certificate verify failed (<a href="https://rubygems-china.oss-cn-hangzhou.aliyuncs.com/specs.4.8.gz">https://rubygems-china.oss-cn-hangzhou.aliyuncs.com/specs.4.8.gz</a>)</p></blockquote><p>其实 <code>gem sources --add http://gems.ruby-china.org/</code> 是 <strong>http</strong>。 就可以了。坑啊- -。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Ruby</tag>
      
      <tag>Sass</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ionic应用中的文字不能长按复制、粘贴问题解决</title>
    <link href="/2016/11/30/2016-11-30-ionic-application-of-long-words-can&#39;t-copy-and-paste-problem-solving/"/>
    <url>/2016/11/30/2016-11-30-ionic-application-of-long-words-can&#39;t-copy-and-paste-problem-solving/</url>
    
    <content type="html"><![CDATA[<p>直接上代码：</p><h1 id="gt-html部分"><a href="#gt-html部分" class="headerlink" title="&gt;html部分"></a>&gt;html部分</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">ng-app</span>=<span class="hljs-string">&quot;ionicApp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;initial-scale=1, maximum-scale=1, user-scalable=no, width=device-width&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Ionic文字复制问题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://code.ionicframework.com/1.0.0-beta.4/css/ionic.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://code.ionicframework.com/1.0.0-beta.4/js/ionic.bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">ng-controller</span>=<span class="hljs-string">&quot;MyCtrl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ion-header-bar</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;bar-positive&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>ionic 测试copy<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ion-header-bar</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ion-content</span> <span class="hljs-attr">overflow-scroll</span>=<span class="hljs-string">&#x27;true&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;selectable&quot;</span>&gt;</span>幻灯片1测试文字，试试可以复制<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ion-content</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="gt-css部分"><a href="#gt-css部分" class="headerlink" title="&gt;css部分"></a>&gt;css部分</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">ion-<span class="hljs-attribute">content</span>&#123;<br>  <span class="hljs-attribute">overflow</span>-scroll: true;<br>&#125;<br><span class="hljs-selector-class">.scroll-content</span> &#123;<br>  -webkit-user-select: auto <span class="hljs-meta">!important</span>;<br>  -moz-user-select: auto <span class="hljs-meta">!important</span>;<br>  -ms-user-select: auto <span class="hljs-meta">!important</span>;<br>  user-select: auto <span class="hljs-meta">!important</span>;<br>&#125;<br><br><span class="hljs-selector-class">.selectable</span> &#123;<br>  -webkit-user-select: auto;//控制网页内容选择范围<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="gt-js部分"><a href="#gt-js部分" class="headerlink" title="&gt;js部分"></a>&gt;js部分</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">angular.<span class="hljs-title function_">module</span>(<span class="hljs-string">&#x27;ionicApp&#x27;</span>, [<span class="hljs-string">&#x27;ionic&#x27;</span>])<br>.<span class="hljs-title function_">controller</span>(<span class="hljs-string">&#x27;MyCtrl&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">$scope</span>) &#123;<br>  <span class="hljs-attr">stop_browser_behavior</span>: <span class="hljs-literal">false</span>  <br>self.<span class="hljs-property">touchStart</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>  self.<span class="hljs-property">startCoordinates</span> = <span class="hljs-title function_">getPointerCoordinates</span>(e);<br>  <span class="hljs-keyword">if</span> ( ionic.<span class="hljs-property">tap</span>.<span class="hljs-title function_">ignoreScrollStart</span>(e) ) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span>( ionic.<span class="hljs-property">tap</span>.<span class="hljs-title function_">containsOrIsTextInput</span>(e.<span class="hljs-property">target</span>) ) &#123;<br>    <span class="hljs-comment">// do not start if the target is a text input</span><br>    <span class="hljs-comment">// if there is a touchmove on this input, then we can start the scroll</span><br>    self.<span class="hljs-property">__hasStarted</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  self.<span class="hljs-property">__isSelectable</span> = <span class="hljs-literal">true</span>;<br>  self.<span class="hljs-property">__enableScrollY</span> = <span class="hljs-literal">true</span>;<br>  self.<span class="hljs-property">__hasStarted</span> = <span class="hljs-literal">true</span>;<br>  self.<span class="hljs-title function_">doTouchStart</span>(e.<span class="hljs-property">touches</span>, e.<span class="hljs-property">timeStamp</span>);<br>  <span class="hljs-comment">// e.preventDefault();</span><br>&#125;;<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>通过代码我们可以看到，首先在html中,添加overflow-scroll&#x3D;’true’，然后在我们想要复制文字的容器上，添加自定义类，代码中我们添加的是’.selectable’ ，在这个类上设置我们的css样式。</p><blockquote><p>这里需要注意的是，这个自定义类，不能加在ionic的特定标签上。如下：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ion-content</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;selectable&quot;</span> <span class="hljs-attr">overflow-scroll</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样写，是无效的，我们必须这样写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ion-content</span> <span class="hljs-attr">overflow-scroll</span>=<span class="hljs-string">&#x27;true&#x27;</span>&gt;</span> <br>     <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;selectable&quot;</span>&gt;</span>幻灯片1测试文字，试试可以复制<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">ion-content</span>&gt;</span><br></code></pre></td></tr></table></figure><p>表示我就是因为这个没写对，调试了半天出不来效果。。。</p><p>最后一步就是在页面对应的controller里面拷贝如上js代码。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Ionic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ionic 笔记</title>
    <link href="/2016/11/30/2016-11-30-Ionic-notes/"/>
    <url>/2016/11/30/2016-11-30-Ionic-notes/</url>
    
    <content type="html"><![CDATA[<h1 id="ion-content的回弹效果没有了"><a href="#ion-content的回弹效果没有了" class="headerlink" title="ion-content的回弹效果没有了"></a>ion-content的回弹效果没有了</h1><ul><li>在 <code>&lt;ion-content&gt;</code> 标签加上 &#96;overflow-scroll&#x3D;”false” has-bouncing&#x3D;”true”</li></ul><h1 id="view之间的数据传输"><a href="#view之间的数据传输" class="headerlink" title="view之间的数据传输"></a>view之间的数据传输</h1><h2 id="1-使用-state-go-to-toParams-options"><a href="#1-使用-state-go-to-toParams-options" class="headerlink" title="1 .使用 $state.go(to [, toParams] [, options])"></a>1 .使用 <code>$state.go(to [, toParams] [, options])</code></h2><p>在第二个参数传入一个JSON对象，在 <code>to</code> 的路由加上params:{} 定义传输的参数,然后在 <code>to</code> 的 <code>controller</code> 注入 <code>$stateParams</code> 接收数据。</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$state.<span class="hljs-title function_">go</span>(<span class="hljs-string">&quot;tab.lazy&quot;</span>, &#123;<span class="hljs-attr">lazyId</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">lazyName</span>:<span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-attr">inherit</span>:<span class="hljs-literal">false</span>&#125;);<br><br>-------------------------------------------------------------------<br><br>.<span class="hljs-title function_">state</span>(<span class="hljs-string">&#x27;tab.lazy&#x27;</span>, &#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/lazy&#x27;</span>,<br>        <span class="hljs-attr">views</span>: &#123;<br>          <span class="hljs-string">&#x27;tab-lazy&#x27;</span>: &#123;<br>            <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;templates/lazy.html&#x27;</span>,<br>            <span class="hljs-attr">controller</span>: <span class="hljs-string">&#x27;LazyCtrl&#x27;</span><br>          &#125;<br>        &#125;,<br>        <span class="hljs-attr">params</span>: &#123;<br>          <span class="hljs-attr">lazyId</span>: <span class="hljs-literal">null</span>,<br>          <span class="hljs-attr">lazyName</span>: <span class="hljs-literal">null</span><br>        &#125;<br>&#125;)<br>      <br>-------------------------------------------------------------------<br><br>.<span class="hljs-title function_">controller</span>(<span class="hljs-string">&#x27;venueDetailsCtrl&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">$scope, $stateParams, $http</span>) &#123;<br>    $scope.<span class="hljs-property">lazyId</span> = $stateParams.<span class="hljs-property">lazyId</span><br>    $scope.<span class="hljs-property">lazyName</span> = $stateParams.<span class="hljs-property">lazyName</span><br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>第三个配置参数： Object</strong></p><ul><li><code>location</code> <em>Boolean or “replace” (default true)</em>, If <code>true</code> will update the url in the location bar, if <code>false</code> will not. If string <code>&quot;replace&quot;</code>, will update url and also replace last history record.</li><li><code>inherit</code> <em>Boolean (default true)</em>, If <code>true</code> will inherit url parameters from current url.</li><li><code>relative</code> <em>stateObject (default $state.$current)</em>, When transitioning with relative path (e.g ‘^’), defines which state to be relative from.</li><li><code>notify</code> <em>Boolean (default true)</em>, If <code>true</code> will broadcast $stateChangeStart and $stateChangeSuccess events.</li><li><code>reload</code> <code>v0.2.5</code> <em>Boolean (default false)</em>, If <code>true</code> will force transition even if the state or params have not changed, aka a reload of the same state. It differs from reloadOnSearch because you’d use this when you want to force a reload when <em>everything</em> is the same, including search params.</li></ul><ul><li>如果<code>$state.go</code> 跳转没有动画效果，可以加上<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$ionicViewSwitcher.<span class="hljs-title function_">nextDirection</span>(<span class="hljs-string">&#x27;forward&#x27;</span>); <span class="hljs-comment">// &#x27;forward&#x27;, &#x27;back&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="2-利用ui-serf"><a href="#2-利用ui-serf" class="headerlink" title="2 .利用ui-serf"></a>2 .利用ui-serf</h2><p>在<code>ui-serf=&#39;lazy&#39;</code> 后面加上参数-&gt; <code>ui-serf=&#39;lazy(&#123;lazyId: 1,lazyName: 2&#125;)&#39;</code> ,一样在路由上加params,用$stateParams接收。</p><h2 id="3-利用url（a-标签）"><a href="#3-利用url（a-标签）" class="headerlink" title="3 .利用url（a 标签）"></a>3 .利用url（a 标签）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$stateProvider<br>    .<span class="hljs-title function_">state</span>(<span class="hljs-string">&#x27;contacts.detail&#x27;</span>, &#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/contacts/:contactId&quot;</span>,<br>        <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;contacts.detail.html&#x27;</span>,<br>        <span class="hljs-attr">controller</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">$stateParams</span>) &#123;<br>            <span class="hljs-comment">// If we got here from a url of /contacts/42</span><br>            <span class="hljs-title function_">expect</span>($stateParams).<span class="hljs-title function_">toBe</span>(&#123;<span class="hljs-attr">contactId</span>: <span class="hljs-string">&quot;42&quot;</span>&#125;);<br>        &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure><p>主要在 <code>:contactId</code> ,注意前面要加上<code>/</code>,当然也可以用花括号,<code>url: &quot;/contacts/&#123;contactId&#125;&quot; </code>,</p><ul><li>‘&#x2F;hello&#x2F;‘ - Matches only if the path is exactly ‘&#x2F;hello&#x2F;‘. There is no special treatment for trailing slashes, and patterns have to match the entire path, not just a prefix.</li><li>‘&#x2F;user&#x2F;:id’ - Matches ‘&#x2F;user&#x2F;bob’ or ‘&#x2F;user&#x2F;1234!!!’ or even ‘&#x2F;user&#x2F;‘ but not ‘&#x2F;user’ or ‘&#x2F;user&#x2F;bob&#x2F;details’. The second path segment will be captured as the parameter ‘id’.</li><li>‘&#x2F;user&#x2F;{id}’ - Same as the previous example, but using curly brace syntax.</li><li>‘&#x2F;user&#x2F;{id:int}’ - The param is interpreted as Integer.</li></ul><p><strong>用法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">ui-sref</span>=<span class="hljs-string">&quot;contacts.detail(&#123;contactId: id&#125;)&quot;</span>&gt;</span>View Contact<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="数据更新-页面没有更新"><a href="#数据更新-页面没有更新" class="headerlink" title="数据更新,页面没有更新"></a>数据更新,页面没有更新</h1><h2 id="apply-方法-作用："><a href="#apply-方法-作用：" class="headerlink" title="$apply  方法 作用："></a>$apply  方法 作用：</h2><p>Scope 提供$apply 方法传播 Model 的变化</p><h3 id="apply-方法-使用情景-："><a href="#apply-方法-使用情景-：" class="headerlink" title="$apply  方法 使用情景 ："></a>$apply  方法 使用情景 ：</h3><p>AngularJS 外部的控制器（DOM 事件、外部的回调函数如 jQuery UI 空间等）调用了 AngularJS 函数之<br>后，必须调用$apply。在这种情况下，你需要命令 AngularJS 刷新自已（模型、视图等） ，$apply 就是<br>用来做这件事情的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xxx<br>$scope.<span class="hljs-title function_">apply</span>();<br>___<br>$scope.<span class="hljs-title function_">apply</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  xxx<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="apply-方法-注意事项-："><a href="#apply-方法-注意事项-：" class="headerlink" title="$apply  方法 注意事项 ："></a>$apply  方法 注意事项 ：</h3><p>只要可以， 请把要执行的代码和函数传递给$apply 去执行， 而不要自已执行那些函数然后再调用$apply。</p><h1 id="跳转过渡动画"><a href="#跳转过渡动画" class="headerlink" title="跳转过渡动画"></a>跳转过渡动画</h1><h2 id="state-go"><a href="#state-go" class="headerlink" title="$state.go"></a>$state.go</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$state.<span class="hljs-title function_">go</span>(<span class="hljs-string">&#x27;myState&#x27;</span>,&#123;<br>    <span class="hljs-attr">navTransition</span>:<span class="hljs-string">&#x27;android&#x27;</span>,<br><span class="hljs-string">&#x27;navDirection&#x27;</span>:<span class="hljs-string">&#x27;forward&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="ui-sref"><a href="#ui-sref" class="headerlink" title="ui-sref"></a>ui-sref</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ui-sref</span>=<span class="hljs-string">&#x27;myState&#x27;</span> <span class="hljs-attr">nav-direction</span>=<span class="hljs-string">&quot;forward&quot;</span> <span class="hljs-attr">nav-transition</span>=<span class="hljs-string">&#x27;android&#x27;</span>&gt;</span>Some element<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="ionicViewSwitcher"><a href="#ionicViewSwitcher" class="headerlink" title="$ionicViewSwitcher"></a>$ionicViewSwitcher</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$ionicViewSwitcher.<span class="hljs-title function_">nextDirection</span>(<span class="hljs-string">&#x27;forward&#x27;</span>);<span class="hljs-comment">// &#x27;forward&#x27;, &#x27;back&#x27;, etc.</span><br>$state.<span class="hljs-title function_">go</span>(<span class="hljs-string">&#x27;myState&#x27;</span>);<br></code></pre></td></tr></table></figure><h1 id="Angular-获取事件焦点或其他信息-（ng-click-on-tap-等事件）"><a href="#Angular-获取事件焦点或其他信息-（ng-click-on-tap-等事件）" class="headerlink" title="Angular 获取事件焦点或其他信息 （ng-click on-tap 等事件）"></a>Angular 获取事件焦点或其他信息 （ng-click on-tap 等事件）</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">ng-click</span>=<span class="hljs-string">&quot;brandFnc($event)&quot;</span>&gt;</span>brList<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$scope.<span class="hljs-property">brandFnc</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">$event</span>)&#123;<br>    <span class="hljs-comment">// 通过 $event.target 来获取</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ionic-actionsheet-安卓样式问题"><a href="#ionic-actionsheet-安卓样式问题" class="headerlink" title="ionic actionsheet 安卓样式问题"></a>ionic actionsheet 安卓样式问题</h1><p>如果想统一为ios的样式，打开ionic css文件，找到这一段 注释掉。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs css"><br><span class="hljs-selector-class">.platform-android</span> <span class="hljs-selector-class">.action-sheet-backdrop</span><span class="hljs-selector-class">.active</span> &#123;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.2</span>);<br>&#125;<br><br><span class="hljs-selector-class">.platform-android</span> <span class="hljs-selector-class">.action-sheet</span> &#123;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.platform-android</span> <span class="hljs-selector-class">.action-sheet</span> <span class="hljs-selector-class">.action-sheet-title</span>,<br><span class="hljs-selector-class">.platform-android</span> <span class="hljs-selector-class">.action-sheet</span> <span class="hljs-selector-class">.button</span> &#123;<br><span class="hljs-attribute">text-align</span>: left;<br><span class="hljs-attribute">border-color</span>: transparent;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br><span class="hljs-attribute">color</span>: inherit;<br>&#125;<br><br><span class="hljs-selector-class">.platform-android</span> <span class="hljs-selector-class">.action-sheet</span> <span class="hljs-selector-class">.action-sheet-title</span> &#123;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">16px</span>;<br><span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>&#125;<br><br><span class="hljs-selector-class">.platform-android</span> <span class="hljs-selector-class">.action-sheet</span> <span class="hljs-selector-class">.button</span><span class="hljs-selector-class">.active</span>,<br><span class="hljs-selector-class">.platform-android</span> <span class="hljs-selector-class">.action-sheet</span> <span class="hljs-selector-class">.button</span><span class="hljs-selector-class">.activated</span> &#123;<br><span class="hljs-attribute">background</span>: <span class="hljs-number">#e8e8e8</span>;<br>&#125;<br><br><span class="hljs-selector-class">.platform-android</span> <span class="hljs-selector-class">.action-sheet-group</span> &#123;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fafafa</span>;<br>&#125;<br><br><span class="hljs-selector-class">.platform-android</span> <span class="hljs-selector-class">.action-sheet-cancel</span> &#123;<br><span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-selector-class">.platform-android</span> <span class="hljs-selector-class">.action-sheet-has-icons</span> <span class="hljs-selector-class">.button</span> &#123;<br><span class="hljs-attribute">padding-left</span>: <span class="hljs-number">56px</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="angular-选中当前节点"><a href="#angular-选中当前节点" class="headerlink" title="angular 选中当前节点"></a>angular 选中当前节点</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$scope.<span class="hljs-property">brandFnc</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">$event</span>)&#123;<br>    $event.<span class="hljs-property">currentTarget</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ionic中使用-iframe-可能遇到的问题"><a href="#ionic中使用-iframe-可能遇到的问题" class="headerlink" title="ionic中使用 iframe 可能遇到的问题"></a>ionic中使用 iframe 可能遇到的问题</h1><h2 id="无法访问外部url的问题–两个步骤解决："><a href="#无法访问外部url的问题–两个步骤解决：" class="headerlink" title="无法访问外部url的问题–两个步骤解决："></a>无法访问外部url的问题–两个步骤解决：</h2><p>1.iframe的src属性用ng-src属性替代，并指明绑定对象： ng-src&#x3D;”“<br>2.在controller里，调用$sce: $scope.targetUrl &#x3D; $sce.trustAsResourceUrl(url)</p><h2 id="高度无法最大化的问题–两个步骤解决："><a href="#高度无法最大化的问题–两个步骤解决：" class="headerlink" title="高度无法最大化的问题–两个步骤解决："></a>高度无法最大化的问题–两个步骤解决：</h2><p>1.ion-content 属性里添加  scroll&#x3D;”true” overflow-scroll&#x3D;”true”，<a href="https://github.com/driftyco/ionic/issues/1151">参考</a><br>2.iframe的style里添加 min-height: 100%，<a href="https://forum.ionicframework.com/t/fill-content-container/605">参考</a></p><h1 id="Angular-上传中-file-change-ng-change无效的解决方法"><a href="#Angular-上传中-file-change-ng-change无效的解决方法" class="headerlink" title="Angular 上传中 file change ng-change无效的解决方法"></a>Angular 上传中 file change ng-change无效的解决方法</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ng-controller</span>=<span class="hljs-string">&quot;form-cntlr&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">ng-click</span>=<span class="hljs-string">&quot;selectFile()&quot;</span>&gt;</span>Upload Your File<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:none&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;file&#x27;</span> </span><br><span class="hljs-tag">         <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;angular.element(this).scope().fileNameChanged(this)&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://github.com/danialfarid/ng-file-upload">ng-file-upload</a><br><a href="http://ngmodules.org/modules/ngUpload">ngUpload - An AngularJS Service for uploading files using iframe</a></p><h1 id="ionic打包-resource报错"><a href="#ionic打包-resource报错" class="headerlink" title="ionic打包 resource报错"></a>ionic打包 resource报错</h1><blockquote><p>ionic 文件夹中的文件不能带有中文。</p></blockquote><h1 id="ionic-锚点跳转"><a href="#ionic-锚点跳转" class="headerlink" title="ionic 锚点跳转"></a>ionic 锚点跳转</h1><p><a href="https://forum.ionicframework.com/t/anchor-scroll-flash/4390/9">https://forum.ionicframework.com/t/anchor-scroll-flash/4390/9</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$scope.<span class="hljs-property">scrollNextActivity</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">index</span>)&#123; <br>    $location.<span class="hljs-title function_">hash</span>(index); <br>    $ionicScrollDelegate.<span class="hljs-title function_">anchorScroll</span>(<span class="hljs-literal">true</span>); <br>&#125;;<br></code></pre></td></tr></table></figure><p>进入页面时或者触发某操作时调用 scrollNextActivity(‘id’) 即可</p><h1 id="ionic获取距离顶部的距离"><a href="#ionic获取距离顶部的距离" class="headerlink" title="ionic获取距离顶部的距离"></a>ionic获取距离顶部的距离</h1><blockquote><p>getScrollPosition()</p><blockquote><p>Returns: <code>object</code> The scroll position of this view, with the following properties:<br><code>&#123;number&#125;</code> <code>left</code> The distance the user has scrolled from the left (starts at 0).<br><code>&#123;number&#125;</code> <code>top</code> The distance the user has scrolled from the top (starts at 0).<br><code>&#123;number&#125;</code> <code>zoom</code> The current zoom level.</p></blockquote></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$ionicScrollDelegate.<span class="hljs-title function_">getScrollPosition</span>().<span class="hljs-property">top</span> <br></code></pre></td></tr></table></figure><h1 id="ionic-判断滚动到页面底部"><a href="#ionic-判断滚动到页面底部" class="headerlink" title="ionic 判断滚动到页面底部"></a>ionic 判断滚动到页面底部</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ion-scroll</span> <span class="hljs-attr">delegate-handle</span>=<span class="hljs-string">&quot;scroller&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;y&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100%; height: 100%&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> Your Ionic App Scrollable Content Here <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ion-scroll</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$scope.<span class="hljs-property">checkScroll</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> currentTop = $ionicScrollDelegate.$getByHandle(<span class="hljs-string">&#x27;scroller&#x27;</span>).<span class="hljs-title function_">getScrollPosition</span>().<span class="hljs-property">top</span>;<br>    <span class="hljs-keyword">var</span> maxScrollableDistanceFromTop = $ionicScrollDelegate.$getByHandle(<span class="hljs-string">&#x27;scroller&#x27;</span>).<span class="hljs-title function_">getScrollView</span>().<span class="hljs-property">__maxScrollTop</span>;<br>    <br>    <span class="hljs-keyword">if</span> (currentTop &gt;= maxScrollableDistanceFromTop)<br>    &#123;<br>      $scope.<span class="hljs-title function_">toggleTopMenu</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="ionic-input-点击时-弹出键盘挡住input输入框"><a href="#ionic-input-点击时-弹出键盘挡住input输入框" class="headerlink" title="ionic input 点击时 弹出键盘挡住input输入框"></a>ionic input 点击时 弹出键盘挡住input输入框</h1><p><a href="http://www.ionic.wang/js_doc-index-id-66.html">http://www.ionic.wang/js_doc-index-id-66.html</a></p><p>使用该插件的用法可以参考 <a href="https://github.com/driftyco/ionic-plugins-keyboard">https://github.com/driftyco/ionic-plugins-keyboard</a></p><p><a href="http://ionicframework.com/docs/api/directive/keyboardAttach/">http://ionicframework.com/docs/api/directive/keyboardAttach/</a></p><h1 id="ionic-serve-打开时显示ios和android两个视图"><a href="#ionic-serve-打开时显示ios和android两个视图" class="headerlink" title="ionic serve 打开时显示ios和android两个视图"></a>ionic serve 打开时显示ios和android两个视图</h1><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs r">ionic serve <span class="hljs-operator">-</span>l <span class="hljs-operator">-</span><span class="hljs-built_in">c</span> <span class="hljs-operator">-</span><span class="hljs-operator">-</span><span class="hljs-built_in">browser</span><br></code></pre></td></tr></table></figure><p><a href="https://github.com/leob/ionic-quickstarter">https://github.com/leob/ionic-quickstarter</a></p><h1 id="ionic-禁止横屏"><a href="#ionic-禁止横屏" class="headerlink" title="ionic 禁止横屏"></a>ionic 禁止横屏</h1><p>1、添加插件</p><blockquote><p>cordova plugin add net.yoik.cordova.plugins.screenorientation  </p></blockquote><p>2、添加屏幕配置 (Config.xml文件里面添加)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">preference</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;orientation&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;portrait&quot;</span> /&gt;</span>  <br></code></pre></td></tr></table></figure><p>3、在Index.html 界面 添加JS 屏幕监听事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;  <br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;deviceready&quot;</span>, onDeviceReady, <span class="hljs-literal">false</span>);  <br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">onDeviceReady</span>(<span class="hljs-params"></span>)  <br>    &#123;  <br>  <br>       <span class="hljs-keyword">var</span> so = cordova.<span class="hljs-property">plugins</span>.<span class="hljs-property">screenorientation</span>;  <br>       so.<span class="hljs-title function_">setOrientation</span>(so.<span class="hljs-property">Orientation</span>.<span class="hljs-property">LANDSCAPE</span>);  <br>    &#125;  <br>&lt;/script&gt;  <br></code></pre></td></tr></table></figure><h1 id="ionic-android-按两下后退件退出APP"><a href="#ionic-android-按两下后退件退出APP" class="headerlink" title="ionic android 按两下后退件退出APP"></a>ionic android 按两下后退件退出APP</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> backbutton = <span class="hljs-number">0</span>;<br>$ionicPlatform.<span class="hljs-title function_">registerBackButtonAction</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span> ($location.<span class="hljs-title function_">path</span>() === <span class="hljs-string">&quot;/home&quot;</span>) &#123;<br>    <span class="hljs-keyword">if</span>(backbutton == <span class="hljs-number">0</span>)&#123;<br>      backbutton++;<br>      $cordovaToast.<span class="hljs-title function_">showLongBottom</span>(<span class="hljs-string">&#x27;Press again to exit&#x27;</span>);<br>      <span class="hljs-comment">// $timeout(function()&#123;</span><br>      <span class="hljs-comment">//   backbutton=1;</span><br>      <span class="hljs-comment">// &#125;,5000);</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      navigator.<span class="hljs-property">app</span>.<span class="hljs-title function_">exitApp</span>();<br>    &#125;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    $ionicHistory.<span class="hljs-title function_">goBack</span>();<br>  &#125;<br>&#125;, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><h1 id="ionic-tab图标自定义用png图片"><a href="#ionic-tab图标自定义用png图片" class="headerlink" title="ionic tab图标自定义用png图片"></a>ionic tab图标自定义用png图片</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.tabs</span> <span class="hljs-selector-class">.tab-item</span> <span class="hljs-selector-class">.icon</span><span class="hljs-selector-class">.my-icon-AA-on</span> &#123;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">25px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;../img/tabs/aa-on.png&quot;</span>);<br>&#125;<br><br><span class="hljs-selector-class">.tabs</span> <span class="hljs-selector-class">.tab-item</span> <span class="hljs-selector-class">.icon</span><span class="hljs-selector-class">.my-icon-AA-off</span> &#123;<br>  <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>  <span class="hljs-attribute">background-position</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">background-size</span>: <span class="hljs-number">25px</span>;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;../img/tabs/aa-off.png&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>tab.html</code>中,icon-off icon-on 为自定义的类名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ion-tab</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;AA&quot;</span> <span class="hljs-attr">icon-off</span>=<span class="hljs-string">&quot;my-icon-AA-off&quot;</span> <span class="hljs-attr">icon-on</span>=<span class="hljs-string">&quot;my-icon-AA-on&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#/tab/aa_against&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ion-nav-view</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tab-aa&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ion-nav-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ion-tab</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="报错events-js-72throw-er-x2F-x2F-Unhandled-‘error’-event"><a href="#报错events-js-72throw-er-x2F-x2F-Unhandled-‘error’-event" class="headerlink" title="报错events.js:72throw er; &#x2F;&#x2F; Unhandled ‘error’ event"></a>报错events.js:72throw er; &#x2F;&#x2F; Unhandled ‘error’ event</h1><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">The error is:</span><br><span class="hljs-section">=======================================</span><br>events.js:72<br>throw er; // Unhandled <span class="hljs-emphasis">&#x27;error&#x27;</span> event<br>^<br>Error: spawn ENOENT<br>at errnoException (child<span class="hljs-emphasis">_process.js:1000:11)</span><br><span class="hljs-emphasis">at Process.ChildProcess._handle.onexit (child_</span>process.js:791:34)<br><br></code></pre></td></tr></table></figure><p>解决的方法很简单，将ionic换成cordova即可。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">cd myApp<br>cordova <span class="hljs-built_in">platform</span> <span class="hljs-built_in">add</span> android<span class="hljs-comment"> //这行可能会报错</span><br>cordova build android<br>cordova emulate android<br></code></pre></td></tr></table></figure><h1 id="生成项目-ionic-start-myApp-tabs-时可能会报错"><a href="#生成项目-ionic-start-myApp-tabs-时可能会报错" class="headerlink" title="生成项目(ionic start myApp tabs)时可能会报错"></a>生成项目(ionic start myApp tabs)时可能会报错</h1><p><code>Error: command failed:fatal:could not create work tree dir:&#39;C:\Users/ADMINI~1\AppData\Local\Temp\plugman\git\1402853493773&#39;.:No such file or directory</code></p><p>解决办法：进入上面对应的目录，建立对应的文件。比如在temp目录下建立plugman目录，在plugman目录下建立git目录，然后再git下建立1402853493773目录。即可，经测试有效。</p><h1 id="node-gyp-Permission-denied-安装软件包报错"><a href="#node-gyp-Permission-denied-安装软件包报错" class="headerlink" title="node-gyp: Permission denied 安装软件包报错"></a>node-gyp: Permission denied 安装软件包报错</h1><p>这个一般是centos等系统，在root用户下安装会报错。主要是权限问题，报错详情：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs awk">&gt; node-gyp rebuild<br><br> sh: <span class="hljs-number">1</span>: node-gyp: Permission denied<br> \<br> &gt; ws@<span class="hljs-number">0.4</span>.<span class="hljs-number">32</span> install <span class="hljs-regexp">/root/</span>.nvm<span class="hljs-regexp">/versions/</span>node<span class="hljs-regexp">/v0.12.4/</span>lib<span class="hljs-regexp">/node_modules/</span>log.io<span class="hljs-regexp">/node_modules/</span>socket.io-client<span class="hljs-regexp">/node_modules/</span>ws<br> &gt; (node​​-gyp rebuild <span class="hljs-number">2</span>&gt; builderror.log) || (<span class="hljs-keyword">exit</span> <span class="hljs-number">0</span>)<br><br><br> &gt; ws@<span class="hljs-number">0.4</span>.<span class="hljs-number">32</span> install <span class="hljs-regexp">/root/</span>.nvm<span class="hljs-regexp">/versions/</span>node<span class="hljs-regexp">/v0.12.4/</span>lib<span class="hljs-regexp">/node_modules/</span>log.io<span class="hljs-regexp">/node_modules/</span>socket.io<span class="hljs-regexp">/node_modules/</span>socket.io-client<span class="hljs-regexp">/node_modules/</span>ws<br> &gt; (node​​-gyp rebuild <span class="hljs-number">2</span>&gt; builderror.log) || (<span class="hljs-keyword">exit</span> <span class="hljs-number">0</span>)<br><br> npm ERR! Linux <span class="hljs-number">3.13</span>.<span class="hljs-number">0</span>-<span class="hljs-number">48</span>-generic<br> npm ERR! argv <span class="hljs-string">&quot;/root/.nvm/versions/node/v0.12.4/bin/node&quot;</span> <span class="hljs-string">&quot;/root/.nvm/versions/node/v0.12.4/bin/npm&quot;</span> <span class="hljs-string">&quot;install&quot;</span> <span class="hljs-string">&quot;-g&quot;</span> <span class="hljs-string">&quot; log.io&quot;</span><br> npm ERR! node v0.<span class="hljs-number">12.4</span><br> npm ERR! npm v2.<span class="hljs-number">10.1</span><br> npm ERR! file sh<br> npm ERR! code ELIFECYCLE<br> npm ERR! errno ENOENT<br> npm ERR! syscall spawn<br><br> npm ERR! contextify@<span class="hljs-number">0.1</span>.<span class="hljs-number">14</span> install: `node-gyp rebuild`<br> npm ERR! spawn ENOENT<br> npm ERR!<br> npm ERR! Failed at the contextify@<span class="hljs-number">0.1</span>.<span class="hljs-number">14</span> install script <span class="hljs-string">&#x27;node-gyp rebuild&#x27;</span>.<br> npm ERR! This is most likely a problem with the contextify package,<br> npm ERR! not with npm itself.<br> npm ERR! Tell the author that this fails on your system:<br> npm ERR! node-gyp rebuild<br> npm ERR! You can get their info via:<br> npm ERR! npm owner ls contextify<br> npm ERR! There is likely additional logging output above.<br><br> npm ERR! Please include the following file with any support request:<br> npm ERR! <span class="hljs-regexp">/root/</span>npm-debug.log<br></code></pre></td></tr></table></figure><p>可以清楚看到讯息中提示我们在执行node-gyp 的时候权限不足。查询一下Google ，找到别人blog写得简单解决方法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">set</span> unsafe-perm <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>接下来安装就正常了。 至于npm config的使用方法， 请参考 <a href="https://translate.googleusercontent.com/translate_c?depth=1&hl=zh-CN&prev=search&rurl=translate.google.com.sg&sl=zh-TW&u=https://docs.npmjs.com/misc/config&usg=ALkJrhjNU7KHzjR4I6JC5IMFf4Ffcg3KaA">此处</a> .<br>我们可以从npm config set unsafe-perm的解说中看到，我们刚刚修改的意思。</p><h1 id="gitignore-默认排除了-plugins-文件夹，团队其他人-clone-了项目后缺少插件，一个一个装太麻烦"><a href="#gitignore-默认排除了-plugins-文件夹，团队其他人-clone-了项目后缺少插件，一个一个装太麻烦" class="headerlink" title=".gitignore 默认排除了 plugins 文件夹，团队其他人 clone 了项目后缺少插件，一个一个装太麻烦"></a>.gitignore 默认排除了 plugins 文件夹，团队其他人 clone 了项目后缺少插件，一个一个装太麻烦</h1><p><code>ionic platform add/remove xxx</code> 以及 <code>ionic plugin add/remove xxx</code> 的时候，<code>Ionic CLI</code> 都在 <code>package.json</code> 中保存了项目的状态。clone 完后可以使用 <strong><code>ionic state restore</code></strong> 命令快速恢复<br>也可以在<code>.gitignore</code>中删除<code>plugins一行</code></p><h1 id="在哪里查看-Ionic-带的所有图标？"><a href="#在哪里查看-Ionic-带的所有图标？" class="headerlink" title="在哪里查看 Ionic 带的所有图标？"></a>在哪里查看 Ionic 带的所有图标？</h1><p><a href="http://ionicons.com/">http://ionicons.com</a></p><h1 id="第一次ionic-platform-add-xxx-会等很久"><a href="#第一次ionic-platform-add-xxx-会等很久" class="headerlink" title="第一次ionic platform add xxx 会等很久"></a>第一次<code>ionic platform add xxx</code> 会等很久</h1><p>正常，第一次会下载gradle等打包文件，约100M左右，先睡一觉吧，建议挂上VPN，也可以百度自己手动添加gradle。</p><h1 id="tel-xxxxx-sms-xxxxxx-mailto-xxxxxx-geo-xxxxxx-一类的链接不能唤起其他应用。"><a href="#tel-xxxxx-sms-xxxxxx-mailto-xxxxxx-geo-xxxxxx-一类的链接不能唤起其他应用。" class="headerlink" title="tel:xxxxx sms:xxxxxx mailto:xxxxxx geo:xxxxxx 一类的链接不能唤起其他应用。"></a>tel:xxxxx sms:xxxxxx mailto:xxxxxx geo:xxxxxx 一类的链接不能唤起其他应用。</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">access</span> <span class="hljs-attr">origin</span>=<span class="hljs-string">&quot;*&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">access</span> <span class="hljs-attr">origin</span>=<span class="hljs-string">&quot;tel:*&quot;</span> <span class="hljs-attr">launch-external</span>=<span class="hljs-string">&quot;yes&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">access</span> <span class="hljs-attr">origin</span>=<span class="hljs-string">&quot;sms:*&quot;</span> <span class="hljs-attr">launch-external</span>=<span class="hljs-string">&quot;yes&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">access</span> <span class="hljs-attr">origin</span>=<span class="hljs-string">&quot;mailto:*&quot;</span> <span class="hljs-attr">launch-external</span>=<span class="hljs-string">&quot;yes&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">access</span> <span class="hljs-attr">origin</span>=<span class="hljs-string">&quot;geo:*&quot;</span> <span class="hljs-attr">launch-external</span>=<span class="hljs-string">&quot;yes&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">allow-intent</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;tel:*&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">allow-intent</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;sms:*&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">allow-intent</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:*&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">allow-intent</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;geo:*&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h1 id="mac-chrome-对真机运行的app进行调试。"><a href="#mac-chrome-对真机运行的app进行调试。" class="headerlink" title="mac,chrome 对真机运行的app进行调试。"></a>mac,chrome 对真机运行的app进行调试。</h1><p>插上数据线。打开应用<br>mac，打开safari，Safari -&gt; 开发 -&gt; 手机名 -&gt; 应用名。<br>chrome，地址栏输入 chrome:&#x2F;&#x2F;inspect , 点击inspect。</p><h1 id="ionic-serve-或在实机调试时开启了-livereload-功能时的跨域问题"><a href="#ionic-serve-或在实机调试时开启了-livereload-功能时的跨域问题" class="headerlink" title="ionic serve 或在实机调试时开启了 livereload 功能时的跨域问题"></a>ionic serve 或在实机调试时开启了 livereload 功能时的跨域问题</h1><p>chrome 搜索插件，<code>Access-Control-Allow-Credentials</code> 安装打开，可以屏蔽跨域限制。</p><h1 id="APP开启检测网络并提示开启"><a href="#APP开启检测网络并提示开启" class="headerlink" title="APP开启检测网络并提示开启"></a>APP开启检测网络并提示开启</h1><p>1、<a href="https://github.com/apache/cordova-plugin-network-information">https://github.com/apache/cordova-plugin-network-information</a><br>2、<a href="https://github.com/apache/cordova-plugin-dialogs">https://github.com/apache/cordova-plugin-dialogs</a><br>3、<a href="https://github.com/deefactorial/Cordova-open-native-settings">https://github.com/deefactorial/Cordova-open-native-settings</a></p><p>具体用法请查看文档。</p><h1 id="极光推送设置分组的坑"><a href="#极光推送设置分组的坑" class="headerlink" title="极光推送设置分组的坑"></a>极光推送设置分组的坑</h1><p>服务器端网上代码很多，不多说了，客户端中有个坑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">plugins</span>.<span class="hljs-property">jPushPlugin</span>.<span class="hljs-title function_">setTagsWithAlias</span>(tagname,alias);<br></code></pre></td></tr></table></figure><p>其中 <code>tagname/alias</code> 都为 <code>string</code> , （看网上好多人这么搞的，不明白他们怎么成功的？）<br>返回错误 <code>Error reading tagAlias JSON</code><br>再试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">plugins</span>.<span class="hljs-property">jPushPlugin</span>.<span class="hljs-title function_">setTagsWithAlias</span>([tagname],alias);<br></code></pre></td></tr></table></figure><p>这样OK。 换句话说， tags是<code>数组</code>， alias是<code>string</code></p><h1 id="ionicLoading-以及网络超时写法"><a href="#ionicLoading-以及网络超时写法" class="headerlink" title="ionicLoading 以及网络超时写法"></a>ionicLoading 以及网络超时写法</h1><p>app.js中，先注册rootScope的广播</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.<span class="hljs-title function_">run</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">$ionicPlatform,$ionicLoading,ToastService, $rootScope</span>) &#123;<br>    $rootScope.$on(<span class="hljs-string">&#x27;loading:show&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $ionicLoading.<span class="hljs-title function_">show</span>(&#123; <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;努力为您加载中...&#x27;</span> &#125;)<br>    &#125;)<br>    $rootScope.$on(<span class="hljs-string">&#x27;loading:hide&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        $ionicLoading.<span class="hljs-title function_">hide</span>()<br>    &#125;)<br><br>.<span class="hljs-title function_">config</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">$httpProvider</span>) &#123;<br>$httpProvider.<span class="hljs-property">defaults</span>.<span class="hljs-property">timeout</span> = <span class="hljs-number">5000</span>; <span class="hljs-comment">//默认超时为5秒</span><br>$httpProvider.<span class="hljs-property">interceptors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope</span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">request</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) &#123;<br>               $rootScope.$broadcast(<span class="hljs-string">&#x27;loading:show&#x27;</span>)<br>                <span class="hljs-keyword">return</span> config<br>            &#125;,<br>            <span class="hljs-attr">response</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>               $rootScope.$broadcast(<span class="hljs-string">&#x27;loading:hide&#x27;</span>)<br>                <span class="hljs-keyword">return</span> response<br>            &#125;,<br>            <span class="hljs-attr">responseError</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>           $rootScope.$broadcast(<span class="hljs-string">&#x27;loading:hide&#x27;</span>)<br>                <span class="hljs-keyword">return</span> response<br><br>            &#125;,<br>            <span class="hljs-attr">requestError</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) &#123;<br>                 $rootScope.$broadcast(<span class="hljs-string">&#x27;loading:hide&#x27;</span>)<br>                <span class="hljs-keyword">return</span> config<br>            &#125;<br>        &#125;<br>    &#125;)<br></code></pre></td></tr></table></figure><h1 id="在ion-content中，由于scorll-更新了页面数据后不能拖动到底部"><a href="#在ion-content中，由于scorll-更新了页面数据后不能拖动到底部" class="headerlink" title="在ion-content中，由于scorll 更新了页面数据后不能拖动到底部"></a>在ion-content中，由于scorll 更新了页面数据后不能拖动到底部</h1><p>由于scorll 更新了页面数据后不能拖动到底部，html页面不能完全加载，原因在于当前页面没有更新size，解决方法引入$ionicScrollDelegate；<br>在controller里改变高度的地方调用方法：</p><p><code>$ionicScrollDelegate.resize</code></p><h1 id="cordova插件-splashscreen-启动白屏的问题"><a href="#cordova插件-splashscreen-启动白屏的问题" class="headerlink" title="cordova插件 splashscreen 启动白屏的问题"></a>cordova插件 splashscreen 启动白屏的问题</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">preference</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SplashScreen&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;screen&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">preference</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AutoHideSplashScreen&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">preference</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;auto-hide-splash-screen&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">preference</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ShowSplashScreenSpinner&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">preference</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SplashMaintainAspectRatio&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">preference</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SplashShowOnlyFirstTime&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">preference</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SplashScreenDelay&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10000&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>取消自动隐藏（改为代码控制隐藏），把持续时间改为较大的值（10秒），设置每次打开应用都显示splash screen</p><p>P.S.默认只有SplashScreen和SplashScreenDelay，需要把其它的（SplashMaintainAspectRatio可选）都添上。</p><p>手动隐藏splash screen，在run里面添上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.<span class="hljs-title function_">run</span>([<span class="hljs-string">&#x27;$rootScope&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">$rootScope</span>) &#123;<br>        <span class="hljs-comment">// init</span><br>        <span class="hljs-comment">// $rootScope.isLoading = false;</span><br><br>        <span class="hljs-comment">// hide splash immediately</span><br>        <span class="hljs-keyword">if</span>(navigator &amp;&amp; navigator.<span class="hljs-property">splashscreen</span>) &#123;<br>            navigator.<span class="hljs-property">splashscreen</span>.<span class="hljs-title function_">hide</span>();<br>        &#125;<br>    &#125;);<br>&#125;])<br></code></pre></td></tr></table></figure><h1 id="What-went-wrong-Execution-failed-for-task-‘-packageRelease’-gt-Failed-to-read-key-from-keystore"><a href="#What-went-wrong-Execution-failed-for-task-‘-packageRelease’-gt-Failed-to-read-key-from-keystore" class="headerlink" title="What went wrong:Execution failed for task ‘:packageRelease’ &gt; Failed to read key from keystore"></a>What went wrong:Execution failed for task ‘:packageRelease’ &gt; Failed to read key from keystore</h1><p>解决方案：重新打包签名 android.keystore</p><h1 id="What-went-wrong-A-problem-occurred-configuring-root-project-‘android’"><a href="#What-went-wrong-A-problem-occurred-configuring-root-project-‘android’" class="headerlink" title="What went wrong:A problem occurred configuring root project ‘android’."></a>What went wrong:A problem occurred configuring root project ‘android’.</h1><blockquote><p>Could not resolve all dependencies for configuration ‘:_armv7DebugCompile’.<br>Could not find any version that matches com.android.support:support-v4:[13.0.0,).<br>Searched in the following locations:<br><a href="https://repo1.maven.org/maven2/com/android/support/support-v4/maven-metadata.xml">https://repo1.maven.org/maven2/com/android/support/support-v4/maven-metadata.xml</a><br><a href="https://repo1.maven.org/maven2/com/android/support/support-v4/">https://repo1.maven.org/maven2/com/android/support/support-v4/</a></p></blockquote><p>解决方案：<br>打开Android SDK Manager<br>确保Android Suppoer Repository 和 Google Repository 已经安装</p>]]></content>
    
    
    
    <tags>
      
      <tag>Ionic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ionic工具类API和配置</title>
    <link href="/2016/11/29/2016-11-29-ionic-utility-class-API-setting/"/>
    <url>/2016/11/29/2016-11-29-ionic-utility-class-API-setting/</url>
    
    <content type="html"><![CDATA[<h1 id="ionicConfigProvider"><a href="#ionicConfigProvider" class="headerlink" title="$ionicConfigProvider"></a>$ionicConfigProvider</h1><p>$ionicConfigProvider可是一个神器，可以配置很多东东。比如配置view的缓存，配置tab栏的显示位置，配置过渡动画等等。<br>下面一个一个说。</p><h2 id="views-maxCache配置view缓存"><a href="#views-maxCache配置view缓存" class="headerlink" title="views.maxCache配置view缓存"></a>views.maxCache配置view缓存</h2><p>可以配置整个平台的ionic view缓存，也可以配置android平台或者ios平台的缓存，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myApp = angular.<span class="hljs-title function_">module</span>(<span class="hljs-string">&#x27;reallyCoolApp&#x27;</span>, [<span class="hljs-string">&#x27;ionic&#x27;</span>]);<br><br>myApp.<span class="hljs-title function_">config</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">$ionicConfigProvider</span>) &#123;<br>  $ionicConfigProvider.<span class="hljs-property">views</span>.<span class="hljs-title function_">maxCache</span>(<span class="hljs-number">5</span>);<br>  <span class="hljs-comment">//配置android平台的缓存</span><br>  $ionicConfigProvider.<span class="hljs-property">platform</span>.<span class="hljs-property">android</span>.<span class="hljs-property">views</span>.<span class="hljs-title function_">maxCache</span>(<span class="hljs-number">5</span>);<br><br>  <span class="hljs-comment">// note that you can also chain configs</span><br>  $ionicConfigProvider.<span class="hljs-property">backButton</span>.<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;Go Back&#x27;</span>).<span class="hljs-title function_">icon</span>(<span class="hljs-string">&#x27;ion-chevron-left&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="ionicConfigProvider的所有方法"><a href="#ionicConfigProvider的所有方法" class="headerlink" title="$ionicConfigProvider的所有方法"></a>$ionicConfigProvider的所有方法</h2><h3 id="1-views-transition-transition-x2F-string"><a href="#1-views-transition-transition-x2F-string" class="headerlink" title="1.views.transition(transition&#x2F;string)"></a>1.views.transition(transition&#x2F;string)</h3><p>设置视图之间的过渡切换效果，默认是platform，可选值如下：<br>platform: 根据平台动态选择相应的过渡效果，如果不是android或者ios，则默认是ios.<br>ios: iOS过渡效果.<br>android: Android过渡效果.<br>none: 无过渡效果.</p><h3 id="2-views-maxCache-maxNumber-x2F-number"><a href="#2-views-maxCache-maxNumber-x2F-number" class="headerlink" title="2.views.maxCache(maxNumber&#x2F;number)"></a>2.views.maxCache(maxNumber&#x2F;number)</h3><p>设置DOM中缓存的最大视图数目，如果超过限制，则移除最长时间没有显示的视图。DOM缓存中的视图会缓存scope和当前状态以及滚动的位置。缓存中的scope并不在 $watch 监听生命周期中，当视图重新显示的时候，会重新进入 $watch。如果 maximum cache 设置为 0, 离开的view会被立即从dom中移除, 下次再显示这个view的时候, 就会重新编译, 附加到dom上, 重新绑定到对应的元素.相当于是禁用缓存.</p><h3 id="3-views-forwardCache-value-x2F-boolean"><a href="#3-views-forwardCache-value-x2F-boolean" class="headerlink" title="3.views.forwardCache(value&#x2F;boolean)"></a>3.views.forwardCache(value&#x2F;boolean)</h3><p>默认情况下，最近访问的视图会被缓存，当导航回到某个已经访问过的视图的时候，相同实例的数据和dom元素会被重新引用到。然而，当回退到上一个视图的时候，刚刚前进的视图会被清除掉，如果你再次前进到这个视图，就会创建一个新的DOM节点元素和控制器实例。基本上任何一个前进访问的视图每次都会被重置。这个设置选项中设置为true的时候就会缓存前进的视图，而且不会每次加载的时候不会重置。</p><h3 id="4-scrolling-jsScrolling-value-x2F-boolean"><a href="#4-scrolling-jsScrolling-value-x2F-boolean" class="headerlink" title="4.scrolling.jsScrolling(value&#x2F;boolean)"></a>4.scrolling.jsScrolling(value&#x2F;boolean)</h3><p>配置是使用js的scroll滚动还是使用原生的滚动。如果设置为false和在每个 ion-content中设置overflow-scroll&#x3D;’true’一样的效果。</p><h3 id="5-backButton-icon-value-x2F-string"><a href="#5-backButton-icon-value-x2F-string" class="headerlink" title="5.backButton.icon(value&#x2F;string)"></a>5.backButton.icon(value&#x2F;string)</h3><p>设置返回按钮的图标。</p><h3 id="6-backButton-text-value-x2F-string"><a href="#6-backButton-text-value-x2F-string" class="headerlink" title="6.backButton.text(value&#x2F;string)"></a>6.backButton.text(value&#x2F;string)</h3><p>设置返回按钮的文字。</p><p>backButton.previousTitleText(value&#x2F;boolean)<br>设置是否将上一个view视图的title设置成返回按钮的文字，iOS是默认的true。</p><h3 id="7-form-checkbox-value-x2F-string"><a href="#7-form-checkbox-value-x2F-string" class="headerlink" title="7.form.checkbox(value&#x2F;string)"></a>7.form.checkbox(value&#x2F;string)</h3><p>设置Checkbox的样式. Android 默认是方形square，iOS 默认是圆形circle.</p><h3 id="8-form-toggle-value-x2F-string"><a href="#8-form-toggle-value-x2F-string" class="headerlink" title="8.form.toggle(value&#x2F;string)"></a>8.form.toggle(value&#x2F;string)</h3><p>设置Toggle元素的样式. Android默认是small，iOS默认是large.</p><h3 id="9-spinner-icon-value-x2F-string"><a href="#9-spinner-icon-value-x2F-string" class="headerlink" title="9.spinner.icon(value&#x2F;string)"></a>9.spinner.icon(value&#x2F;string)</h3><p>设置默认的spinner图标。可以是: android, ios, ios-small, bubbles, circles, crescent, dots, lines, ripple, or spiral.</p><h3 id="10-tabs-style-value-x2F-string"><a href="#10-tabs-style-value-x2F-string" class="headerlink" title="10.tabs.style(value&#x2F;string)"></a>10.tabs.style(value&#x2F;string)</h3><p>设置tab的样式。 Android 默认是striped and iOS 默认是standard。可选的值是striped and standard.</p><h3 id="11-tabs-position-value-x2F-string"><a href="#11-tabs-position-value-x2F-string" class="headerlink" title="11.tabs.position(value&#x2F;string)"></a>11.tabs.position(value&#x2F;string)</h3><p>设置Tab的位置. Android tab的位置默认在顶部，iOS 默认是在底部.可选的值是 top 和 bottom.</p><h3 id="12-templates-maxPrefetch-value-x2F-integer"><a href="#12-templates-maxPrefetch-value-x2F-integer" class="headerlink" title="12.templates.maxPrefetch(value&#x2F;integer)"></a>12.templates.maxPrefetch(value&#x2F;integer)</h3><p>设置根据在$stateProvider.state中定义的模板url预取的模板数量。 如果设置为 0,当导航到新的页面时候用户必须等待加载到该页面. 默认是 30.</p><h3 id="13-navBar-alignTitle-value"><a href="#13-navBar-alignTitle-value" class="headerlink" title="13.navBar.alignTitle(value)"></a>13.navBar.alignTitle(value)</h3><p>设置导航条的标题的对其方式。 默认是center。可选值如下：</p><h3 id="14-navBar-positionPrimaryButtons-value-x2F-string"><a href="#14-navBar-positionPrimaryButtons-value-x2F-string" class="headerlink" title="14.navBar.positionPrimaryButtons(value&#x2F;string)"></a>14.navBar.positionPrimaryButtons(value&#x2F;string)</h3><p>设置导航条中主导航按钮的对其位置，默认是 left.</p><h1 id="ionic-Platform平台相关接口"><a href="#ionic-Platform平台相关接口" class="headerlink" title="ionic.Platform平台相关接口"></a>ionic.Platform平台相关接口</h1><p>ionic.Platform提供了平台相关的函数方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">angular.<span class="hljs-title function_">module</span>(<span class="hljs-string">&#x27;PlatformApp&#x27;</span>, [<span class="hljs-string">&#x27;ionic&#x27;</span>])<br>.<span class="hljs-title function_">controller</span>(<span class="hljs-string">&#x27;PlatformCtrl&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">$scope</span>) &#123;<br><br>  ionic.<span class="hljs-property">Platform</span>.<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// will execute when device is ready, or immediately if the device is already ready.</span><br>  &#125;);<br><br>  <span class="hljs-keyword">var</span> deviceInformation = ionic.<span class="hljs-property">Platform</span>.<span class="hljs-title function_">device</span>();<br><br>  <span class="hljs-keyword">var</span> isWebView = ionic.<span class="hljs-property">Platform</span>.<span class="hljs-title function_">isWebView</span>();<br>  <span class="hljs-keyword">var</span> isIPad = ionic.<span class="hljs-property">Platform</span>.<span class="hljs-title function_">isIPad</span>();<br>  <span class="hljs-keyword">var</span> isIOS = ionic.<span class="hljs-property">Platform</span>.<span class="hljs-title function_">isIOS</span>();<br>  <span class="hljs-keyword">var</span> isAndroid = ionic.<span class="hljs-property">Platform</span>.<span class="hljs-title function_">isAndroid</span>();<br>  <span class="hljs-keyword">var</span> isWindowsPhone = ionic.<span class="hljs-property">Platform</span>.<span class="hljs-title function_">isWindowsPhone</span>();<br><br>  <span class="hljs-keyword">var</span> currentPlatform = ionic.<span class="hljs-property">Platform</span>.<span class="hljs-title function_">platform</span>();<br>  <span class="hljs-keyword">var</span> currentPlatformVersion = ionic.<span class="hljs-property">Platform</span>.<span class="hljs-title function_">version</span>();<br><br>  ionic.<span class="hljs-property">Platform</span>.<span class="hljs-title function_">exitApp</span>(); <span class="hljs-comment">// stops the app</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="ionic-Platform所有方法"><a href="#ionic-Platform所有方法" class="headerlink" title="ionic.Platform所有方法"></a>ionic.Platform所有方法</h2><h3 id="1-ready-callback"><a href="#1-ready-callback" class="headerlink" title="1.ready(callback)"></a>1.ready(callback)</h3><p>设备准备就绪后触发回调函数, 如果设备本来已经就绪会立即触发回调函数。该方法可以在任何地方运行，不用包装在方法中。当APP中有WebView (Cordova), 设备就绪时就会调用回调。如果app是在web browser中, 会在window.load之后调用回调函数。 需要注意Cordova features (Camera, FileSystem, etc) 在web浏览器中都不会起作用。</p><h3 id="2-setGrade-grade"><a href="#2-setGrade-grade" class="headerlink" title="2.setGrade(grade)"></a>2.setGrade(grade)</h3><p>Set the grade of the device: ‘a’, ‘b’, or ‘c’. ‘a’ is the best (most css features enabled), ‘c’ is the worst. By default, sets the grade depending on the current device.</p><h3 id="3-device"><a href="#3-device" class="headerlink" title="3.device()"></a>3.device()</h3><p>Return the current device (given by cordova).returns: object The device object.</p><h3 id="4-isWebView"><a href="#4-isWebView" class="headerlink" title="4.isWebView()"></a>4.isWebView()</h3><p>Returns: boolean Check if we are running within a WebView (such as Cordova).</p><h3 id="5-isIPad"><a href="#5-isIPad" class="headerlink" title="5.isIPad()"></a>5.isIPad()</h3><p>Returns: boolean Whether we are running on iPad.</p><h3 id="6-isIOS"><a href="#6-isIOS" class="headerlink" title="6.isIOS()"></a>6.isIOS()</h3><p>Returns: boolean Whether we are running on iOS.</p><h3 id="7-isAndroid"><a href="#7-isAndroid" class="headerlink" title="7.isAndroid()"></a>7.isAndroid()</h3><p>Returns: boolean Whether we are running on Android.</p><h3 id="8-isWindowsPhone"><a href="#8-isWindowsPhone" class="headerlink" title="8.isWindowsPhone()"></a>8.isWindowsPhone()</h3><p>Returns: boolean Whether we are running on Windows Phone.</p><h3 id="9-platform"><a href="#9-platform" class="headerlink" title="9.platform()"></a>9.platform()</h3><p>Returns: string The name of the current platform.</p><h3 id="10-version"><a href="#10-version" class="headerlink" title="10.version()"></a>10.version()</h3><p>Returns: number The version of the current device platform.</p><h3 id="11-exitApp"><a href="#11-exitApp" class="headerlink" title="11.exitApp()"></a>11.exitApp()</h3><p>Exit the app.</p><h3 id="12-showStatusBar-shouldShow-x2F-boolean"><a href="#12-showStatusBar-shouldShow-x2F-boolean" class="headerlink" title="12.showStatusBar(shouldShow&#x2F;boolean)"></a>12.showStatusBar(shouldShow&#x2F;boolean)</h3><p>Shows or hides the device status bar (in Cordova). Requires cordova plugin add org.apache.cordova.statusbar</p><h3 id="13-fullScreen-showFullScreen-x2F-boolean-showStatusBar-x2F-boolean"><a href="#13-fullScreen-showFullScreen-x2F-boolean-showStatusBar-x2F-boolean" class="headerlink" title="13.fullScreen([showFullScreen&#x2F;boolean], [showStatusBar&#x2F;boolean])"></a>13.fullScreen([showFullScreen&#x2F;boolean], [showStatusBar&#x2F;boolean])</h3><p>Sets whether the app is fullscreen or not (in Cordova).</p><h3 id="14-ionic-Platform属性"><a href="#14-ionic-Platform属性" class="headerlink" title="14.ionic.Platform属性"></a>14.ionic.Platform属性</h3><h3 id="15-boolean-isReady"><a href="#15-boolean-isReady" class="headerlink" title="15.boolean isReady"></a>15.boolean isReady</h3><p>Whether the device is ready.</p><h3 id="16-boolean-isFullScreen"><a href="#16-boolean-isFullScreen" class="headerlink" title="16.boolean isFullScreen"></a>16.boolean isFullScreen</h3><p>Whether the device is fullscreen.</p><h3 id="17-Array-string-platforms"><a href="#17-Array-string-platforms" class="headerlink" title="17.Array(string) platforms"></a>17.Array(string) platforms</h3><p>An array of all platforms found.</p><h3 id="18-string-grade"><a href="#18-string-grade" class="headerlink" title="18.string grade"></a>18.string grade</h3><p>What grade the current platform is.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Ionic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ionic 跳转（进入）二级页面隐藏Tab，无再进入第三季页面，TAB出现BUG</title>
    <link href="/2016/11/29/2016-11-30-ionic-jump%20(into)-the-secondary-hidden-Tab-page/"/>
    <url>/2016/11/29/2016-11-30-ionic-jump%20(into)-the-secondary-hidden-Tab-page/</url>
    
    <content type="html"><![CDATA[<h1 id="1-ion-view"><a href="#1-ion-view" class="headerlink" title="1.ion-view"></a>1.ion-view</h1><p>在 <code>ion-view</code> 加上 <code>hide-tabs</code> 指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ion-view</span> <span class="hljs-attr">hide-tabs</span>&gt;</span><br>..<br><span class="hljs-tag">&lt;/<span class="hljs-name">ion-view</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="2-在JS中加入"><a href="#2-在JS中加入" class="headerlink" title="2.在JS中加入"></a>2.在JS中加入</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;hideTabs&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">$rootScope, $location</span>) &#123;<br>    <span class="hljs-keyword">var</span> style = angular.<span class="hljs-title function_">element</span>(<span class="hljs-string">&#x27;&lt;style&gt;&#x27;</span>).<span class="hljs-title function_">html</span>(<br>      <span class="hljs-string">&#x27;.has-tabs.no-tabs:not(.has-tabs-top) &#123; bottom: 0; &#125;\n&#x27;</span> +<br>      <span class="hljs-string">&#x27;.no-tabs.has-tabs-top &#123; top: 44px; &#125;&#x27;</span>);<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(style[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">restrict</span>: <span class="hljs-string">&#x27;A&#x27;</span>,<br>      <span class="hljs-attr">link</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">scope, element, attributes</span>) &#123;<br>        <span class="hljs-keyword">var</span> tabBar = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.tab-nav&#x27;</span>);<br>        <span class="hljs-keyword">var</span> scroll = element[<span class="hljs-number">0</span>].<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.scroll-content&#x27;</span>);<br>        scope.$on(<span class="hljs-string">&#x27;$ionicView.beforeEnter&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>          scope.$watch(attributes.<span class="hljs-property">hideTabs</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>            tabBar.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;slide-away&#x27;</span>);<br>            scroll.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;no-tabs&#x27;</span>);<br>          &#125;);<br>        &#125;);<br>        scope.$on(<span class="hljs-string">&#x27;$ionicView.afterLeave&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">if</span> ($location.<span class="hljs-title function_">path</span>() == <span class="hljs-string">&#x27;/tab/aa_against&#x27;</span> || $location.<span class="hljs-title function_">path</span>() == <span class="hljs-string">&#x27;/tab/sf_against&#x27;</span> || $location.<span class="hljs-title function_">path</span>() == <span class="hljs-string">&#x27;/tab/yuding&#x27;</span> || $location.<span class="hljs-title function_">path</span>() == <span class="hljs-string">&#x27;/tab/mine&#x27;</span>) &#123;<br>            tabBar.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;slide-away&#x27;</span>);<br>            scroll.<span class="hljs-property">classList</span>.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;no-tabs&#x27;</span>);<br>          &#125;<br>        &#125;);<br>      &#125;<br>    &#125;;<br>  &#125;);<br></code></pre></td></tr></table></figure><h1 id="gt-PS："><a href="#gt-PS：" class="headerlink" title="&gt; PS："></a>&gt; PS：</h1><p>在</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">scope.$on(<span class="hljs-string">&#x27;$ionicView.afterLeave&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;) <br></code></pre></td></tr></table></figure><p>加入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> ($location.<span class="hljs-title function_">path</span>()===···)&#123;&#125;<br></code></pre></td></tr></table></figure><p>判断是否为第一级页面,是才remove隐藏 <code>class</code> ，其他页面始终隐藏。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Ionic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ionic不同view跳转到同一个view并保留历史的路由设计</title>
    <link href="/2016/11/29/2016-11-29-ionic-different-view-jump-to-the-same-view-and-keep-history-of-routing-design/"/>
    <url>/2016/11/29/2016-11-29-ionic-different-view-jump-to-the-same-view-and-keep-history-of-routing-design/</url>
    
    <content type="html"><![CDATA[<p>最近手上的 ionic 项目，从左边侧滑的交互方式换到了 tabs 的交互方式。<br>以前的树形路由需要改造成网状的。<br>于是开始在网上搜索有没有现成的技术方案，找了一圈下来发现，ionic 的社区里都是一些没法解决的回复。<br>但是自己翻看 ui-router 的时候发现 guide 里面是有网状路由设计的。<br>看逻辑图</p>  <a class="fancybox_img"  rel="group" href="http://resource.zwjay.cn/jekyll/img/ionic-different-view-jump-to-the-same-view-and-keep-history-of-routing-design.png">       <img alt="路由图" src="http://resource.zwjay.cn/jekyll/img/ionic-different-view-jump-to-the-same-view-and-keep-history-of-routing-design.png" />  </a><p>上代码：state 里面新加一个状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.<span class="hljs-title function_">state</span>(<span class="hljs-string">&quot;other&quot;</span>, &#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/other&quot;</span>,<br>    <span class="hljs-attr">abstract</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">controller</span>: <span class="hljs-string">&quot;OtherCtrl&quot;</span>,<br>    <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;ion-nav-view&gt;&lt;/ion-nav-view&gt;&quot;</span>,<br>    <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">$rootScope, fromStateServ</span>) &#123;<br>        fromStateServ.<span class="hljs-title function_">setState</span>(<span class="hljs-string">&quot;other&quot;</span>, $rootScope.<span class="hljs-property">fromState</span>, $rootScope.<span class="hljs-property">fromParams</span>);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>对应的controller</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.<span class="hljs-title function_">controller</span>(<span class="hljs-string">&quot;OtherCtrl&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">$scope, $state, fromStateServ</span>) &#123;<br>    $scope.<span class="hljs-property">backNav</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> fromState = fromStateServ.<span class="hljs-title function_">getState</span>(<span class="hljs-string">&quot;other&quot;</span>);<br>        <span class="hljs-keyword">if</span> (fromState.<span class="hljs-property">fromState</span> !== <span class="hljs-literal">undefined</span>) &#123;<br>            $state.<span class="hljs-title function_">go</span>(fromState.<span class="hljs-property">fromState</span>.<span class="hljs-property">name</span>, fromState.<span class="hljs-property">fromParams</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//设置没有历史的时候，默认的跳转</span><br>            $state.<span class="hljs-title function_">go</span>(<span class="hljs-string">&quot;app.xxx&quot;</span>);<br>        &#125;<br>    &#125;;<br>&#125;)<br></code></pre></td></tr></table></figure><p>保留 history 的公共方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">.<span class="hljs-title function_">factory</span>(<span class="hljs-string">&quot;fromStateServ&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">data</span>: &#123;&#125;,<br>        <span class="hljs-attr">setState</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable language_">module</span>, fromState, fromParams</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>[<span class="hljs-variable language_">module</span>] = &#123;<br>                <span class="hljs-string">&quot;fromState&quot;</span>: fromState,<br>                <span class="hljs-string">&quot;fromParams&quot;</span>: fromParams<br>            &#125;;<br>        &#125;,<br>        <span class="hljs-attr">getState</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable language_">module</span></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>[<span class="hljs-variable language_">module</span>];<br>        &#125;<br>    &#125;;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Ionic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fiddler无法抓取chrome解决方法</title>
    <link href="/2016/11/28/2016-11-28-fiddler-unable-to-grabchrome/"/>
    <url>/2016/11/28/2016-11-28-fiddler-unable-to-grabchrome/</url>
    
    <content type="html"><![CDATA[<p>前端开发中，不可避免的要和服务器端进行联调，少了fiddler这个利器可不行。</p><p>由于无线开发需要配置UA，我使用chrome进行访问，但是今儿一早过来，发现fiddler无法抓取chrome的请求了。</p><span id="more"></span><p>想想昨天对chrome进行的操作，我觉得问题应该出在代理的身上。</p><p>实际上fiddler是可以抓chrome的请求的。<br>由于我的chrome安装了代理管理的插件SwitchySharp，无论选择直接连接还是选择使用代理连接，插件都会屏蔽fiddler的设置。<br>fiddler会自动给浏览器设置一个代理127.0.0.1 端口8888，并且记忆浏览器的代理设置，所有的请求先走fiddler代理，再走浏览器代理。<br>如果使用插件，可能会直接屏蔽了fiddler的代理，因此无法监听到请求了。</p><p>chrome下的解决方法，代理插件选择“使用系统代理设置”选项，fiddler又重新能看到chrome的请求了。<br>或者不使用插件，不用卸载，chrome很方便禁用一个插件。然后使用浏览器默认的代理设置方式就ok了。</p><p>使用代理插件是为了方便切换代理，但是可能会导致fiddler等工具无法使用。真是鱼和熊掌不可兼得。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Fiddler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ionic 替代 Modal 的方案</title>
    <link href="/2016/11/28/2016-11-28-ionic-alternative-modal-plan/"/>
    <url>/2016/11/28/2016-11-28-ionic-alternative-modal-plan/</url>
    
    <content type="html"><![CDATA[<p>在 $state.go 前记录下当前的 view ，然后禁止下一个 view 记录 backView ，就不会显示后退按钮（ Android 硬件后退也不行 ）。在需要关闭时，后来加入导航栈的任意 view 中设置 backView 为记录下来的 view ，然后 back 。</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// go 的时候</span><br><span class="hljs-keyword">var</span> backHistoryId = $ionicHistory.<span class="hljs-title function_">currentHistoryId</span>();<br><span class="hljs-keyword">var</span> backViewId = $ionicHistory.<span class="hljs-title function_">currentView</span>().<span class="hljs-property">viewId</span>;<br>$ionicHistory.<span class="hljs-title function_">nextViewOptions</span>(&#123;<br>  <span class="hljs-attr">disableBack</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">disableAnimate</span>: <span class="hljs-literal">true</span><br>&#125;);<br>$state.<span class="hljs-title function_">go</span>(<span class="hljs-string">&#x27;my-awesome-modal&#x27;</span>, &#123;<span class="hljs-attr">backViewId</span>: backViewId&#125;);<br><br><br><span class="hljs-comment">// back 的时候</span><br><span class="hljs-keyword">var</span> backHistoryId = $ionicHistory.<span class="hljs-title function_">currentHistoryId</span>();<br><span class="hljs-keyword">var</span> backView = $ionicHistory.<span class="hljs-title function_">viewHistory</span>().<span class="hljs-property">histories</span>[backHistoryId].<span class="hljs-property">stack</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">v</span>) &#123;<br>  <span class="hljs-keyword">return</span> v.<span class="hljs-property">stateId</span> === $stateParams.<span class="hljs-property">backViewId</span>;<br>&#125;)[<span class="hljs-number">0</span>];<br>$ionicHistory.<span class="hljs-title function_">backView</span>(backView);<br>$ionicHistory.<span class="hljs-title function_">goBack</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Ionic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ionic 定位</title>
    <link href="/2016/11/22/2016-11-22-ionic-location/"/>
    <url>/2016/11/22/2016-11-22-ionic-location/</url>
    
    <content type="html"><![CDATA[<h1 id="原生HTML5-API-定位"><a href="#原生HTML5-API-定位" class="headerlink" title="原生HTML5 API 定位"></a>原生HTML5 API 定位</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">navigator.<span class="hljs-property">geolocation</span>.<span class="hljs-title function_">getCurrentPosition</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">pos</span>)&#123;<br>               <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(pos))<br>            &#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)&#123;<br>               <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(err))<br>          &#125;, &#123;<br>    <span class="hljs-attr">enableHighAccuracy</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//开机高精度</span><br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">60</span>*<span class="hljs-number">1000</span>, <span class="hljs-comment">//过时时间</span><br>    <span class="hljs-attr">maximumAge</span>: <span class="hljs-number">1000</span>*<span class="hljs-number">60</span>*<span class="hljs-number">10</span> <br>&#125;);<br></code></pre></td></tr></table></figure><p>具体可以查看MDN文档</p><span id="more"></span><h1 id="百度定位-（获取当前坐标的信息）"><a href="#百度定位-（获取当前坐标的信息）" class="headerlink" title="百度定位 （获取当前坐标的信息）"></a>百度定位 （获取当前坐标的信息）</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> posToAddrByBaidu = <span class="hljs-keyword">function</span> (<span class="hljs-params">lat, long, callBack</span>) &#123;<br><br>  <span class="hljs-keyword">var</span> <span class="hljs-title class_">Ak</span> = <span class="hljs-string">&#x27;hoReLX5zqc9134wD3GL6PLuv1qInfoBT&#x27;</span>; <span class="hljs-comment">//你应用的AK</span><br><br>  <span class="hljs-keyword">var</span> getUrl = <span class="hljs-string">&#x27;http://api.map.baidu.com/geocoder/v2/?&#x27;</span> +<br>    <span class="hljs-string">&#x27;ak=&#x27;</span> + <span class="hljs-title class_">Ak</span> +<br>    <span class="hljs-string">&#x27;&amp;location=&#x27;</span> + lat + <span class="hljs-string">&#x27;,&#x27;</span> + long + <span class="hljs-string">&#x27;&amp;output=json&amp;pois=0&#x27;</span>;<br>  $http.<span class="hljs-title function_">get</span>(getUrl, &#123;<span class="hljs-attr">cache</span>: <span class="hljs-literal">true</span>&#125;)<br>    .<span class="hljs-title function_">success</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>      <span class="hljs-title function_">callBack</span>(data);<br>    &#125;).<span class="hljs-title function_">error</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;网络问题&quot;</span>);<br>  &#125;);<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="高德地图定位"><a href="#高德地图定位" class="headerlink" title="高德地图定位"></a>高德地图定位</h1><p>引入高德JS<br>具体可查看高德API</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--高德地图--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://cache.amap.com/lbs/static/es5.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://webapi.amap.com/maps?v=1.3&amp;key=ec5a240d5b269c181d4573cb5da1b792&amp;plugin=AMap.Geocoder,AMap.Autocomplete,AMap.PlaceSearch&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$rootScope.<span class="hljs-property">mapObj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.<span class="hljs-title class_">Map</span>(<span class="hljs-string">&quot;mainposition&quot;</span>, &#123;<br>      <span class="hljs-attr">resizeEnable</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">zoom</span>: <span class="hljs-number">18</span>,<br>      <span class="hljs-attr">doubleClickZoom</span>: <span class="hljs-literal">false</span><br>    &#125;);<br>    <span class="hljs-comment">//高德定位</span><br>    $rootScope.<span class="hljs-property">mapObj</span>.<span class="hljs-title function_">plugin</span>(<span class="hljs-string">&#x27;AMap.Geolocation&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      $rootScope.<span class="hljs-property">geolocation</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.<span class="hljs-title class_">Geolocation</span>(&#123;<br>        <span class="hljs-attr">enableHighAccuracy</span>: <span class="hljs-literal">true</span>,<span class="hljs-comment">//是否使用高精度定位，默认:true</span><br>        <span class="hljs-attr">timeout</span>: <span class="hljs-number">10000</span>,          <span class="hljs-comment">//超过10秒后停止定位，默认：无穷大</span><br>        <span class="hljs-attr">maximumAge</span>: <span class="hljs-number">0</span>,           <span class="hljs-comment">//定位结果缓存0毫秒，默认：0</span><br>        <span class="hljs-attr">convert</span>: <span class="hljs-literal">true</span>,           <span class="hljs-comment">//自动偏移坐标，偏移后的坐标为高德坐标，默认：true</span><br>        <span class="hljs-attr">showButton</span>: <span class="hljs-literal">true</span>,        <span class="hljs-comment">//显示定位按钮，默认：true</span><br>        <span class="hljs-attr">buttonPosition</span>: <span class="hljs-string">&#x27;LB&#x27;</span>,    <span class="hljs-comment">//定位按钮停靠位置，默认：&#x27;LB&#x27;，左下角</span><br>        <span class="hljs-attr">buttonOffset</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.<span class="hljs-title class_">Pixel</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>),<span class="hljs-comment">//定位按钮与设置的停靠位置的偏移量，默认：Pixel(10, 20)</span><br>        <span class="hljs-attr">showMarker</span>: <span class="hljs-literal">true</span>,        <span class="hljs-comment">//定位成功后在定位到的位置显示点标记，默认：true</span><br>        <span class="hljs-attr">showCircle</span>: <span class="hljs-literal">false</span>,        <span class="hljs-comment">//定位成功后用圆圈表示定位精度范围，默认：true</span><br>        <span class="hljs-attr">panToLocation</span>: <span class="hljs-literal">true</span>,     <span class="hljs-comment">//定位成功后将定位到的位置作为地图中心点，默认：true</span><br>        <span class="hljs-attr">zoomToAccuracy</span>: <span class="hljs-literal">false</span>      <span class="hljs-comment">//定位成功后调整地图视野范围使定位位置及精度范围视野内可见，默认：false</span><br>      &#125;);<br>      $rootScope.<span class="hljs-property">mapObj</span>.<span class="hljs-title function_">addControl</span>($rootScope.<span class="hljs-property">geolocation</span>);<br>      $rootScope.<span class="hljs-property">geolocation</span>.<span class="hljs-title function_">getCurrentPosition</span>();<br>      <span class="hljs-comment">//持续监听</span><br>      $scope.<span class="hljs-property">geolocation</span>.<span class="hljs-title function_">watchPosition</span>();<br>      $ionicLoading.<span class="hljs-title function_">show</span>(&#123;<br>        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;定位中...&#x27;</span><br>      &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;The loading indicator is now displayed&quot;</span>);<br>      &#125;);<br>      <span class="hljs-comment">//返回定位信息</span><br>      <span class="hljs-title class_">AMap</span>.<span class="hljs-property">event</span>.<span class="hljs-title function_">addListener</span>($rootScope.<span class="hljs-property">geolocation</span>, <span class="hljs-string">&#x27;complete&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(e));<br>        <span class="hljs-keyword">var</span> lnglatXY = [e.<span class="hljs-property">position</span>.<span class="hljs-property">lng</span>, e.<span class="hljs-property">position</span>.<span class="hljs-property">lat</span>];<br>        <span class="hljs-keyword">var</span> geocoder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AMap</span>.<span class="hljs-title class_">Geocoder</span>(&#123;<br>          <span class="hljs-attr">radius</span>: <span class="hljs-number">1000</span>,<br>          <span class="hljs-attr">extensions</span>: <span class="hljs-string">&quot;all&quot;</span><br>        &#125;);<br>        <span class="hljs-comment">//得到坐标信息</span><br>        geocoder.<span class="hljs-title function_">getAddress</span>(lnglatXY, <span class="hljs-keyword">function</span> (<span class="hljs-params">status, result</span>) &#123;<br>          <span class="hljs-keyword">if</span> (status === <span class="hljs-string">&#x27;complete&#x27;</span> &amp;&amp; result.<span class="hljs-property">info</span> === <span class="hljs-string">&#x27;OK&#x27;</span>) &#123;<br>            $rootScope.<span class="hljs-property">address</span> = result.<span class="hljs-property">regeocode</span>.<span class="hljs-property">formattedAddress</span>;<br>            <span class="hljs-comment">//$scope.address = result.regeocode.pois.name; //返回地址描述</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($rootScope.<span class="hljs-property">address</span>);<br>            $rootScope.$apply();<br>          &#125; <span class="hljs-keyword">else</span> &#123;<br>          &#125;<br>        &#125;);<br>        <br>      &#125;);<br>      <span class="hljs-comment">//返回定位出错信息</span><br>      <span class="hljs-title class_">AMap</span>.<span class="hljs-property">event</span>.<span class="hljs-title function_">addListener</span>($rootScope.<span class="hljs-property">geolocation</span>, <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>        $cordovaToast.<span class="hljs-title function_">showShortBottom</span>(<span class="hljs-string">&#x27;定位失败&#x27;</span>);<br>      &#125;);<br>    &#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Ionic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cordova ionic 常用命令</title>
    <link href="/2016/11/18/2016-11-18-cordova-ionic-common-commands/"/>
    <url>/2016/11/18/2016-11-18-cordova-ionic-common-commands/</url>
    
    <content type="html"><![CDATA[<h1 id="安装-cordova："><a href="#安装-cordova：" class="headerlink" title="安装 cordova："></a>安装 cordova：</h1><p>npm install -g cordova</p><h1 id="创建应用程序"><a href="#创建应用程序" class="headerlink" title="创建应用程序"></a>创建应用程序</h1><p>cordova create hello com.example.hello HelloWorld </p><h1 id="添加平台"><a href="#添加平台" class="headerlink" title="添加平台"></a>添加平台</h1><p>cordova platform add android</p><p>cordova platform add ios</p><span id="more"></span><h1 id="完成后运行以下命令查看："><a href="#完成后运行以下命令查看：" class="headerlink" title="完成后运行以下命令查看："></a>完成后运行以下命令查看：</h1><p>cordova platfrom list</p><h1 id="移除Android平台支持"><a href="#移除Android平台支持" class="headerlink" title="移除Android平台支持"></a>移除Android平台支持</h1><p>cordova platform rm android</p><h1 id="运行以下命令编译应用程序："><a href="#运行以下命令编译应用程序：" class="headerlink" title="运行以下命令编译应用程序："></a>运行以下命令编译应用程序：</h1><p>cordova build</p><p>或</p><p>cordova build android  &#x2F;&#x2F;只针对Andorid平台编译</p><p>实际上build命令相当于以下两个命令，只不过cordova prepare 不执行编译,只是把你修改的程序复制到可以编译的目录下面：</p><p>cordova prepare android  </p><p>cordova compile android</p><h1 id="启动模拟器："><a href="#启动模拟器：" class="headerlink" title="启动模拟器："></a>启动模拟器：</h1><p>cordova emulate android</p><h1 id="添加插件："><a href="#添加插件：" class="headerlink" title="添加插件："></a>添加插件：</h1><p>可以用CLI搜索可用的插件：</p><p>cordova plugin search bar code</p><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>比如:</p><p>cordova plugin add org.apache.cordova.device                   &#x2F;&#x2F;设备API</p><p>cordova plugin add org.apache.cordova.network-information  &#x2F;&#x2F;网络（事件）</p><p>cordova plugin add org.apache.cordova.battery-status      &#x2F;&#x2F;电池（事件）</p><p>cordova plugin add org.apache.cordova.device-motion     &#x2F;&#x2F;加速器</p><p>cordova plugin add org.apache.cordova.device-orientation     &#x2F;&#x2F;罗盘</p><p>cordova plugin add org.apache.cordova.geolocation         &#x2F;&#x2F;定位</p><p>cordova plugin add org.apache.cordova.camera                 &#x2F;&#x2F;摄像头</p><p>cordova plugin add org.apache.cordova.media-capture     &#x2F;&#x2F;媒体文件处理</p><p>cordova plugin add org.apache.cordova.media                   &#x2F;&#x2F;媒体文件处理</p><p>cordova plugin add org.apache.cordova.file                        &#x2F;&#x2F;文件访问</p><p>cordova plugin add org.apache.cordova.file-transfer          &#x2F;&#x2F;文件传输</p><p>cordova plugin add org.apache.cordova.dialogs                 &#x2F;&#x2F;对话框</p><p>cordova plugin add org.apache.cordova.vibration              &#x2F;&#x2F;震动</p><p>cordova plugin add org.apache.cordova.contacts               &#x2F;&#x2F;联系人</p><p>cordova plugin add org.apache.cordova.globalization       &#x2F;&#x2F;全球化</p><p>cordova plugin add org.apache.cordova.splashscreen       &#x2F;&#x2F;闪屏</p><p>cordova plugin add org.apache.cordova.inappbrowser             &#x2F;&#x2F;打开新的浏览器窗口</p><p>cordova plugin add org.apache.cordova.console                &#x2F;&#x2F;调试控制台</p><h1 id="你可以用以下命令查看所有已经安装的插件"><a href="#你可以用以下命令查看所有已经安装的插件" class="headerlink" title="你可以用以下命令查看所有已经安装的插件"></a>你可以用以下命令查看所有已经安装的插件</h1><p>cordova plugin ls</p><h1 id="使用以下命令删除插件："><a href="#使用以下命令删除插件：" class="headerlink" title="使用以下命令删除插件："></a>使用以下命令删除插件：</h1><p>cordova plugin rm org.apache.cordova.console    </p><h1 id="或者通过地址来添加插件："><a href="#或者通过地址来添加插件：" class="headerlink" title="或者通过地址来添加插件："></a>或者通过地址来添加插件：</h1><p>cordova plugin add <a href="https://github.com/apache/cordova-plugin-console.git">https://github.com/apache/cordova-plugin-console.git</a></p><h1 id="帮助："><a href="#帮助：" class="headerlink" title="帮助："></a>帮助：</h1><p>cordova help</p><h1 id="更新cordova："><a href="#更新cordova：" class="headerlink" title="更新cordova："></a>更新cordova：</h1><p>npm update -g cordova</p><h1 id="cordova更新完成后，还需要更新项目："><a href="#cordova更新完成后，还需要更新项目：" class="headerlink" title="cordova更新完成后，还需要更新项目："></a>cordova更新完成后，还需要更新项目：</h1><p>cordova platform update android</p><h1 id="编译发行版"><a href="#编译发行版" class="headerlink" title="编译发行版"></a>编译发行版</h1><p>$ ionic build android –release</p><h1 id="生成签名"><a href="#生成签名" class="headerlink" title="生成签名"></a>生成签名</h1><p>keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000</p><h1 id="签名，注意目录需一致"><a href="#签名，注意目录需一致" class="headerlink" title="签名，注意目录需一致"></a>签名，注意目录需一致</h1><p>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.keystore android-release-unsigned.apk myApp-alias</p><h1 id="zipalign"><a href="#zipalign" class="headerlink" title="zipalign"></a>zipalign</h1><p>D:android\build-tools\22.0.1\zipalign -v 4 android-release-unsigned.apk E:\myApp.apk</p><p>可以把 <code>android\build-tools\22.0.1\</code> 加入环境变量 <code>PATH</code> </p>]]></content>
    
    
    
    <tags>
      
      <tag>Cordova</tag>
      
      <tag>Ionic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈javacript 笔记系列--- 设计模式 之单例模式</title>
    <link href="/2016/06/11/2016-07-11-javascript-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2016/06/11/2016-07-11-javascript-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="javascript设计模式之单例模式"><a href="#javascript设计模式之单例模式" class="headerlink" title="javascript设计模式之单例模式"></a>javascript设计模式之单例模式</h1><h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>在传统开发工程师眼里，单例就是保证一个类只有一个实例，实现的方法一般是先判断实例存在与否，如果存在直接返回，如果不存在就创建了再返回，这就确保了一个类只有一个实例对象。在JavaScript里，单例作为一个命名空间提供者，从全局命名空间里提供一个唯一的访问点来访问该对象。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>在JavaScript里，实现单例的方式有很多种，其中最简单的一个方式是使用对象字面量的方法，其字面量里可以包含大量的属性和方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">var mySingleton = &#123;<br>  property1: <span class="hljs-string">&quot;something&quot;</span>,<br>  property2: <span class="hljs-string">&quot;something else&quot;</span>,<br>  method1: <span class="hljs-function"><span class="hljs-title">function</span></span> () &#123;<br>      console.log(<span class="hljs-string">&#x27;hello world&#x27;</span>);<br>  &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>如果以后要扩展该对象，你可以添加自己的私有成员和方法，然后使用闭包在其内部封装这些变量和函数声明。只暴露你想暴露的public成员和方法，样例代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">var mySingleton = <span class="hljs-function"><span class="hljs-title">function</span></span>() &#123; /* 这里声明私有变量和方法 */<br>  var privateVariable = <span class="hljs-string">&#x27;something private&#x27;</span>;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">showPrivate</span></span>() &#123;<br>    console.log(privateVariable);<br>  &#125;<br>  /* 公有变量和方法（可以访问私有变量和方法） */<br>  <span class="hljs-built_in">return</span> &#123;<br>    publicMethod: <span class="hljs-function"><span class="hljs-title">function</span></span>() &#123;<br>      showPrivate();<br>    &#125;,<br>    publicVar: <span class="hljs-string">&#x27;the public can see this!&#x27;</span><br>  &#125;;<br>&#125;;<br>var single = mySingleton();<br>single.publicMethod(); // 输出 <span class="hljs-string">&#x27;something private&#x27;</span><br>console.log(single.publicVar); // 输出 <span class="hljs-string">&#x27;the public can see this!&#x27;</span><br><br></code></pre></td></tr></table></figure><h2 id="如何拥有私有成员的单体"><a href="#如何拥有私有成员的单体" class="headerlink" title="如何拥有私有成员的单体"></a>如何拥有私有成员的单体</h2><h3 id="下划线标示法"><a href="#下划线标示法" class="headerlink" title="下划线标示法"></a>下划线标示法</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> <span class="hljs-keyword">namespace</span> = &#123;&#125;;<br><span class="hljs-keyword">namespace</span>.DataParser = &#123;<br>  _stripWhitespace:function(<span class="hljs-built_in">str</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>.replace(/s+/,<span class="hljs-string">&#x27;&#x27;</span>);<br>  &#125;,<br>  _stringSplit:funtion(<span class="hljs-built_in">str</span>,delimiter) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>.split(delimiter);<br>  &#125;,<br>  <span class="hljs-comment">//共有方法</span><br>  stringToArray:function(<span class="hljs-built_in">str</span>,delimiter,stripWs) &#123;<br>    <span class="hljs-keyword">if</span>(stripWs) &#123;<br>      <span class="hljs-built_in">str</span> = <span class="hljs-keyword">this</span>._stringWhitespace(<span class="hljs-built_in">str</span>);<br>    &#125;<br>    <span class="hljs-built_in">var</span> outputArray = <span class="hljs-keyword">this</span>._stringSplit(<span class="hljs-built_in">str</span>,delimiter);<br>    <span class="hljs-keyword">return</span> outputArray;<br>  &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="使用闭包"><a href="#使用闭包" class="headerlink" title="使用闭包"></a>使用闭包</h3><p>单体只会被实例化一次，每个方法和属性都只会创建一次，所以你可以把他们都声明在构造函数内部，例如：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> <span class="hljs-keyword">namespace</span> = &#123;&#125;;<br><br><span class="hljs-comment">// 1、最简单的单例</span><br>namspace.singeton = &#123;&#125;<br><br><span class="hljs-comment">// 2、现在我们用一个在定义之后立即执行的函数创造单体</span><br><span class="hljs-keyword">namespace</span>.singleton = <span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">return</span> &#123;&#125;<br>&#125;();<br><br></code></pre></td></tr></table></figure><p>上述的1、2两个例子中创建的namespace.singeton 完全相同，但是要注意的是第二个例子的匿名函数加了一个括号，这代表着，立即执行返回一个对象给namespace.singleton</p><p>有些程序员喜欢在那个匿名函数中在套上一对圆括号，以表示会在声明之后立即执行。这在创建单体较为庞大的时候尤其重要，因为你只要一眼就能看出该函数是用来创建一个闭包。格外加上圆括号，就变成下面这个样子：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">namespace</span>.singleton = (<span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-keyword">return</span> &#123;&#125;<br>&#125;)();<br><br><span class="hljs-comment">// 你可以把公用成员添加到单体返回的对象里面</span><br><span class="hljs-keyword">namespace</span>.singleton = (<span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-comment">// 私有成员</span><br>  <span class="hljs-keyword">var</span> _priviteName = <span class="hljs-string">&quot;dfdfasfd&quot;</span>;<br>  <span class="hljs-keyword">var</span> _priviteMethod = <span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> _priviteName;<br>  &#125;<br><br>  <span class="hljs-comment">// 公用成员</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    publiceAttribute:<span class="hljs-literal">true</span>,<br>    publiceAttribute2:<span class="hljs-number">1</span>,<br>    publiceMenthod:<span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>      ...<br>    &#125;<br>  &#125;<br><br>  &#125;)()<br></code></pre></td></tr></table></figure><p>** 包装函数创建了一个用来正真添加私有成员的闭包，防止程序员调用到私有成员**<br>任何声明在这个匿名函数中（但不是那个字面量中）的变量或者函数都只能被在同一个闭包中声明的其他函数访问。这个闭包在匿名函数执行后依然存在，所以在其中声明的函数和变量总能从匿名函数所返回的对象内部（并且只能从内部）访问</p><p>相比前者，后者不必再用this.或者namespace.singleton 去访问对象中发成员了</p><h2 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h2><p>前面所讲的单体模式都有一个共同特点：单体对象都是在脚本加载完成之后创建出来的。对于资源密集型或者配置开销很大的单体，也许更加合理的方式是将实例化推迟到需要的时候，这种技术被称为惰性加载，它通常用于那些比较大量数据的单体。</p><p>我们如何将普通的闭包单体修改为惰性单体呢？</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> <span class="hljs-keyword">namespace</span> = &#123;&#125;;<br><span class="hljs-keyword">namespace</span>.singleton = (<span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 第一步，将单体的所有代码移动到一个名为constructor的方法中</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Constructor</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-keyword">var</span> _priviteName = <span class="hljs-string">&quot;dfdfasfd&quot;</span>;<br>    <span class="hljs-keyword">var</span> _priviteMethod = <span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> _priviteName;<br>    &#125;<br>&#125;<br> <span class="hljs-comment">// 公用成员</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    publiceAttribute:<span class="hljs-literal">true</span>,<br>    publiceAttribute2:<span class="hljs-number">1</span>,<br>    publiceMenthod:<span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>      ...<br>    &#125;<br>  &#125;<br>&#125;)();<br><br></code></pre></td></tr></table></figure><p>这个方法不能从外部访问，这是一件好事，因为我们可以完全控制其调用时机。公用方法getInstance就是来实现这种控制的。为了使其成为公用方法，只需将其放到一个对象字面量中并返回该对象即可：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> <span class="hljs-keyword">namespace</span> = &#123;&#125;;<br><span class="hljs-keyword">namespace</span>.singleton = (<span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 第一步，将单体的所有代码移动到一个名为constructor的方法中</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Constructor</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-keyword">var</span> _priviteName = <span class="hljs-string">&quot;dfdfasfd&quot;</span>;<br>    <span class="hljs-keyword">var</span> _priviteMethod = <span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> _priviteName;<br>    &#125;<br>&#125;<br> <span class="hljs-comment">// 公用成员</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-comment">// 第二步编写getInstance方法</span><br>    getInstance: <span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>      ...<br>    &#125;<br>  &#125;<br>&#125;)();<br><br></code></pre></td></tr></table></figure><p>现在开始编写控制单体类实例化时机的代码。它需要做两件事情。第一，它必须知道该类是否已经被示例化过。第二，如果该类已经实例化，那么它需要掌握其实例的情况，以便能返回这个实例。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> <span class="hljs-keyword">namespace</span> = &#123;&#125;;<br><span class="hljs-keyword">namespace</span>.singleton = (<span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-keyword">var</span> instance;<br><span class="hljs-comment">// 第一步，将单体的所有代码移动到一个名为constructor的方法中</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Constructor</span><span class="hljs-params">()</span> &#123;<br>   <span class="hljs-keyword">var</span> _priviteName = <span class="hljs-string">&quot;dfdfasfd&quot;</span>;<br>    <span class="hljs-keyword">var</span> _priviteMethod = <span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> _priviteName;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      getName:<span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;23123&quot;</span><br>      &#125;,<br>      publiceMethod2:<span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> _priviteMethod()<br>      &#125;<br>    &#125;<br>&#125;<br> <span class="hljs-comment">// 公用成员</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-comment">// 第二步编写getInstance方法</span><br>    getInstance: <span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">if</span>(!instance) &#123;<br>        instance = Constructor();<br>      &#125;<br>      <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>  &#125;<br>&#125;)();<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript 正则表达式学习笔记</title>
    <link href="/2016/03/25/2016-03-25-RegExp/"/>
    <url>/2016/03/25/2016-03-25-RegExp/</url>
    
    <content type="html"><![CDATA[<h1 id="创建一个正则表达式"><a href="#创建一个正则表达式" class="headerlink" title="创建一个正则表达式:"></a>创建一个正则表达式:</h1><ul><li><strong>perl</strong> 风格</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> expression = <span class="hljs-regexp">/ parrern /</span> flags<br></code></pre></td></tr></table></figure><p>其中模式(<code>parrern</code>) 部分 可以使任何简单或复杂的正则表达式,每个正则表达式都可以带有一个或多个标志(<code>flags</code>),用以表明正则表达式的行为</p><ul><li><strong>JS</strong> 风格</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> expression = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(“a”, “i”)<br></code></pre></td></tr></table></figure><p>在<code>perl</code>-&gt;<code>flags</code> 处 和 <code>JS</code>-&gt;<code>new RegExp</code> 第二个参数 的地方引用修饰符,修饰符可以单独使用,也可以组合使用.</p><span id="more"></span><p>** 匹配模式</p><p>有下列三个修饰符*(flags)*</p><blockquote><ul><li>g:表示全局模式,将应用于所有字符串,而非在发现第一个匹配项时立即停止.</li><li>i:表示不区分大小写</li><li>m:表示多行模式,即在到达一行文本末尾时还会继续查找下一行是否存在与模式匹配的项</li></ul></blockquote><p>当然如果想在表达式中增加匹配模式,这是需要用到</p><h2 id="模式修改符"><a href="#模式修改符" class="headerlink" title="模式修改符"></a>模式修改符</h2><p>在正则表达式中间，对匹配模式进行修改。<br>修改后的匹配模式，只对当前小括号内，修改符之后的部分起作用。比如：</p><blockquote><ul><li>a(b(?i)c)d<br>增加 i - IGNORECASE 模式，只对 c 起作用。表达式可以匹配 “abcd” 和 “abCd”</li></ul></blockquote><h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><table><thead><tr><th align="left">元字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">.</td><td align="left">查找单个字符，除了换行和行结束符。</td></tr><tr><td align="left">\w</td><td align="left">查找单词字符。</td></tr><tr><td align="left">\W</td><td align="left">查找非单词字符。</td></tr><tr><td align="left">\d</td><td align="left">查找数字。</td></tr><tr><td align="left">\D</td><td align="left">查找非数字字符。</td></tr><tr><td align="left">\s</td><td align="left">查找空白字符。</td></tr><tr><td align="left">\S</td><td align="left">查找非空白字符。</td></tr><tr><td align="left">\b</td><td align="left">匹配单词边界。</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界。</td></tr><tr><td align="left">\0</td><td align="left">查找 NUL 字符。</td></tr><tr><td align="left">\n</td><td align="left">查找换行符。</td></tr><tr><td align="left">\f</td><td align="left">查找换页符。</td></tr><tr><td align="left">\r</td><td align="left">查找回车符。</td></tr><tr><td align="left">\t</td><td align="left">查找制表符。</td></tr><tr><td align="left">\v</td><td align="left">查找垂直制表符。</td></tr><tr><td align="left">\xxx</td><td align="left">查找以八进制数 xxx 规定的字符。</td></tr><tr><td align="left">\xdd</td><td align="left">查找以十六进制数 dd 规定的字符。</td></tr><tr><td align="left">\uxxxx</td><td align="left">查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><h1 id="自定义字符集合-方括号"><a href="#自定义字符集合-方括号" class="headerlink" title="自定义字符集合(方括号)"></a>自定义字符集合(方括号)</h1><h2 id="xyz"><a href="#xyz" class="headerlink" title="[xyz]"></a>[xyz]</h2><p>一个字符集合。匹配方括号的中任意字符。你可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。他们不必进行转意，不过转意也是起作用的。</p><p><strong>例如</strong>，[abcd] 和[a-d]是一样的。他们都匹配”brisket”中得‘b’,也都匹配“city”中的‘c’。&#x2F;[a-z.]+&#x2F; 和&#x2F;[\w.]+&#x2F;都匹配“test.i.ng”中得所有字符。</p><h2 id="xyz-1"><a href="#xyz-1" class="headerlink" title="[^xyz]"></a>[^xyz]</h2><p>“^”   符号代表”非,以外”.<br>一个反向字符集。也就是说， 它匹配任何没有包含在方括号中的字符。你可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。</p><p><strong>例如</strong>，[^abc] 和 [^a-c]<br>是一样的。他们匹配”brisket”中得‘r’，也匹配“chop”中的‘h’。</p><p>[0-9] 表示匹配0到9之间的数字.<br>[a-z] 表示匹配a-z之间的字母.</p><h1 id="字符边界-空格"><a href="#字符边界-空格" class="headerlink" title="字符边界(空格)"></a>字符边界(空格)</h1><p>一个词的边界就是一个词不被另外一个词跟随的位置或者不是另一个词汇字符前边的位置。注意，一个匹配的词的边界并不包含在匹配的内容中。换句话说，一个匹配的词的边界的内容的长度是0。<br>本身不匹配任何字符，只对字符边界和字符间缝隙附加条件的表达式。</p><table><thead><tr><th align="left">边界条件</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">^</td><td align="left">当前位置必须是文本开始位置</td></tr><tr><td align="left">$</td><td align="left">当前位置必须是文本结束位置</td></tr><tr><td align="left">\b</td><td align="left">当前位置的左右两侧，只能有一侧是字母数字或下划线</td></tr></tbody></table><p>n$ 匹配任何结尾为 n 的字符串。<br>^n 匹配任何开头为 n 的字符串。</p><h1 id="分组-捕获组-与反向引用"><a href="#分组-捕获组-与反向引用" class="headerlink" title="分组(捕获组)与反向引用"></a>分组(捕获组)与反向引用</h1><p>用括号 ( ) 将其他表达式包含，可以使被包含的表达式组成一个整体，在被修饰匹配次数时，可作为整体被修饰。</p><p>另外，用括号包含的表达式，所匹配到的内容将单独作记录，匹配过程中或结束后可以被获取。</p><p>每一对括号会分配一个编号，使用 () 的捕获根据左括号的顺序从 1 开始自动编号。捕获元素编号为零的第一个捕获是由整个正则表达式模式匹配的文本。</p><ul><li><p>(x) 匹配 x 并且捕获匹配项。 这被称为捕获括号（capturing parentheses）。</p></li><li><p>(?:x) 称之为非捕获括号,匹配’x’但是不记住匹配项。。匹配到的子字符串不能通过结果数组的[1],…,[n]进行访问。</p></li></ul><h1 id="匹配次数限定符-量词-数量词"><a href="#匹配次数限定符-量词-数量词" class="headerlink" title="匹配次数限定符,量词(数量词)"></a>匹配次数限定符,量词(数量词)</h1><p>使被修饰的表达式可多次重复匹配的修饰符。</p><h2 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h2><blockquote><ul><li>可使被修饰的表达式重复固定次数，也可以限定一定的重复匹配的次数范围。在限定符之后的表达式能够匹配成功的情况下，不定次数的限定符总是尽可能的多匹配。如果之后的表达式匹配失败，限定符可适当“让出”能够匹配的字符，以使整个表达式<br>匹配成功。</li></ul></blockquote><table><thead><tr><th align="left">限定符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">{n}</td><td align="left">表达式固定重复n次，比如：”\w{2}” 相当于 “\w\w”</td></tr><tr><td align="left">{m, n}</td><td align="left">表达式尽可能重复n次，至少重复m次：”ba{1,3}”可以匹配 “ba”或”baa”或”baaa”</td></tr><tr><td align="left">{m, }</td><td align="left">表达式尽可能的多匹配，至少重复m次：”\w\d{2,}”可以匹配 “a12”,”x456”…</td></tr><tr><td align="left">?</td><td align="left">表达式尽可能匹配1次，也可以不匹配，相当于 {0, 1}</td></tr><tr><td align="left">+</td><td align="left">表达式尽可能的多匹配，至少匹配1次，相当于 {1, }</td></tr><tr><td align="left">*</td><td align="left">表达式尽可能的多匹配，最少可以不匹配，相当于 {0, }</td></tr></tbody></table><h2 id="勉强模式"><a href="#勉强模式" class="headerlink" title="勉强模式"></a>勉强模式</h2><blockquote><ul><li>在限定符之后添加问号(?)，则使限定符成为“勉强模式”。勉强模式的限定符，总是尽可能少的匹配。如果之后的表达式匹配失败，勉强模式也可以尽可能少的再匹配一些，以使整个表达式匹配成功。</li></ul></blockquote><table><thead><tr><th align="left">限定符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">{m, n}?</td><td align="left">表达式尽量只匹配m次，最多重复n次。</td></tr><tr><td align="left">{m, }?</td><td align="left">表达式尽量只匹配m次，最多可以匹配任意次。</td></tr><tr><td align="left">??</td><td align="left">表达式尽量不匹配，最多匹配1次，相当于 {0, 1}?</td></tr><tr><td align="left">+?</td><td align="left">表达式尽量只匹配1次，最多可匹配任意次，相当于 {1, }?</td></tr><tr><td align="left">*?</td><td align="left">表达式尽量不匹配，最多可匹配任意次，相当于 {0, }?</td></tr></tbody></table><h2 id="占有模式"><a href="#占有模式" class="headerlink" title="占有模式"></a>占有模式</h2><blockquote><ul><li>在限定符之后添加加号(+)，则使限定符成为“占有模式”。占有模式的限定符，总是尽可能多的匹配。与“贪婪模式”不同的是，即使之后的表达式匹配失败，“占有模式”也不会“让出”自己能够匹配的字符。</li></ul></blockquote><table><thead><tr><th align="left">限定符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">{m, n}+</td><td align="left">表达式尽可能重复n次，至少重复m次。</td></tr><tr><td align="left">{m, }+</td><td align="left">表达式尽可能的多匹配，至少重复m次。</td></tr><tr><td align="left">?+</td><td align="left">表达式尽可能匹配1次，也可以不匹配，相当于 {0, 1}+</td></tr><tr><td align="left">++</td><td align="left">表达式尽可能的多匹配，至少匹配1次，相当于 {1, }+</td></tr><tr><td align="left">*+</td><td align="left">表达式尽可能的多匹配，最少可以不匹配，相当于 {0, }+</td></tr></tbody></table><h1 id="选择表达式-xxx-xxx"><a href="#选择表达式-xxx-xxx" class="headerlink" title="选择表达式 xxx | xxx"></a>选择表达式 xxx | xxx</h1><p>使用竖线 “|” 分隔多段表达式，整个表达式可匹配其中任意一段。<br>正则引擎总是从左向右进行尝试匹配，如果每一段表达式都匹配失败，则整个表达式匹配失败。</p><h1 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h1><p>根据某个条件是否成立，来选择匹配 2 个可选表达式中的其中一个。</p><blockquote><ul><li>(?(1)yes|no)</li></ul></blockquote><p>条件为数字分组1如果有捕获，则进行 yes 部分匹配，否则 no 部分</p><h1 id="替换语法"><a href="#替换语法" class="headerlink" title="替换语法"></a>替换语法</h1><p><code>Replace</code>替换操作<br>对匹配到的字符串进行替换操作。</p><table><thead><tr><th align="left">字符</th><th align="left">解释</th></tr></thead><tbody><tr><td align="left">$1 ~ $999</td><td align="left">代表某个捕获组捕获到的内容。如果捕获组编号大于表达式中的最大捕获组编号，那么 DEELX 会减少数字个数，以使捕获组编号小于或等于最大编号；而把剩余的数字看作字符串常量。举例：当前最大捕获组编号为 20，那么，指定替换为 “$999” 将被看作 “$9” + “99”；指定替换为 “$15” 将代表第 15 个捕获组。如果本来就是想把 “5” 当成字符串常量时（”$1” + “5”），可以使用 $0015 表示，DEELX 最多识别 3 位 10 进制数字。</td></tr><tr><td align="left">${name}</td><td align="left">代表指定命名分组捕获到的内容。</td></tr><tr><td align="left">$$</td><td align="left">表示一个 $ 符号。</td></tr><tr><td align="left">$&amp;</td><td align="left">代表每次匹配到内容。</td></tr><tr><td align="left">$&#96;</td><td align="left">代表原字符串中，匹配到的内容之前的字符串。$<code>中</code>符号就是键盘左上角”~”下边的那个符号。</td></tr><tr><td align="left">$’</td><td align="left">代表原字符串中，匹配到的内容之后的字符串。$’ 中 ‘ 符号就是单引号。</td></tr><tr><td align="left">$+</td><td align="left">代表所有“有捕获”的分组中，编号最大的那个分组。举例：”aaa(b+)ccc(b+)” 在匹配”aaabbb”时，虽然最大分组是第2个分组，但最大“有捕获”的是第1个分组，此时的 $+ 代表 $1</td></tr><tr><td align="left">$_</td><td align="left">代表被替换的整个字符串。”_” 是下划线。</td></tr></tbody></table><p>用法请看下方replace 方法</p><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>格式 (?# xxx ) 可用来表示一段注释。<br>1.注释可以位于表达式中任意地方<br>2.在 (?# 之后，遇到第一个反括号将表示注释结束。</p><h1 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h1><p>1.<strong>global</strong></p><ul><li>是否开启全局匹配，也就是匹配目标字符串中所有可能的匹配项，而不是只进行第一次匹配。<br>2.<strong>ignoreCase</strong></li><li>在匹配字符串时是否要忽略字符的大小写。<br>3.<strong>lastIndex</strong></li><li>下次匹配开始的字符串索引位置。<br>4.<strong>multiline</strong></li><li>是否开启多行模式匹配（影响 ^ 和 $ 的行为）。<br>5.<strong>source</strong></li><li>正则对象的源模式文本。</li></ul><h1 id="RegExp-构造函数属性"><a href="#RegExp-构造函数属性" class="headerlink" title="RegExp 构造函数属性"></a>RegExp 构造函数属性</h1><table><thead><tr><th align="left">长属性名</th><th align="right">短属性名</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">input</td><td align="right">$_</td><td align="left">最近一次要匹配的字符串</td></tr><tr><td align="left">lastMarch</td><td align="right">$&amp;</td><td align="left">最近一次的匹配项</td></tr><tr><td align="left">lastParen</td><td align="right">$+</td><td align="left">最近一次匹配的捕获组</td></tr><tr><td align="left">leftContext</td><td align="right">$&#96;</td><td align="left">input 字符串中lastMatch 之前的文本</td></tr><tr><td align="left">leftContext</td><td align="right">$&#96;</td><td align="left">input 字符串中lastMatch 之前的文本</td></tr><tr><td align="left">rightContext</td><td align="right">$’</td><td align="left">input字符串中lastMatch之后的文本</td></tr></tbody></table><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;this has been a short summer&quot;</span>;<br>        <span class="hljs-keyword">var</span> pattern = <span class="hljs-regexp">/(.)hort/g</span>;<br>        <span class="hljs-keyword">if</span> (pattern.<span class="hljs-title function_">test</span>(text))&#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">input</span>);               <span class="hljs-comment">//this has been a short summer</span><br>            <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">leftContext</span>);         <span class="hljs-comment">//this has been a           </span><br>            <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">rightContext</span>);        <span class="hljs-comment">// summer</span><br>            <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">lastMatch</span>);           <span class="hljs-comment">//short</span><br>            <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">lastParen</span>);           <span class="hljs-comment">//s</span><br>            <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">multiline</span>);           <span class="hljs-comment">//false</span><br>        &#125;<br></code></pre></td></tr></table></figure><p><strong>与</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;this has been a short summer&quot;</span>;<br>        <span class="hljs-keyword">var</span> pattern = <span class="hljs-regexp">/(.)hort/g</span>; <br>        <span class="hljs-keyword">if</span> (pattern.<span class="hljs-title function_">test</span>(text))&#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$_</span>);               <span class="hljs-comment">//this has been a short summer</span><br>            <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">RegExp</span>[<span class="hljs-string">&quot;$`&quot;</span>]);            <span class="hljs-comment">//this has been a           </span><br>            <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">RegExp</span>[<span class="hljs-string">&quot;$&#x27;&quot;</span>]);            <span class="hljs-comment">// summer</span><br>            <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">RegExp</span>[<span class="hljs-string">&quot;$&amp;&quot;</span>]);            <span class="hljs-comment">//short</span><br>            <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">RegExp</span>[<span class="hljs-string">&quot;$+&quot;</span>]);            <span class="hljs-comment">//s</span><br>            <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">RegExp</span>[<span class="hljs-string">&quot;$*&quot;</span>]);            <span class="hljs-comment">//false</span><br>        &#125;<br></code></pre></td></tr></table></figure><p><strong>等价</strong></p><hr><h1 id="模式匹配的String方法"><a href="#模式匹配的String方法" class="headerlink" title="模式匹配的String方法"></a>模式匹配的String方法</h1><h2 id="search方法"><a href="#search方法" class="headerlink" title="search方法"></a>search方法</h2><p>与第一个与 regexp 相匹配的子串的起始位置。<br>如果没有找到任何匹配的子串，则返回 -1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str=<span class="hljs-string">&quot;123124145adasdqwri&quot;</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(str.<span class="hljs-title function_">search</span>(<span class="hljs-regexp">/dasd/</span>))<br></code></pre></td></tr></table></figure><h2 id="match方法"><a href="#match方法" class="headerlink" title="match方法"></a>match方法</h2><p>可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。<br>返回匹配的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str=<span class="hljs-string">&quot;Hello world!&quot;</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(str.<span class="hljs-title function_">match</span>(<span class="hljs-string">&quot;world&quot;</span>) + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>)<span class="hljs-comment">//world</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(str.<span class="hljs-title function_">match</span>(<span class="hljs-string">&quot;World&quot;</span>) + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>)<span class="hljs-comment">//null</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(str.<span class="hljs-title function_">match</span>(<span class="hljs-string">&quot;worlld&quot;</span>) + <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>)<span class="hljs-comment">//null</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(str.<span class="hljs-title function_">match</span>(<span class="hljs-string">&quot;world!&quot;</span>))<span class="hljs-comment">///world!</span><br><br><span class="hljs-keyword">var</span> str=<span class="hljs-string">&quot;1 plus 2 equal 3&quot;</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(str.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\d+/g</span>))<span class="hljs-comment">//1,2,3</span><br></code></pre></td></tr></table></figure><h2 id="split方法"><a href="#split方法" class="headerlink" title="split方法"></a>split方法</h2><p><strong>分割</strong><br>字符串方法,可用正则表达式,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> words = sentence.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-keyword">var</span> words = sentence.<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/\s+/</span>)<br></code></pre></td></tr></table></figure><h2 id="replace方法"><a href="#replace方法" class="headerlink" title="replace方法"></a>replace方法</h2><p>还有9个用于存储捕获组”(x)” 的构造函数属性,访问的方法是 RegExp.$1, RegExp.$2,RegExp.$3…. 也可省略RegExp 在调用exec() 或 test() 方法时,这些属性会自动填充,</p><p>PS:用来存储”()”捕获组里匹配到的值.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> text = <span class="hljs-string">&quot;this has been a short summer&quot;</span>;<br>        <span class="hljs-keyword">var</span> pattern = <span class="hljs-regexp">/(..)or(.)/g</span>;<br>        <span class="hljs-keyword">if</span> (pattern.<span class="hljs-title function_">test</span>(text))&#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>);       <span class="hljs-comment">//sh</span><br>            <span class="hljs-title function_">alert</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$2</span>);       <span class="hljs-comment">//t</span><br>        &#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> re =<span class="hljs-regexp">/(\w+)\s(\w+)/</span>;<br><span class="hljs-keyword">var</span> str =<span class="hljs-string">&quot;John Smith&quot;</span>;<br><span class="hljs-keyword">var</span> newstr = str.<span class="hljs-title function_">replace</span>(re,<span class="hljs-string">&quot;$2, $1&quot;</span>);<br><span class="hljs-title function_">print</span>(newstr);<span class="hljs-comment">//Smith John</span><br></code></pre></td></tr></table></figure><h2 id="reg对象exec-方法"><a href="#reg对象exec-方法" class="headerlink" title="reg对象exec()方法"></a>reg对象exec()方法</h2><p>检索字符串中指定的值。返回找到的值，并确定其位置。和match()类似,但是更加强大.此方法有自己的属性</p><table><thead><tr><th align="left">属性&#x2F;索引</th><th align="left">描述</th><th align="left">例子</th></tr></thead><tbody><tr><td align="left">[0]</td><td align="left">匹配的全部字符串</td><td align="left">Quick Brown Fox Jumps</td></tr><tr><td align="left">[1], …[n ]</td><td align="left">括号中的分组捕获</td><td align="left">[2] &#x3D; Jumps [1] &#x3D; Brown</td></tr><tr><td align="left">index</td><td align="left">匹配到的字符位于原始字符串的基于0的索引值</td><td align="left">4</td></tr><tr><td align="left">input</td><td align="left">原始字符串</td><td align="left">The Quick Brown Fox Jumps Over The Lazy Dog</td></tr><tr><td align="left">lastIndex</td><td align="left">下一次匹配开始的位置</td><td align="left">25</td></tr><tr><td align="left">ignoreCase</td><td align="left">是否使用了’i’标记使正则匹配忽略大小写</td><td align="left">true</td></tr><tr><td align="left">global</td><td align="left">是否使用了’g’标记来进行全局的匹配.</td><td align="left">true</td></tr><tr><td align="left">multiline</td><td align="left">是否使用了’m’标记使正则工作在多行模式（也就是，^ 和 $)可以匹配字符串中每一行的开始和结束（行是由 \n 或 \r 分割的），而不只是整个输入字符串的最开始和最末尾处。）</td><td align="left">false</td></tr><tr><td align="left">source</td><td align="left">正则模式的字符串</td><td align="left">quick\s(brown).+?(jumps)</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myRe = <span class="hljs-regexp">/ab*/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;abbcdefabh&#x27;</span>;<br><span class="hljs-keyword">var</span> myArray;<br><span class="hljs-keyword">while</span> ((myArray = myRe.<span class="hljs-title function_">exec</span>(str)) !== <span class="hljs-literal">null</span>) &#123;<br>  <span class="hljs-keyword">var</span> msg = <span class="hljs-string">&#x27;Found &#x27;</span> + myArray[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;. &#x27;</span>;<br>  msg += <span class="hljs-string">&#x27;Next match starts at &#x27;</span> + myRe.<span class="hljs-property">lastIndex</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="reg对象test-方法-最常用"><a href="#reg对象test-方法-最常用" class="headerlink" title="reg对象test()方法(最常用)"></a>reg对象test()方法(最常用)</h2><p>检索字符串中指定的值。返回 true 或 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;Visit W3School&quot;</span>;<br><span class="hljs-keyword">var</span> patt1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;W3School&quot;</span>);<br><span class="hljs-keyword">var</span> result = patt1.<span class="hljs-title function_">test</span>(str);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;Result: &quot;</span> + result);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h1 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h1><ul><li>正整数<br>&#x2F;^[0-9]<em>[1-9][0-9]</em>$&#x2F;;</li><li>负整数<br>&#x2F;^-[0-9]<em>[1-9][0-9]</em>$&#x2F;;</li><li>正浮点数<br>&#x2F;^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]</em>))$&#x2F;;   </li><li>负浮点数<br>&#x2F;^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]</em>)))$&#x2F;;  </li><li>浮点数<br>&#x2F;^(-?\d+)(.\d+)?$&#x2F;;</li><li>email地址<br>&#x2F;^[\w-]+(.[\w-]+)*@[\w-]+(.[\w-]+)+$&#x2F;;</li><li>url地址<br>&#x2F;^[a-zA-z]+:&#x2F;&#x2F;(\w+(-\w+)<em>)(.(\w+(-\w+)</em>))<em>(?\S</em>)?$&#x2F;;<br>或：^http://[A-Za-z0-9]+.[A-Za-z0-9]+[/&#x3D;?%-&amp;_~&#96;@[]&#39;:+!]<em>([^&lt;&gt;&quot;&quot;])</em>$ </li><li>年&#x2F;月&#x2F;日（年-月-日、年.月.日）<br>&#x2F;^(19|20)\d\d<a href="0%5B1-9%5D%7C1%5B012%5D">- &#x2F;.</a><a href="0%5B1-9%5D%7C%5B12%5D%5B0-9%5D%7C3%5B01%5D">- &#x2F;.</a>$&#x2F;;</li><li>匹配中文字符<br>&#x2F;[\u4e00-\u9fa5]&#x2F;;</li><li>匹配帐号是否合法(字母开头，允许5-10字节，允许字母数字下划线)<br>&#x2F;^[a-zA-Z][a-zA-Z0-9_]{4,9}$&#x2F;;</li><li>匹配空白行的正则表达式<br>&#x2F;\n\s*\r&#x2F;;</li><li>匹配中国邮政编码<br>&#x2F;[1-9]\d{5}(?!\d)&#x2F;;</li><li>匹配身份证<br>&#x2F;\d{15}|\d{18}&#x2F;;</li><li>匹配国内电话号码<br>&#x2F;(\d{3}-|\d{4}-)?(\d{8}|\d{7})?&#x2F;;</li><li>匹配IP地址<br>&#x2F;((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)&#x2F;;</li><li>匹配首尾空白字符的正则表达式<br>&#x2F;^\s*|\s*$&#x2F;;<br>&#x2F;&#x2F;匹配HTML标记的正则表达式<br>&lt; (\S*?)[^&gt;]<em>&gt;.</em>?|&lt; .*? &#x2F;&gt;;</li><li>sql 语句<br>^(select|drop|delete|create|update|insert).*$</li><li>提取信息中的网络链接<br>(h|H)(r|R)(e|E)(f|F) *&#x3D; *(‘|”)?(\w|\|/|.)+(‘|”| *|&gt;)? </li><li>提取信息中的邮件地址<br>\w+([-+.]\w+)*@\w+([-.]\w+)<em>.\w+([-.]\w+)</em> </li><li>提取信息中的图片链接<br>(s|S)(r|R)(c|C) *&#x3D; *(‘|”)?(\w|\|/|.)+(‘|”| *|&gt;)? </li><li>提取信息中的 IP 地址<br>(\d+).(\d+).(\d+).(\d+)</li><li>取信息中的中国手机号码<br>(86)<em>0</em>13\d{9} </li><li>提取信息中的中国邮政编码<br>[1-9]{1}(\d+){5} </li><li>提取信息中的浮点数（即小数）<br>(-?\d*).?\d+ </li><li>提取信息中的任何数字<br>(-?\d*)(.\d+)?</li><li>电话区号<br>^0\d{2,3}$</li><li>腾讯 QQ 号<br>^[1-9]<em>[1-9][0-9]</em>$ </li><li>帐号（字母开头，允许 5-16 字节，允许字母数字下划线）<br>^[a-zA-Z][a-zA-Z0-9_]{4,15}$ </li><li>中文、英文、数字及下划线<br>^[\u4e00-\u9fa5_a-zA-Z0-9]+$</li></ul><h1 id="正则脑图"><a href="#正则脑图" class="headerlink" title="正则脑图"></a>正则脑图</h1><p><img src="http://7xrbxz.dl1.z0.glb.clouddn.com/JavaScript-regular-expressions.gif" alt="正则脑图"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://github.com/jsfront/src/blob/master/reg.md">jsfront</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">MDN</a></li><li><a href="http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp">W3CSchool</a></li><li><a href="http://www.regexlab.com/">regexlab</a></li><li><a href="http://www.regexr.com/">学习网站http://www.regexr.com/</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>regexp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular JqLite 方法汇总</title>
    <link href="/2016/02/18/2016-02-18-Angular-JqLite-all-function/"/>
    <url>/2016/02/18/2016-02-18-Angular-JqLite-all-function/</url>
    
    <content type="html"><![CDATA[<h5 id="addClass-为每个匹配的元素添加指定的样式类名"><a href="#addClass-为每个匹配的元素添加指定的样式类名" class="headerlink" title="addClass()-为每个匹配的元素添加指定的样式类名"></a>addClass()-为每个匹配的元素添加指定的样式类名</h5><h5 id="after-在匹配元素集合中的每个元素后面插入参数所指定的内容，作为其兄弟节点"><a href="#after-在匹配元素集合中的每个元素后面插入参数所指定的内容，作为其兄弟节点" class="headerlink" title="after()-在匹配元素集合中的每个元素后面插入参数所指定的内容，作为其兄弟节点"></a>after()-在匹配元素集合中的每个元素后面插入参数所指定的内容，作为其兄弟节点</h5><h5 id="append-在每个匹配元素里面的末尾处插入参数内容"><a href="#append-在每个匹配元素里面的末尾处插入参数内容" class="headerlink" title="append()-在每个匹配元素里面的末尾处插入参数内容"></a>append()-在每个匹配元素里面的末尾处插入参数内容</h5><h5 id="attr-获取匹配的元素集合中的第一个元素的属性的值"><a href="#attr-获取匹配的元素集合中的第一个元素的属性的值" class="headerlink" title="attr() - 获取匹配的元素集合中的第一个元素的属性的值"></a>attr() - 获取匹配的元素集合中的第一个元素的属性的值</h5><h5 id="bind-为一个元素绑定一个事件处理程序"><a href="#bind-为一个元素绑定一个事件处理程序" class="headerlink" title="bind() - 为一个元素绑定一个事件处理程序"></a>bind() - 为一个元素绑定一个事件处理程序</h5><h5 id="children-获得匹配元素集合中每个元素的子元素，选择器选择性筛选"><a href="#children-获得匹配元素集合中每个元素的子元素，选择器选择性筛选" class="headerlink" title="children() - 获得匹配元素集合中每个元素的子元素，选择器选择性筛选"></a>children() - 获得匹配元素集合中每个元素的子元素，选择器选择性筛选</h5><h5 id="clone-创建一个匹配的元素集合的深度拷贝副本"><a href="#clone-创建一个匹配的元素集合的深度拷贝副本" class="headerlink" title="clone()-创建一个匹配的元素集合的深度拷贝副本"></a>clone()-创建一个匹配的元素集合的深度拷贝副本</h5><h5 id="contents-获得匹配元素集合中每个元素的子元素，包括文字和注释节点"><a href="#contents-获得匹配元素集合中每个元素的子元素，包括文字和注释节点" class="headerlink" title="contents()-获得匹配元素集合中每个元素的子元素，包括文字和注释节点"></a>contents()-获得匹配元素集合中每个元素的子元素，包括文字和注释节点</h5><h5 id="css-获取匹配元素集合中的第一个元素的样式属性的值"><a href="#css-获取匹配元素集合中的第一个元素的样式属性的值" class="headerlink" title="css() - 获取匹配元素集合中的第一个元素的样式属性的值"></a>css() - 获取匹配元素集合中的第一个元素的样式属性的值</h5><h5 id="data-在匹配元素上存储任意相关数据"><a href="#data-在匹配元素上存储任意相关数据" class="headerlink" title="data()-在匹配元素上存储任意相关数据"></a>data()-在匹配元素上存储任意相关数据</h5><span id="more"></span><h5 id="detach-从DOM中去掉所有匹配的元素"><a href="#detach-从DOM中去掉所有匹配的元素" class="headerlink" title="detach()-从DOM中去掉所有匹配的元素"></a>detach()-从DOM中去掉所有匹配的元素</h5><h5 id="empty-从DOM中移除集合中匹配元素的所有子节点"><a href="#empty-从DOM中移除集合中匹配元素的所有子节点" class="headerlink" title="empty()-从DOM中移除集合中匹配元素的所有子节点"></a>empty()-从DOM中移除集合中匹配元素的所有子节点</h5><h5 id="eq-减少匹配元素的集合为指定的索引的哪一个元素"><a href="#eq-减少匹配元素的集合为指定的索引的哪一个元素" class="headerlink" title="eq()-减少匹配元素的集合为指定的索引的哪一个元素"></a>eq()-减少匹配元素的集合为指定的索引的哪一个元素</h5><h5 id="find-通过一个选择器，jQuery对象，或元素过滤，得到当前匹配的元素集合中每个元素的后代"><a href="#find-通过一个选择器，jQuery对象，或元素过滤，得到当前匹配的元素集合中每个元素的后代" class="headerlink" title="find() - 通过一个选择器，jQuery对象，或元素过滤，得到当前匹配的元素集合中每个元素的后代"></a>find() - 通过一个选择器，jQuery对象，或元素过滤，得到当前匹配的元素集合中每个元素的后代</h5><h5 id="hasClass-确定任何一个匹配元素是否有被分配给定的（样式）类"><a href="#hasClass-确定任何一个匹配元素是否有被分配给定的（样式）类" class="headerlink" title="hasClass()-确定任何一个匹配元素是否有被分配给定的（样式）类"></a>hasClass()-确定任何一个匹配元素是否有被分配给定的（样式）类</h5><h5 id="html-获取集合中第一个匹配元素的HTML内容"><a href="#html-获取集合中第一个匹配元素的HTML内容" class="headerlink" title="html()-获取集合中第一个匹配元素的HTML内容"></a>html()-获取集合中第一个匹配元素的HTML内容</h5><h5 id="next-取得匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。如果提供一个选择器，那么只有紧跟着的兄弟元素满足选择器时，才会返回此元素"><a href="#next-取得匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。如果提供一个选择器，那么只有紧跟着的兄弟元素满足选择器时，才会返回此元素" class="headerlink" title="next() - 取得匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。如果提供一个选择器，那么只有紧跟着的兄弟元素满足选择器时，才会返回此元素"></a>next() - 取得匹配的元素集合中每一个元素紧邻的后面同辈元素的元素集合。如果提供一个选择器，那么只有紧跟着的兄弟元素满足选择器时，才会返回此元素</h5><h5 id="on-在选定的元素上绑定一个或多个事件处理函数"><a href="#on-在选定的元素上绑定一个或多个事件处理函数" class="headerlink" title="on() - 在选定的元素上绑定一个或多个事件处理函数"></a>on() - 在选定的元素上绑定一个或多个事件处理函数</h5><h5 id="off-移除一个事件处理函数"><a href="#off-移除一个事件处理函数" class="headerlink" title="off() - 移除一个事件处理函数"></a>off() - 移除一个事件处理函数</h5><h5 id="one-为元素的事件添加处理函数。处理函数在每个元素上每种事件类型最多执行一次"><a href="#one-为元素的事件添加处理函数。处理函数在每个元素上每种事件类型最多执行一次" class="headerlink" title="one() - 为元素的事件添加处理函数。处理函数在每个元素上每种事件类型最多执行一次"></a>one() - 为元素的事件添加处理函数。处理函数在每个元素上每种事件类型最多执行一次</h5><h5 id="parent-取得匹配元素集合中，每个元素的父元素，可以提供一个可选的选择器"><a href="#parent-取得匹配元素集合中，每个元素的父元素，可以提供一个可选的选择器" class="headerlink" title="parent() - 取得匹配元素集合中，每个元素的父元素，可以提供一个可选的选择器"></a>parent() - 取得匹配元素集合中，每个元素的父元素，可以提供一个可选的选择器</h5><h5 id="prepend-将参数内容插入到每个匹配元素的前面（元素内部）"><a href="#prepend-将参数内容插入到每个匹配元素的前面（元素内部）" class="headerlink" title="prepend()-将参数内容插入到每个匹配元素的前面（元素内部）"></a>prepend()-将参数内容插入到每个匹配元素的前面（元素内部）</h5><h5 id="prop-获取匹配的元素集中第一个元素的属性（property）值"><a href="#prop-获取匹配的元素集中第一个元素的属性（property）值" class="headerlink" title="prop()-获取匹配的元素集中第一个元素的属性（property）值"></a>prop()-获取匹配的元素集中第一个元素的属性（property）值</h5><h5 id="ready-当DOM准备就绪时，指定一个函数来执行"><a href="#ready-当DOM准备就绪时，指定一个函数来执行" class="headerlink" title="ready()-当DOM准备就绪时，指定一个函数来执行"></a>ready()-当DOM准备就绪时，指定一个函数来执行</h5><h5 id="remove-将匹配元素集合从DOM中删除。（同时移除元素上的事件及-jQuery-数据。）"><a href="#remove-将匹配元素集合从DOM中删除。（同时移除元素上的事件及-jQuery-数据。）" class="headerlink" title="remove()-将匹配元素集合从DOM中删除。（同时移除元素上的事件及 jQuery 数据。）"></a>remove()-将匹配元素集合从DOM中删除。（同时移除元素上的事件及 jQuery 数据。）</h5><h5 id="removeAttr-为匹配的元素集合中的每个元素中移除一个属性（attribute）"><a href="#removeAttr-为匹配的元素集合中的每个元素中移除一个属性（attribute）" class="headerlink" title="removeAttr()-为匹配的元素集合中的每个元素中移除一个属性（attribute）"></a>removeAttr()-为匹配的元素集合中的每个元素中移除一个属性（attribute）</h5><h5 id="removeClass-移除集合中每个匹配元素上一个，多个或全部样式"><a href="#removeClass-移除集合中每个匹配元素上一个，多个或全部样式" class="headerlink" title="removeClass()-移除集合中每个匹配元素上一个，多个或全部样式"></a>removeClass()-移除集合中每个匹配元素上一个，多个或全部样式</h5><h5 id="removeData-在元素上移除绑定的数据"><a href="#removeData-在元素上移除绑定的数据" class="headerlink" title="removeData()-在元素上移除绑定的数据"></a>removeData()-在元素上移除绑定的数据</h5><h5 id="replaceWith-用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合"><a href="#replaceWith-用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合" class="headerlink" title="replaceWith()-用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合"></a>replaceWith()-用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合</h5><h5 id="text-得到匹配元素集合中每个元素的合并文本，包括他们的后代"><a href="#text-得到匹配元素集合中每个元素的合并文本，包括他们的后代" class="headerlink" title="text()-得到匹配元素集合中每个元素的合并文本，包括他们的后代"></a>text()-得到匹配元素集合中每个元素的合并文本，包括他们的后代</h5><h5 id="toggleClass-在匹配的元素集合中的每个元素上添加或删除一个或多个样式类-取决于这个样式类是否存在或值切换属性。即：如果存在（不存在）就删除（添加）一个类"><a href="#toggleClass-在匹配的元素集合中的每个元素上添加或删除一个或多个样式类-取决于这个样式类是否存在或值切换属性。即：如果存在（不存在）就删除（添加）一个类" class="headerlink" title="toggleClass()-在匹配的元素集合中的每个元素上添加或删除一个或多个样式类,取决于这个样式类是否存在或值切换属性。即：如果存在（不存在）就删除（添加）一个类"></a>toggleClass()-在匹配的元素集合中的每个元素上添加或删除一个或多个样式类,取决于这个样式类是否存在或值切换属性。即：如果存在（不存在）就删除（添加）一个类</h5><h5 id="triggerHandler-为一个事件执行附加到元素的所有处理程序"><a href="#triggerHandler-为一个事件执行附加到元素的所有处理程序" class="headerlink" title="triggerHandler() -为一个事件执行附加到元素的所有处理程序"></a>triggerHandler() -为一个事件执行附加到元素的所有处理程序</h5><h5 id="unbind-从元素上删除一个以前附加事件处理程序"><a href="#unbind-从元素上删除一个以前附加事件处理程序" class="headerlink" title="unbind() - 从元素上删除一个以前附加事件处理程序"></a>unbind() - 从元素上删除一个以前附加事件处理程序</h5><h5 id="val-获取匹配的元素集合中第一个元素的当前值"><a href="#val-获取匹配的元素集合中第一个元素的当前值" class="headerlink" title="val()-获取匹配的元素集合中第一个元素的当前值"></a>val()-获取匹配的元素集合中第一个元素的当前值</h5><h5 id="wrap-在每个匹配的元素外层包上一个html元素"><a href="#wrap-在每个匹配的元素外层包上一个html元素" class="headerlink" title="wrap()-在每个匹配的元素外层包上一个html元素"></a>wrap()-在每个匹配的元素外层包上一个html元素</h5>]]></content>
    
    
    
    <tags>
      
      <tag>Angular</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于script标签位置</title>
    <link href="/2016/02/10/2016-02-10-On-the-script-tag-position/"/>
    <url>/2016/02/10/2016-02-10-On-the-script-tag-position/</url>
    
    <content type="html"><![CDATA[<p>按照HTML5标准中的HTML语法规则，如果在<code>&lt;/body&gt;</code>后再出现<code>&lt;script&gt;</code>或任何元素的开始标签，都是parse error，浏览器会忽略之前的<code>&lt;/body&gt;</code>，即视作仍旧在body内。所以实际效果和写在</body>之前是没有区别的。所以html5标准建议大家将script标签写入到<code>&lt;/body&gt;</code>标签之前原因：如果你写在<code>&lt;/body&gt;</code>标签之后，不会有任何错误，上诉已经说明，但是在加载过程中，会将script标签修正到<code>&lt;/body&gt;</code>内部，这个修正过程相比直接写入在性能损耗上会一点损耗，，这样你通过document.body获取的最后一个元素就是script元素，所以大家以后按照HMTL5 标准将script标签写入<code>&lt;/body&gt;</code>(包含引入JS文件以及直接内嵌JS程序)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-comment">&lt;!-- 页面内容 --&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">”text/javascript”</span> <span class="hljs-attr">src</span>=<span class="hljs-string">”文件1.js”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">”text/javascript”</span> <span class="hljs-attr">src</span>=<span class="hljs-string">”文件2.js”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">”text/javascript”</span> <span class="hljs-attr">src</span>=<span class="hljs-string">”文件n.js”</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>  <br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO之我的优化</title>
    <link href="/2016/01/22/2016-01-22-hexo-optimization-of-I/"/>
    <url>/2016/01/22/2016-01-22-hexo-optimization-of-I/</url>
    
    <content type="html"><![CDATA[<p>hexo 本身生成的是一套静态页面,但是用的其主题的ejs模板相互嵌套,发现最后生成的html文件结构混乱,<code>style</code>,<code>scipt</code>,标签穿插在其中.对于我这个稍微有一点代码洁癖的人来说,感觉异常不爽,另外,也不满足<code>script</code>放在dom节点后的规则.而且,<code>script</code>标签在html中,会形成阻塞,最终导致页面加载时的耗时增加.另外,<code>CSS</code>,和<code>script</code>的静态资源放到服务器上,因我的廉价vps,响应时间长,出网低,也会导致最终这些资源加载缓慢.用控制台<code>network</code>查看,耗时从请求到完全完成,大概在<strong>6.8s</strong>左右.对于一套静态页面来说,我觉得这是不能允许的.<br><img src="http://7xrbxz.dl1.z0.glb.clouddn.com/hexo%E4%B9%8B%E6%88%91%E7%9A%84%E4%BC%98%E5%8C%96.png" alt="大图"></p><span id="more"></span><hr><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>所以有以下几点需要解决:<br>1.整合<code>&lt;sctipt&gt;</code><br>2.静态资源加载缓慢<br>3.html结构混乱<br>4.css,js 可以再压缩减小文件大小.</p><h1 id="整合-lt-sctipt-gt"><a href="#整合-lt-sctipt-gt" class="headerlink" title="整合&lt;sctipt&gt;"></a>整合<code>&lt;sctipt&gt;</code></h1><p>我的方法是把所有ejs中的<code>script</code>标签,放到after-footer.ejs 中的<strong>一个</strong><code>script</code>中.并加defer,其他script标签则放在之后.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script defer&gt;<br>    <span class="hljs-keyword">var</span> yiliaConfig = &#123;<br>        <span class="hljs-attr">fancybox</span>: &lt;%= theme.<span class="hljs-property">fancybox</span> %&gt;,<br>        <span class="hljs-attr">animate</span>: &lt;%= theme.<span class="hljs-property">animate</span> %&gt;,<br>        <span class="hljs-attr">isHome</span>: &lt;%= <span class="hljs-title function_">is_home</span>() %&gt;,<br>        <span class="hljs-attr">isPost</span>: &lt;%= <span class="hljs-title function_">is_post</span>() %&gt;,<br>        <span class="hljs-attr">isArchive</span>: &lt;%= <span class="hljs-title function_">is_archive</span>() %&gt;,<br>        <span class="hljs-attr">isTag</span>: &lt;%= <span class="hljs-title function_">is_tag</span>() %&gt;,<br>        <span class="hljs-attr">isCategory</span>: &lt;%= <span class="hljs-title function_">is_category</span>() %&gt;,<br>        <span class="hljs-attr">open_in_new</span>: &lt;%= theme.<span class="hljs-property">open_in_new</span> %&gt;<br>    &#125;<br>    <br>    &lt;!-- ........................ --&gt;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="静态资源加载缓慢"><a href="#静态资源加载缓慢" class="headerlink" title="静态资源加载缓慢"></a>静态资源加载缓慢</h1><p>国内CDN加速,需要把网站备案,不过幸好还有各种的免费云空间，例如七牛。可以将主体的js静态资源存放回国内。主要还是修改主题更改文件指向。把CSS,JS文件,上传七牛云.然后主题_config.yml加入你要配置的路径.在ejs相应位置用<code>theme.fancybox</code> 来代替路径.并且指定<code>async</code> 属性,让多个<code>script</code>异步加载.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 加载资源地址配置</span><br><span class="hljs-comment">#css</span><br><span class="hljs-attr">jqueryfancyboxcss:</span> <span class="hljs-string">http://7xrbjk.dl1.z0.glb.clouddn.com/jquery.fancybox.css</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;% if theme<span class="hljs-selector-class">.fancybox</span> %&#125;<br>&lt;%- css(theme<span class="hljs-selector-class">.jqueryfancyboxcss</span>) %&gt;<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment">#js</span><br><span class="hljs-attr">main:</span> <span class="hljs-string">http://7xrbjk.dl1.z0.glb.clouddn.com/main.js</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;% <span class="hljs-keyword">if</span> theme.<span class="hljs-property">main</span> %&#125;<br>&lt;script <span class="hljs-keyword">async</span> src=<span class="hljs-string">&quot;&lt;%- url_for(theme.main) %&gt;&quot;</span>&gt;&lt;/script&gt;<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure><p>上面是直接用的七牛外链地址,当然也可以用七牛的镜像存储<br><img src="http://7xrbxz.dl1.z0.glb.clouddn.com/hexo%E4%B9%8B%E6%88%91%E7%9A%84%E4%BC%98%E5%8C%96-2.png" alt="镜像存储"></p><blockquote><ul><li>那么自动拉取的文件前面会有<code>/js...</code>的前缀,就可以这样配置</li></ul></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 加载资源地址配置</span><br><span class="hljs-attr">others:</span> <span class="hljs-string">others</span><br><span class="hljs-attr">css:</span> <span class="hljs-string">http://7xrbjk.dl1.z0.glb.clouddn.com/css/</span><br><span class="hljs-attr">js:</span> <span class="hljs-string">http://7xrbjk.dl1.z0.glb.clouddn.com/js/</span><br><span class="hljs-attr">images:</span> <span class="hljs-string">http://7xrbjk.dl1.z0.glb.clouddn.com/images/</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;% <span class="hljs-keyword">if</span> theme.<span class="hljs-property">fancybox</span> %&#125;<br>  &lt;link href=<span class="hljs-string">&quot;&#123;&#123; url_for(theme.css) &#125;&#125;/fancybox/source/jquery.fancybox.css?v=2.1.5&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> type=<span class="hljs-string">&quot;text/css&quot;</span>/&gt;<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;% if theme<span class="hljs-selector-class">.maincss</span> %&#125;<br>  &lt;link href=&quot;&#123;&#123; url_for(theme<span class="hljs-selector-class">.css</span>) &#125;&#125;/css/style<span class="hljs-selector-class">.css</span>&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure><h1 id="html结构混乱-和-CSS-JS-压缩"><a href="#html结构混乱-和-CSS-JS-压缩" class="headerlink" title="html结构混乱 和 CSS JS 压缩"></a>html结构混乱 和 CSS JS 压缩</h1><p>可以采用hexo插件 <a href="https://hexo.io/plugins/">hexo插件(官网)</a> 来自动完成压缩</p><ul><li>hexo-clean-css — Minify CSS files with clean-css. </li><li>hexo-uglify — Minify JavaScript files with UglifyJS.</li><li>hexo-beautify — Beautify Hexo generated HTML, CSS and JS files, using js-beautify. (这个可以格式化html)</li></ul><p>开始安装后 <code>hexo g</code> 不起作用,css js 都没有压缩,我尝试<code>npm install xxx</code>不加<code>--save</code> 解决,不知道为什么..</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p><img src="http://7xrbxz.dl1.z0.glb.clouddn.com/hexo%E4%B9%8B%E6%88%91%E7%9A%84%E4%BC%98%E5%8C%96-03.png" alt="最后"></p><p>效果显著.从请求到全部加载完成,<code>1.16s</code>,好像百度云CDN加速有免费版,不需要备案,不过需要要修改dns到百度指定的dns,效果也是很不错的.</p>]]></content>
    
    
    
    <tags>
      
      <tag>HEXO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HEXO 部署Git的坑</title>
    <link href="/2016/01/20/2016-01-20-hexo-erro/"/>
    <url>/2016/01/20/2016-01-20-hexo-erro/</url>
    
    <content type="html"><![CDATA[<h1 id="部署Git-第一步配置config-yml-文件"><a href="#部署Git-第一步配置config-yml-文件" class="headerlink" title="部署Git 第一步配置config.yml 文件"></a>部署Git 第一步配置config.yml 文件</h1><p>找到根目录下的_config.yml，修改配置</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repo:</span> https:<span class="hljs-comment">//github.com/pyrinelaw/pyrinelaw.github.io.git</span><br><span class="hljs-symbol">    branch:</span> master<br></code></pre></td></tr></table></figure><p>注意<code>type</code>为<code>git</code>,不是<code>github</code>.<br><code>repo</code>也可以写<code>repository</code>,后面地址为你要<code>push</code>的git地址,用http或者git都可以.<br><code>branch</code>为你要<code>push</code>的分支,master为主分支.<br>如果repo配置git,且ssh 配置正确,部署过程会弹出提示框叫你输入ssh的秘钥,确认即可.<br>如果repo配置https,部署过程中会弹出提示框,输入账户名和密码.</p><h1 id="1-部署提示找不到git-Can-not-find"><a href="#1-部署提示找不到git-Can-not-find" class="headerlink" title="1.部署提示找不到git (Can not find ***)"></a>1.部署提示找不到git (Can not find ***)</h1><p><strong>解决办法</strong><br>在Hexo 3.0版本后deploy git 被分开的，所以需要安装，安装命令如下:<br><code>npm install hexo-deployer-git --save</code><br>安装好后在尝试一下就ok。</p><span id="more"></span><h1 id="2-部署提示-｀event-type-error-｀-｀-spawn-git-ENOENT｀"><a href="#2-部署提示-｀event-type-error-｀-｀-spawn-git-ENOENT｀" class="headerlink" title="2.部署提示 ｀event type error ***｀ ｀ spawn git ENOENT｀"></a>2.部署提示 ｀event type error ***｀ ｀ spawn git ENOENT｀</h1><p><strong>解决办法</strong><br>安装了<code>git bash</code>路径没有配置到环境变量path中.将你的git bash 安装路径添加到环境变量path中即可.我的是:<br>C:\Program Files\Git\mingw64\libexec\git-core<br>C:\Program Files\Git\bin</p><h1 id="3-读取不到Git分支"><a href="#3-读取不到Git分支" class="headerlink" title="3.读取不到Git分支"></a>3.读取不到Git分支</h1><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs subunit">Please make sure you have the correct access rights<br>and the repository exists.<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: http://hexo.io<br>cs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>fatal: &#x27;github.com/pyrinelaw/pyrinelaw.github.io.git&#x27; does not appear<br>be a git repository<br>fatal: Could not read from remote repository.<br><br>Please make sure you have the correct access rights<br>and the repository exists.<br></code></pre></td></tr></table></figure><p><strong>解决办法</strong><br>卸载Git 2.5版本，安装1.9版本，问题解决.<br>也可以尝试换https地址再试一下.</p><h1 id="4-部署的时候执行：hexo-deploy-命令行没有任何输出，也没有错误。"><a href="#4-部署的时候执行：hexo-deploy-命令行没有任何输出，也没有错误。" class="headerlink" title="4.部署的时候执行：hexo  deploy 命令行没有任何输出，也没有错误。"></a>4.部署的时候执行：hexo  deploy 命令行没有任何输出，也没有错误。</h1><p><strong>解决办法</strong><br>在部署的_config.yml文件中，找到<code>deploy:</code>标签，在每个冒号后面必须要空格，否则就会出现上述问题。<br>比如：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span>:git<br></code></pre></td></tr></table></figure><p>改为</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span>: git<br></code></pre></td></tr></table></figure><h1 id="5-修改主题样式配置不起作用，而且hexo-generate还报错"><a href="#5-修改主题样式配置不起作用，而且hexo-generate还报错" class="headerlink" title="5.修改主题样式配置不起作用，而且hexo  generate还报错"></a>5.修改主题样式配置不起作用，而且hexo  generate还报错</h1><p><strong>解决办法</strong><br>需要到相应的主题文件夹下面进行修改.<br>比如我的主题为：themes\yelee 则在根目录下的<code>themes</code>找到该文件夹下，修改_config.yml文件，根目录下面也有个同样的名字，不注意，容易弄混，要主要修改的文件是否正确。并且注意加上空格</p><h1 id="6-执行hexo-server错误"><a href="#6-执行hexo-server错误" class="headerlink" title="6.执行hexo server错误"></a>6.执行hexo server错误</h1><p><strong>解决办法</strong><br>是因为在安装hexo 没有安装<code>hexo-server</code>模块<br><code>npm install hexo-server --save</code> 解决</p><h1 id="7-执行hexo-server显示running-at-http-0-0-0-0-4000"><a href="#7-执行hexo-server显示running-at-http-0-0-0-0-4000" class="headerlink" title="7.执行hexo server显示running at http://0.0.0.0:4000/"></a>7.执行hexo server显示running at <a href="http://0.0.0.0:4000/">http://0.0.0.0:4000/</a></h1><p>运行成功显示的<a href="http://0.0.0.0:4000/">http://0.0.0.0:4000/</a> 是没办法访问的，<br>可以尝试访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 或 <a href="http://127.0.0.1:4000/">http://127.0.0.1:4000/</a><br>或者用<code>hexo s -p 80</code>把端口改为80,直接访问<a href="http://127.0.0.1/">http://127.0.0.1</a></p><h1 id="8-hexo-d-｀fatal-‘username-github-io’-does-not-a…-｀"><a href="#8-hexo-d-｀fatal-‘username-github-io’-does-not-a…-｀" class="headerlink" title="8.hexo d  ｀fatal: ‘username.github.io’ does not a….｀"></a>8.hexo d  ｀fatal: ‘username.github.io’ does not a….｀</h1><p><strong>解决办法</strong><br>一 是检查 repo 的名字是否合乎规范、是否含有大写字母、config.yml 中的 deploy 配置是否正确，<br>二 是把 git bash 关掉，重新打开再执行命令。</p><h1 id="9-莫名其妙的问题"><a href="#9-莫名其妙的问题" class="headerlink" title="9.莫名其妙的问题"></a>9.莫名其妙的问题</h1><p><strong>解决办法</strong><br>删除根目录下.deplou_git 文件夹重试<br>检查ssh是否配置正确<br><a href="https://help.github.com/articles/generating-an-ssh-key/">官方教程配置ssh</a></p><h1 id="10-hexo-3-0支持简写"><a href="#10-hexo-3-0支持简写" class="headerlink" title="10.hexo 3.0支持简写"></a>10.hexo 3.0支持简写</h1><p>hexo g &#x3D;&#x3D;  hexo generate</p><p>hexo d &#x3D;&#x3D;  hexo deploy</p><p>hexo s &#x3D;&#x3D;  hexo server</p><p>hexo n &#x3D;&#x3D;  hexo new</p>]]></content>
    
    
    
    <tags>
      
      <tag>HEXO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2016/01/18/2016-01-18-blog-log/"/>
    <url>/2016/01/18/2016-01-18-blog-log/</url>
    
    <content type="html"><![CDATA[<p>本篇日志用于归纳记录自己在学习建设个人博客站点中的各种修改。</p><h1 id="2016-12-18"><a href="#2016-12-18" class="headerlink" title="2016-12-18"></a>2016-12-18</h1><blockquote><ul><li>文章目录增修改为 <a href="http://gregfranko.com/jquery.tocify.js/">jquery.tocify.js</a></li></ul></blockquote><h1 id="2016-12-17"><a href="#2016-12-17" class="headerlink" title="2016-12-17"></a>2016-12-17</h1><blockquote><ul><li>修复多说UA表示手机端不对齐的问题。</li></ul></blockquote><h1 id="2016-12-11"><a href="#2016-12-11" class="headerlink" title="2016-12-11"></a>2016-12-11</h1><blockquote><ul><li>加上<a href="http://fancyapps.com/fancybox/">fancybox.js</a> 以后可以点击预览图片啦！</li><li>原主题采用 <code>jquery.nav.js</code> 来给目录导航跳转加上过渡，感觉不是很好，以下是自己改造过的锚点平滑过渡，<code>jquery.easing.1.3.js.js</code> 为jq扩展了过渡的效果</li></ul></blockquote><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">async</span>(<span class="hljs-string">&#x27;//resource.zwjay.cn/jekyll/js/jquery.easing.1.3.js.js&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    $($body).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;#tag_cloud a&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>        <span class="hljs-keyword">let</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-property">title</span>;<br>        <span class="hljs-keyword">let</span> id = <span class="hljs-string">&#x27;#&#x27;</span> + index;<br>        $(<span class="hljs-string">&quot;html,body&quot;</span>).<span class="hljs-title function_">animate</span>(&#123;<br>            <span class="hljs-attr">scrollTop</span>: [$(id).<span class="hljs-title function_">offset</span>().<span class="hljs-property">top</span> - <span class="hljs-number">65</span>, <span class="hljs-string">&#x27;easeOutQuint&#x27;</span>]<br>        &#125;, <span class="hljs-number">800</span>);<br>    &#125;)<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="2016-12-4"><a href="#2016-12-4" class="headerlink" title="2016-12-4"></a>2016-12-4</h1><blockquote><ul><li>更换404页面。SVG</li></ul></blockquote><h1 id="2016-12-3"><a href="#2016-12-3" class="headerlink" title="2016-12-3"></a>2016-12-3</h1><blockquote><ul><li>给主题加上页码，关于我的多说最近访客头像样式优化，TAGS的平滑滚动</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$($body).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;#tag_cloud a&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;<br>    <span class="hljs-keyword">let</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-property">title</span>;<br>    <span class="hljs-keyword">let</span> id = <span class="hljs-string">&#x27;#&#x27;</span> + index;<br>    $(<span class="hljs-string">&quot;html,body&quot;</span>).<span class="hljs-title function_">animate</span>(&#123;<br>        <span class="hljs-attr">scrollTop</span>: [$(id).<span class="hljs-title function_">offset</span>().<span class="hljs-property">top</span>,<span class="hljs-string">&#x27;easeOutQuint&#x27;</span>]<br>    &#125;, <span class="hljs-number">800</span>, <span class="hljs-string">&#x27;easing&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>过渡效果采用 <code>easeOutBack</code> <a href="http://gsgd.co.uk/sandbox/jquery/easing">jquery.easing</a></p><h1 id="2016-12-1"><a href="#2016-12-1" class="headerlink" title="2016-12-1"></a>2016-12-1</h1><blockquote><ul><li>HEXO bug 太多，改为jekyll，爽多啦！</li></ul></blockquote><h1 id="2016-3-4"><a href="#2016-3-4" class="headerlink" title="2016-3-4"></a>2016-3-4</h1><blockquote><ul><li>手机端文章显示目录样式修改，回到顶部去掉跳转评论按钮。</li></ul></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#tocButton</span> &#123;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">100</span>;<br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">left</span>: .<span class="hljs-number">5em</span>;<br>    <span class="hljs-attribute">top</span>: auto; <span class="hljs-comment">/*In order to cover style in article.styl*/</span><br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">padding</span>: .<span class="hljs-number">2em</span> .<span class="hljs-number">4em</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgba</span>(<span class="hljs-number">39</span>,<span class="hljs-number">40</span>,<span class="hljs-number">34</span>,.<span class="hljs-number">3</span>);<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, .<span class="hljs-number">7</span>);<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1em</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">color</span>: gray;<br>&#125;<br><br><span class="hljs-selector-class">.toc-article</span> &#123;<br>    <span class="hljs-attribute">display</span>: none;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">99</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">7.5%</span>;<br>    <span class="hljs-attribute">right</span> :<span class="hljs-number">50%</span><br>    height: auto;<br>    <span class="hljs-attribute">max-height</span>: <span class="hljs-number">58%</span>;<br>    <span class="hljs-attribute">min-width</span>: <span class="hljs-number">7em</span>;<br>    <span class="hljs-attribute">overflow</span>: auto;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">2.8%</span>;<br>    <span class="hljs-attribute">background</span>: none;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1em</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.25em</span>;<br>    <span class="hljs-selector-class">.toc-title</span> &#123;<br>        <span class="hljs-attribute">display</span>: none;<br>    &#125;<br>    <span class="hljs-selector-class">.toc</span> &#123;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.5em</span>;<br>    &#125;<br>    &gt;<span class="hljs-selector-tag">ol</span> &#123;<br>        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.5em</span>;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, .<span class="hljs-number">9</span>);<br>        <span class="hljs-attribute">position</span>: absolute;<br>        <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-selector-tag">ol</span> &#123;<br>            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.1em</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">1.2em</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-selector-tag">a</span> &#123;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#767676</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2016-2-29"><a href="#2016-2-29" class="headerlink" title="2016-2-29"></a>2016-2-29</h1><blockquote><ul><li>加入百度统计</li></ul></blockquote><h1 id="2016-2-28"><a href="#2016-2-28" class="headerlink" title="2016-2-28"></a>2016-2-28</h1><blockquote><ul><li>Hexo如果开启文章目录，会根据Markdown的#标记自动生成文章目录，并且自动添加序号，但是如果我们的文章中也使用了序号，那就会出现两个序号.</li><li>我解决这个问题是是通过js正则匹配删除了序号。在博客的layout&#x2F;_partial&#x2F;toc.ejs文件中添加如下代码</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> regex = <span class="hljs-regexp">/^\d+\.+/</span>;<br><span class="hljs-keyword">var</span> tocItemTextArray = $(<span class="hljs-string">&quot;.toc-text&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; tocItemTextArray.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">var</span> item = tocItemTextArray[i].<span class="hljs-property">innerText</span>;<br>    item = item.<span class="hljs-title function_">replace</span>(regex, <span class="hljs-string">&quot;&quot;</span>);<br>    tocItemTextArray[i].<span class="hljs-property">innerText</span> = item;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><ul><li>加入</li><li><code>hexo-beautify</code>,Beautify Hexo generated HTML, CSS and JS files, using js-beautify.</li><li><code>hexo-clean-css</code>,Minify CSS files with clean-css.</li><li><code>hexo-uglify</code>,Minify JavaScript files with UglifyJS.</li></ul></blockquote><h1 id="2016-2-27-网页字体修改"><a href="#2016-2-27-网页字体修改" class="headerlink" title="2016-2-27 网页字体修改"></a>2016-2-27 网页字体修改</h1><blockquote><ul><li>font-family: Lato, “Microsoft Jhenghei”, WenQuanYi Micro Hei, “Microsoft YaHei”, Aril, sans-serif;</li></ul></blockquote><h1 id="2016-2-25-修改左栏样式"><a href="#2016-2-25-修改左栏样式" class="headerlink" title="2016-2-25 修改左栏样式"></a>2016-2-25 修改左栏样式</h1><blockquote><ul><li>canvas线条背景</li><li>网页加载性能优化</li><li>解决IIS部署fontawesome404问题 <a href="http://blog.sina.com.cn/s/blog_4997f1b90102vkjn.html">解决Web部署 svg&#x2F;woff&#x2F;woff2字体 404错误</a></li></ul></blockquote><h1 id="2016-1-26-增加进度条"><a href="#2016-1-26-增加进度条" class="headerlink" title="2016-1-26 增加进度条"></a>2016-1-26 增加进度条</h1><blockquote><ul><li><a href="http://github.hubspot.com/pace/docs/welcome/">pace.js</a></li></ul></blockquote><h1 id="2016-1-25-多说评论框背景修改"><a href="#2016-1-25-多说评论框背景修改" class="headerlink" title="2016-1-25 多说评论框背景修改"></a>2016-1-25 多说评论框背景修改</h1><blockquote><ul><li>多说评论框背景修改</li></ul></blockquote><h1 id="2016-1-23-加入置顶"><a href="#2016-1-23-加入置顶" class="headerlink" title="2016-1-23 加入置顶"></a>2016-1-23 加入置顶</h1><blockquote><ul><li><a href="http://www.netcan666.com/2015/11/22/%E8%A7%A3%E5%86%B3Hexo%E7%BD%AE%E9%A1%B6%E9%97%AE%E9%A2%98">解决Hexo置顶问题</a></li></ul></blockquote><h1 id="2016-1-22-关于我页面加入Blog搭建时间"><a href="#2016-1-22-关于我页面加入Blog搭建时间" class="headerlink" title="2016-1-22 关于我页面加入Blog搭建时间"></a>2016-1-22 关于我页面加入Blog搭建时间</h1><blockquote><ul><li>增加距离搭建到现在的总时间</li></ul></blockquote><h1 id="2016-1-21-引入Animate-css"><a href="#2016-1-21-引入Animate-css" class="headerlink" title="2016-1-21 引入Animate.css"></a>2016-1-21 引入Animate.css</h1><blockquote><ul><li><a href="http://daneden.github.io/animate.css/">Animate.css</a></li><li>修改头像动画</li><li>鼠标移入效果</li></ul></blockquote><h1 id="2016-1-20-绑定域名-amp-添加404页面"><a href="#2016-1-20-绑定域名-amp-添加404页面" class="headerlink" title="2016-1-20 绑定域名&amp;添加404页面"></a>2016-1-20 绑定域名&amp;添加404页面</h1><blockquote><ul><li><strong>zwj.space</strong></li><li><a href="http://moxfive.xyz/2015/10/16/hexo-404-page/">404</a></li></ul></blockquote><h1 id="2016-1-19-添加-我的相册"><a href="#2016-1-19-添加-我的相册" class="headerlink" title="2016-1-19 添加-我的相册"></a>2016-1-19 添加-我的相册</h1><hr><blockquote><ul><li><a href="http://litten.github.io/2014/03/03/instagram-api-ex/">参考链接</a></li></ul></blockquote><ul><li>其中获取的token替换在”?”处</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">getList</span>(<span class="hljs-string">&quot;https://api.instagram.com/v1/users/self/media/recent/?access_token=?&quot;</span>);<br></code></pre></td></tr></table></figure><hr><h1 id="2016-1-18-在github部署博客"><a href="#2016-1-18-在github部署博客" class="headerlink" title="2016-1-18 在github部署博客"></a>2016-1-18 在github部署博客</h1><blockquote><ul><li>看到 <a href="http://moxfive.xyz/">MOxFIVE</a>的博客非常不错,也想自己建站写一点东西.它更像是属于自己的一块小小的领地，因而我满足于这种归属感。</li><li>沿用 <a href="http://moxfive.xyz/">MOxFIVE</a> 的 主题 <a href="https://github.com/MOxFIVE/hexo-theme-yelee">yelee</a>。</li><li><a href="http://segmentfault.com/a/1190000003088603">最新版HEXO配置，HEXO+Github，搭建自己的博客</a></li><li><a href="http://wp.huangshiyang.com/hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">Hexo常见问题解决方案</a></li><li><a href="http://www.ituring.com.cn/article/199453">Hexo主题中新添加resume布局</a></li><li><a href="https://pages.github.com/">GitPages</a></li><li><a href="http://blog.csdn.net/steven6977/article/details/10567719">关于初学者上传文件到github的方法</a></li></ul></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>HEXO</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
